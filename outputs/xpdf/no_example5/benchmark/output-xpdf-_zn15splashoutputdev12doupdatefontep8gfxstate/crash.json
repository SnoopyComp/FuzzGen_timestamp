{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "33.96",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // Include for memcpy\\n\\n// Assuming GfxState is a class that has a proper constructor and is not trivially default constructible.\\nclass GfxState {\\npublic:\\n    int someField; // Example member\\n    char someString[10]; // Example member\\n\\n    GfxState() {\\n        // Initialize members as needed\\n        someField = 0;\\n        std::memset(someString, 0, sizeof(someString)); // Initialize string\\n    }\\n\\n    // Add other necessary members and methods\\n};\\n\\nnamespace SplashOutputDev {\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Function implementation\\n    }\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n    \\n    // Create a GfxState object\\n    GfxState gfxState;\\n\\n    // Use FuzzedDataProvider to initialize fields in GfxState\\n    gfxState.someField = stream.ConsumeIntegral<int>(); // Consume an integer\\n\\n    // Consume a random length string and ensure it fits in the buffer\\n    std::string consumedString = stream.ConsumeRandomLengthString(9); // Max length 9 to leave space for null terminator\\n    std::strncpy(gfxState.someString, consumedString.c_str(), sizeof(gfxState.someString) - 1);\\n    gfxState.someString[sizeof(gfxState.someString) - 1] = '\\0'; // Null-terminate the string\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    SplashOutputDev::doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "33.99",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n\\n// Assuming GfxState is a class defined somewhere in the project\\nclass GfxState {\\npublic:\\n    // Example member variables\\n    int width;\\n    int height;\\n    std::vector<uint8_t> fontData;\\n\\n    GfxState(int w, int h, const std::vector<uint8_t>& data)\\n        : width(w), height(h), fontData(data) {}\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Implementation of the function (not provided here)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for GfxState\\n    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Width should not be zero\\n    int height = stream.ConsumeIntegralInRange<int>(1, 1000); // Height should not be zero\\n\\n    // Consume font data\\n    std::vector<uint8_t> fontData = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange<size_t>(1, 256)); // At least 1 byte for font data\\n\\n    // Create GfxState object\\n    GfxState gfxState(width, height, fontData);\\n\\n    // Create SplashOutputDev object\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function to fuzz\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}