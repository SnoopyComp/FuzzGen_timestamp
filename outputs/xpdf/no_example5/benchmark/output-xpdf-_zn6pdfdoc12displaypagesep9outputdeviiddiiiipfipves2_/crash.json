{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <iostream> // Include for standard I/O if needed for debugging\\n\\n// Include the header file where PDFDoc is defined\\n#include \"PDFDoc.h\" // Assuming PDFDoc is defined in this header file\\n#include \"gtypes.h\"  // Include the header where GBool is defined\\n\\n// Assuming these types are defined somewhere in your codebase\\nclass OutputDev {};\\nusing GBool = int; // Use the same type as defined in gtypes.h\\nusing DW_TAG_subroutine_typeInfiniteLoop = int; // Placeholder for the actual type\\n\\n// The function under test should be defined somewhere in PDFDoc.cpp\\n// void PDFDoc::displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double xPos, double yPos, int rotation, GBool crop, GBool print, GBool embed, GBool (*loop)(void *), void *userData);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters\\n    OutputDev outputDev; // Assuming default constructor is sufficient\\n    int pageStart = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Example range\\n    int pageEnd = fuzzed_data.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double xPos = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double yPos = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int rotation = fuzzed_data.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees\\n    GBool crop = fuzzed_data.ConsumeBool();\\n    GBool print = fuzzed_data.ConsumeBool();\\n    GBool embed = fuzzed_data.ConsumeBool();\\n    \\n    // Create a pointer for DW_TAG_subroutine_typeInfiniteLoop\\n    GBool (*loop)(void *) = nullptr; // Set to nullptr or a valid function pointer if available\\n\\n    // ConsumeRemainingBytes() returns a vector, we take the pointer to its data\\n    std::vector<uint8_t> remainingBytes = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    void *userData = static_cast<void*>(remainingBytes.data()); // Use the correct template argument\\n\\n    // Call the function under test\\n    GString fileName(\"dummy.pdf\"); // Assuming GString is defined and a valid filename is required\\n    PDFDoc pdfDoc(&fileName); // Create an instance of PDFDoc with a valid argument\\n\\n    // Ensure that the loop function pointer is valid if needed\\n    if (loop != nullptr) {\\n        pdfDoc.displayPages(&outputDev, pageStart, pageEnd, xPos, yPos, rotation, crop, print, embed, loop, userData);\\n    } else {\\n        // Handle the case where loop is nullptr if necessary\\n        pdfDoc.displayPages(&outputDev, pageStart, pageEnd, xPos, yPos, rotation, crop, print, embed, nullptr, userData);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "50.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n\\n// Include necessary headers for PDFDoc and related types\\n#include <iostream> // For demonstration purposes (can be removed if not needed)\\n\\n// Assuming the necessary includes for the types used in the function signature\\nclass OutputDev {}; // Placeholder for OutputDev class\\nusing GBool = bool; // Assuming GBool is a typedef for bool\\n\\n// Define the structure properly\\nstruct DW_TAG_subroutine_typeInfinite {\\n    // Add relevant members if needed\\n};\\n\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool rotate, GBool crop, GBool useCache, DW_TAG_subroutine_typeInfinite *subroutine, void *userData) {\\n        // Function implementation (placeholder)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of OutputDev\\n    OutputDev outputDev;\\n\\n    // Consume parameters for the function\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming page numbers are between 1 and 100\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate\\n    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10\\n    GBool rotate = stream.ConsumeBool(); // Rotation flag\\n    GBool crop = stream.ConsumeBool(); // Crop flag\\n    GBool useCache = stream.ConsumeBool(); // Use cache flag\\n\\n    // Create a subroutine type instance\\n    DW_TAG_subroutine_typeInfinite subroutine;\\n\\n    // Call the function to fuzz\\n    PDFDoc doc; // Assuming PDFDoc is defined somewhere\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    doc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, rotate, crop, useCache, &subroutine, nullptr);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}