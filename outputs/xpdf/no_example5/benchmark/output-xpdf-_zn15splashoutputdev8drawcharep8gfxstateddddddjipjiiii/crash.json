{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <string> // Include for std::string\\n#include <cstring> // Include for std::memcpy\\n\\n// Assuming the following types are defined somewhere in the codebase\\nclass GfxState {};\\nclass SplashOutputDev { // Added definition for SplashOutputDev\\npublic:\\n    static void drawChar(GfxState *state, double x, double y, double width, double height,\\n                         double fontSize, double rotation, CharCode charCode, int flags,\\n                         Unicode *unicode, int unicodeCount, GBool isUnderlined,\\n                         GBool isBold, GBool isItalic);\\n};\\n\\nusing CharCode = uint32_t; // Assuming CharCode is a typedef for uint32_t\\nusing Unicode = uint32_t;   // Assuming Unicode is a typedef for uint32_t\\nusing GBool = int;          // Assuming GBool is an int where 0 is false and 1 is true\\n\\n// This is the function under test\\nvoid SplashOutputDev::drawChar(GfxState *state, double x, double y, double width, double height,\\n                                double fontSize, double rotation, CharCode charCode, int flags,\\n                                Unicode *unicode, int unicodeCount, GBool isUnderlined,\\n                                GBool isBold, GBool isItalic) {\\n    // Function implementation (omitted for brevity)\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Create a GfxState object\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double fontSize = stream.ConsumeFloatingPoint<double>();\\n    double rotation = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int flags = stream.ConsumeIntegral<int>();\\n    \\n    // Consume Unicode data\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 Unicode\\n    std::vector<Unicode> unicodeData = stream.ConsumeBytes<Unicode>(unicodeCount * sizeof(Unicode));\\n    \\n    // Validate the size of the unicodeData vector\\n    if (unicodeData.size() != unicodeCount) {\\n        return 0; // Not enough data, exit early\\n    }\\n    \\n    // Ensure we have enough data for unicode\\n    Unicode* unicodePtr = unicodeData.data();\\n    \\n    // Consume boolean values\\n    GBool isUnderlined = stream.ConsumeBool() ? 1 : 0;\\n    GBool isBold = stream.ConsumeBool() ? 1 : 0;\\n    GBool isItalic = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Call the function under test\\n    SplashOutputDev::drawChar(&gfxState, x, y, width, height, fontSize, rotation,\\n                               charCode, flags, unicodePtr, static_cast<int>(unicodeCount),\\n                               isUnderlined, isBold, isItalic);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "61.81",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <cstring>\\n#include <string>\\n\\n// Assuming these types are defined somewhere in your codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example type for CharCode\\nusing Unicode = uint32_t; // Example type for Unicode\\nusing GBool = bool; // Example type for GBool\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double ascent, double descent, CharCode charCode, int fontSize,\\n                  Unicode *unicode, int unicodeCount, GBool isUnderlined,\\n                  GBool isBold, GBool isItalic) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Assuming default constructor is available\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double ascent = stream.ConsumeFloatingPoint<double>();\\n    double descent = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Prepare Unicode array\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));\\n    \\n    // Ensure the Unicode pointer is valid\\n    if (unicodeString.size() != unicodeCount * sizeof(Unicode)) {\\n        return 0; // Invalid size, do not proceed\\n    }\\n    \\n    std::vector<Unicode> unicodeArray(reinterpret_cast<Unicode*>(const_cast<char*>(unicodeString.data())), \\n                                       reinterpret_cast<Unicode*>(const_cast<char*>(unicodeString.data())) + unicodeCount);\\n    \\n    // Consume boolean values\\n    GBool isUnderlined = stream.ConsumeBool();\\n    GBool isBold = stream.ConsumeBool();\\n    GBool isItalic = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, ascent, descent, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), isUnderlined, isBold, isItalic);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}