LLVMFuzzerTestOneInput:
   28|      4|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   29|      4|auto start_target = std::chrono::high_resolution_clock::now();
   30|      4|    FuzzedDataProvider stream(data, size);
   31|       |
   32|       |    // Initialize parameters for GfxState
   33|      4|    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Width should not be zero
   34|      4|    int height = stream.ConsumeIntegralInRange<int>(1, 1000); // Height should not be zero
   35|       |
   36|       |    // Consume font data
   37|      4|    std::vector<uint8_t> fontData = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange<size_t>(1, 256)); // At least 1 byte for font data
   38|       |
   39|       |    // Create GfxState object
   40|      4|    GfxState gfxState(width, height, fontData);
   41|       |
   42|       |    // Create SplashOutputDev object
   43|      4|    SplashOutputDev splashOutputDev;
   44|       |
   45|       |    // Call the function to fuzz
   46|      4|	auto start_func = std::chrono::high_resolution_clock::now();
   47|      4|    splashOutputDev.doUpdateFont(&gfxState);
   48|      4|	auto end_func = std::chrono::high_resolution_clock::now();
   49|      4|auto end_target = std::chrono::high_resolution_clock::now();
   50|      4|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   51|       |
   52|      4|    return 0;
   53|      4|}
_ZN8GfxStateC2EiiRKNSt3__16vectorIhNS0_9allocatorIhEEEE:
   18|      4|        : width(w), height(h), fontData(data) {}
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   23|      4|    void doUpdateFont(GfxState *state) {
   24|       |        // Implementation of the function (not provided here)
   25|      4|    }

