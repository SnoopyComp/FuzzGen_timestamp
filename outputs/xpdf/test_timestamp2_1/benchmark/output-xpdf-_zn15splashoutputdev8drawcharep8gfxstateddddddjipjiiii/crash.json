{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming these types are defined somewhere in the project\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, replace with actual type\\nusing Unicode = uint32_t;   // Example definition, replace with actual type\\nusing GBool = int;          // Example definition, replace with actual type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double dx, double dy, CharCode code, int fontSize,\\n                  Unicode *unicode, int unicodeCount, GBool flag1,\\n                  GBool flag2, GBool flag3) {\\n        // Function implementation (not shown)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function call\\n    GfxState gfxState; // Ensure this is properly initialized if necessary\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate Unicode array\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure non-zero count\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    for (size_t i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize,\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                              unicodeArray.data(), static_cast<int>(unicodeCount),\\n                              flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming these are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Assuming CharCode is a typedef for uint32_t\\nusing Unicode = uint32_t; // Assuming Unicode is a typedef for uint32_t\\nusing GBool = int; // Assuming GBool is a typedef for int, where 0 is false and 1 is true\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double x_offset, double y_offset, CharCode char_code, int font_size,\\n                  Unicode *unicode_ptr, int unicode_count, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a GfxState object\\n    GfxState gfx_state;\\n\\n    // Consume doubles\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double x_offset = stream.ConsumeFloatingPoint<double>();\\n    double y_offset = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode\\n    CharCode char_code = stream.ConsumeIntegral<CharCode>();\\n\\n    // Consume font size\\n    int font_size = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode array\\n    size_t unicode_count = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode\\n    std::string unicode_string = stream.ConsumeRandomLengthString(unicode_count * sizeof(Unicode));\\n    \\n    // Ensure the size of the unicode_string is valid\\n    if (unicode_string.size() != unicode_count * sizeof(Unicode)) {\\n        return 0; // Invalid size, exit early\\n    }\\n    \\n    // Convert string data to Unicode array\\n    std::vector<Unicode> unicode_vec(unicode_count);\\n    for (size_t i = 0; i < unicode_count; ++i) {\\n        unicode_vec[i] = static_cast<Unicode>(unicode_string[i % unicode_string.size()]); // Cast to Unicode\\n    }\\n    Unicode *unicode_ptr = unicode_vec.data(); // Pointer to the first element\\n\\n    // Consume GBool flags\\n    GBool flag1 = stream.ConsumeBool() ? 1 : 0;\\n    GBool flag2 = stream.ConsumeBool() ? 1 : 0;\\n    GBool flag3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Call the function under test\\n    SplashOutputDev splash_output_dev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splash_output_dev.drawChar(&gfx_state, x, y, width, height, x_offset, y_offset, \\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                                char_code, font_size, unicode_ptr, unicode_count, \\n                                flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}