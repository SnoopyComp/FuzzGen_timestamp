{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "35.04",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n\\n// Assuming GfxState is a defined class in the same context\\nclass GfxState {\\npublic:\\n    // Example members for GfxState. Adjust as necessary for the actual implementation.\\n    int someInt;\\n    float someFloat;\\n    std::vector<uint8_t> someData;\\n\\n    GfxState() : someInt(0), someFloat(0.0f) {}\\n};\\n\\n// Assuming SplashOutputDev is a defined class in the same context\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Function implementation (not provided)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of GfxState\\n    GfxState gfxState;\\n\\n    // Populate GfxState with fuzzed data\\n    gfxState.someInt = stream.ConsumeIntegral<int>();\\n    gfxState.someFloat = stream.ConsumeFloatingPoint<float>();\\n\\n    // Consume a random length for someData, ensuring it's not empty\\n    size_t dataSize = stream.ConsumeIntegralInRange<size_t>(1, 256); // At least 1 byte\\n    gfxState.someData = stream.ConsumeBytes<uint8_t>(dataSize);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "33.04",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n#include <string>\\n\\n// Assuming GfxState is defined somewhere in the included headers\\nclass GfxState {\\npublic:\\n    // Example members that could represent the state\\n    std::string fontName;\\n    int fontSize;\\n\\n    // Constructor to initialize members\\n    GfxState() : fontName(\"default\"), fontSize(12) {}\\n\\n    // Method to set state from fuzzed data\\n    void setState(const std::string& name, int size) {\\n        fontName = name;\\n        fontSize = size;\\n    }\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Implementation of the function\\n        // For demonstration, we will print the state\\n        // In a real implementation, this would update the font based on the GfxState\\n        // Here we just simulate some processing\\n        if (!state->fontName.empty() && state->fontSize > 0) {\\n            // Simulate processing the font update\\n            // This is where the actual font update logic would go\\n        }\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of GfxState\\n    GfxState gfxState;\\n\\n    // Generate random font name and size from fuzzed data\\n    std::string fontName = fuzzed_data.ConsumeRandomLengthString(10); // Random string of max length 10\\n    int fontSize = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Random size between 1 and 100\\n\\n    // Set the state with fuzzed data\\n    gfxState.setState(fontName, fontSize);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}