LLVMFuzzerTestOneInput:
   41|     12|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   42|     12|auto start_target = std::chrono::high_resolution_clock::now();
   43|       |    // Create a FuzzedDataProvider instance
   44|     12|    FuzzedDataProvider fuzzed_data(data, size);
   45|       |
   46|       |    // Create an instance of GfxState
   47|     12|    GfxState gfxState;
   48|       |
   49|       |    // Generate random font name and size from fuzzed data
   50|     12|    std::string fontName = fuzzed_data.ConsumeRandomLengthString(10); // Random string of max length 10
   51|     12|    int fontSize = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Random size between 1 and 100
   52|       |
   53|       |    // Set the state with fuzzed data
   54|     12|    gfxState.setState(fontName, fontSize);
   55|       |
   56|       |    // Create an instance of SplashOutputDev
   57|     12|    SplashOutputDev splashOutputDev;
   58|       |
   59|       |    // Call the function under test
   60|     12|	auto start_func = std::chrono::high_resolution_clock::now();
   61|     12|    splashOutputDev.doUpdateFont(&gfxState);
   62|     12|	auto end_func = std::chrono::high_resolution_clock::now();
   63|     12|auto end_target = std::chrono::high_resolution_clock::now();
   64|     12|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   65|       |
   66|     12|    return 0;
   67|     12|}
_ZN8GfxStateC2Ev:
   18|     12|    GfxState() : fontName("default"), fontSize(12) {}
_ZN8GfxState8setStateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi:
   21|     12|    void setState(const std::string& name, int size) {
   22|     12|        fontName = name;
   23|     12|        fontSize = size;
   24|     12|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   29|     12|    void doUpdateFont(GfxState *state) {
   30|       |        // Implementation of the function
   31|       |        // For demonstration, we will print the state
   32|       |        // In a real implementation, this would update the font based on the GfxState
   33|       |        // Here we just simulate some processing
   34|     12|        if (!state->fontName.empty() && state->fontSize > 0) {
  ------------------
  |  Branch (34:13): [True: 10, False: 2]
  |  Branch (34:41): [True: 10, False: 0]
  ------------------
   35|       |            // Simulate processing the font update
   36|       |            // This is where the actual font update logic would go
   37|     10|        }
   38|     12|    }

