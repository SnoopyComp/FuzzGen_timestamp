LLVMFuzzerTestOneInput:
   28|     10|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   29|     10|auto start_target = std::chrono::high_resolution_clock::now();
   30|     10|    FuzzedDataProvider stream(data, size);
   31|       |
   32|       |    // Create an instance of GfxState
   33|     10|    GfxState gfxState;
   34|       |
   35|       |    // Populate GfxState with fuzzed data
   36|     10|    gfxState.someInt = stream.ConsumeIntegral<int>();
   37|     10|    gfxState.someFloat = stream.ConsumeFloatingPoint<float>();
   38|       |
   39|       |    // Consume a random length for someData, ensuring it's not empty
   40|     10|    size_t dataSize = stream.ConsumeIntegralInRange<size_t>(1, 256); // At least 1 byte
   41|     10|    gfxState.someData = stream.ConsumeBytes<uint8_t>(dataSize);
   42|       |
   43|       |    // Create an instance of SplashOutputDev
   44|     10|    SplashOutputDev splashOutputDev;
   45|       |
   46|       |    // Call the function under test
   47|     10|	auto start_func = std::chrono::high_resolution_clock::now();
   48|     10|    splashOutputDev.doUpdateFont(&gfxState);
   49|     10|	auto end_func = std::chrono::high_resolution_clock::now();
   50|     10|auto end_target = std::chrono::high_resolution_clock::now();
   51|     10|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   52|       |
   53|     10|    return 0;
   54|     10|}
_ZN8GfxStateC2Ev:
   17|     10|    GfxState() : someInt(0), someFloat(0.0f) {}
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   23|     10|    void doUpdateFont(GfxState *state) {
   24|       |        // Function implementation (not provided)
   25|     10|    }

