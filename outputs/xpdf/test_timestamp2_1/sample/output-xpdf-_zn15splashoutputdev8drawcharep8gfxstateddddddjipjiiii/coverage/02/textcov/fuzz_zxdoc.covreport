LLVMFuzzerTestOneInput:
   21|     56|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   22|     56|    FuzzedDataProvider stream(data, size);
   23|       |
   24|       |    // Create a GfxState object
   25|     56|    GfxState gfx_state;
   26|       |
   27|       |    // Consume doubles
   28|     56|    double x = stream.ConsumeFloatingPoint<double>();
   29|     56|    double y = stream.ConsumeFloatingPoint<double>();
   30|     56|    double width = stream.ConsumeFloatingPoint<double>();
   31|     56|    double height = stream.ConsumeFloatingPoint<double>();
   32|     56|    double x_offset = stream.ConsumeFloatingPoint<double>();
   33|     56|    double y_offset = stream.ConsumeFloatingPoint<double>();
   34|       |
   35|       |    // Consume CharCode
   36|     56|    CharCode char_code = stream.ConsumeIntegral<CharCode>();
   37|       |
   38|       |    // Consume font size
   39|     56|    int font_size = stream.ConsumeIntegral<int>();
   40|       |
   41|       |    // Consume Unicode array
   42|     56|    size_t unicode_count = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode
   43|     56|    std::string unicode_string = stream.ConsumeRandomLengthString(unicode_count * sizeof(Unicode));
   44|       |    
   45|       |    // Ensure the size of the unicode_string is valid
   46|     56|    if (unicode_string.size() != unicode_count * sizeof(Unicode)) {
  ------------------
  |  Branch (46:9): [True: 47, False: 9]
  ------------------
   47|     47|        return 0; // Invalid size, exit early
   48|     47|    }
   49|       |    
   50|       |    // Convert string data to Unicode array
   51|      9|    std::vector<Unicode> unicode_vec(unicode_count);
   52|     93|    for (size_t i = 0; i < unicode_count; ++i) {
  ------------------
  |  Branch (52:24): [True: 84, False: 9]
  ------------------
   53|     84|        unicode_vec[i] = static_cast<Unicode>(unicode_string[i % unicode_string.size()]); // Cast to Unicode
   54|     84|    }
   55|      9|    Unicode *unicode_ptr = unicode_vec.data(); // Pointer to the first element
   56|       |
   57|       |    // Consume GBool flags
   58|      9|    GBool flag1 = stream.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (58:19): [True: 1, False: 8]
  ------------------
   59|      9|    GBool flag2 = stream.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (59:19): [True: 1, False: 8]
  ------------------
   60|      9|    GBool flag3 = stream.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (60:19): [True: 1, False: 8]
  ------------------
   61|       |
   62|       |    // Call the function under test
   63|      9|    SplashOutputDev splash_output_dev;
   64|      9|    splash_output_dev.drawChar(&gfx_state, x, y, width, height, x_offset, y_offset, 
   65|      9|                                char_code, font_size, unicode_ptr, unicode_count, 
   66|      9|                                flag1, flag2, flag3);
   67|       |
   68|      9|    return 0;
   69|     56|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjiiii:
   16|      9|                  Unicode *unicode_ptr, int unicode_count, GBool flag1, GBool flag2, GBool flag3) {
   17|       |        // Function implementation
   18|      9|    }

