{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint> // For uint8_t\\n#include <vector>\\n#include <string> // For std::string\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n// Include necessary project-specific headers\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Corrected path for SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"        // Assuming this header contains the definition for GfxState\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"      // Replaced Unicode.h with UnicodeMap.h\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"         // Including GfxFont.h for GBool type\\n\\n// Ensure that GBool and gTrue/gFalse are defined\\nusing GBool = int; // Assuming GBool is defined as an int type\\nconst GBool gTrue = 1;\\nconst GBool gFalse = 0;\\n\\nvoid SplashOutputDev::drawChar(GfxState *, double, double, double, double, double, double, int, int, UnicodeMap *, int, GBool, GBool, GBool);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters\\n    std::vector<uint8_t> gfxStateData = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(GfxState));\\n    if (gfxStateData.size() != sizeof(GfxState)) {\\n        return 0; // Invalid size, exit early\\n    }\\n    GfxState* gfx_state = reinterpret_cast<GfxState*>(gfxStateData.data());\\n\\n    // Consume doubles for the coordinates and other parameters\\n    double param1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param4 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param5 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param6 = fuzzed_data.ConsumeFloatingPoint<double>();\\n\\n    // Consume an integer for CharCode\\n    int char_code = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume an integer\\n    int int_param = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume a UnicodeMap pointer\\n    std::vector<uint8_t> unicodeData = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(UnicodeMap));\\n    if (unicodeData.size() != sizeof(UnicodeMap)) {\\n        return 0; // Invalid size, exit early\\n    }\\n    UnicodeMap* unicode_ptr = reinterpret_cast<UnicodeMap*>(unicodeData.data());\\n\\n    // Consume another integer\\n    int another_int_param = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume boolean values\\n    GBool bool_param1 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n    GBool bool_param2 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n    GBool bool_param3 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Call the function under test\\n    SplashOutputDev::drawChar(gfx_state, param1, param2, param3, param4, param5, param6, char_code, int_param, unicode_ptr, another_int_param, bool_param1, bool_param2, bool_param3);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "57.94",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming the necessary types are defined somewhere\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example type, adjust as needed\\nusing Unicode = uint32_t;   // Example type, adjust as needed\\nusing GBool = bool;         // Example type, adjust as needed\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation (not provided)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Ensure this is not null\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Consume Unicode pointer data\\n    std::vector<Unicode> unicodeVec;\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character\\n    unicodeVec.resize(unicodeSize);\\n    stream.ConsumeData(unicodeVec.data(), unicodeSize * sizeof(Unicode));\\n    \\n    // Prepare boolean parameters\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev;\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeVec.data(), unicodeSize, boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}