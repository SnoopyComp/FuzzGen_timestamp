LLVMFuzzerTestOneInput:
   37|     19|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   38|       |    // Create a FuzzedDataProvider to consume the input data
   39|     19|    FuzzedDataProvider fuzzed_data(data, size);
   40|       |
   41|       |    // Initialize GfxState
   42|     19|    GfxState gfxState;
   43|       |
   44|       |    // Consume a random length string from fuzzed_data to fill GfxState
   45|     19|    std::string input_data = fuzzed_data.ConsumeRandomLengthString();
   46|     19|    size_t input_size = input_data.size();
   47|       |
   48|       |    // Validate the size of the input_data before proceeding
   49|     19|    if (input_size > 0) {
  ------------------
  |  Branch (49:9): [True: 19, False: 0]
  ------------------
   50|     19|        gfxState.setData(reinterpret_cast<const uint8_t*>(input_data.data()), input_size);
   51|       |
   52|       |        // Call the function under test
   53|     19|        SplashOutputDev splashOutputDev;
   54|     19|        splashOutputDev.doUpdateFont(&gfxState);
   55|     19|    }
   56|       |
   57|     19|    return 0;
   58|     19|}
_ZN8GfxStateC2Ev:
   11|     19|    GfxState() {
   12|       |        // Initialization code for GfxState
   13|       |        // Assuming we have some members to initialize
   14|     19|        memset(data, 0, sizeof(data)); // Example initialization
   15|     19|    }
_ZN8GfxState7setDataEPKhm:
   21|     19|    void setData(const uint8_t *input, size_t size) {
   22|       |        // Copy data from input to the member variable
   23|     19|        memcpy(data, input, std::min(size, sizeof(data)));
   24|     19|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   31|     19|    void doUpdateFont(GfxState *state) {
   32|       |        // Function implementation
   33|       |        // Here we might do something with state->data
   34|     19|    }

