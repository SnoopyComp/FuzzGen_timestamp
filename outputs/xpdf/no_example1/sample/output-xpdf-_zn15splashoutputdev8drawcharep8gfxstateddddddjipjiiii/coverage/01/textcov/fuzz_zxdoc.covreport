LLVMFuzzerTestOneInput:
   24|     49|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     49|    FuzzedDataProvider stream(data, size);
   26|       |
   27|       |    // Initialize GfxState pointer
   28|     49|    GfxState gfxState;
   29|       |
   30|       |    // Consume doubles
   31|     49|    double x1 = stream.ConsumeFloatingPoint<double>();
   32|     49|    double y1 = stream.ConsumeFloatingPoint<double>();
   33|     49|    double x2 = stream.ConsumeFloatingPoint<double>();
   34|     49|    double y2 = stream.ConsumeFloatingPoint<double>();
   35|     49|    double x3 = stream.ConsumeFloatingPoint<double>();
   36|     49|    double y3 = stream.ConsumeFloatingPoint<double>();
   37|       |
   38|       |    // Consume CharCode
   39|     49|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   40|       |
   41|       |    // Consume font size
   42|     49|    int fontSize = stream.ConsumeIntegral<int>();
   43|       |
   44|       |    // Consume Unicode data
   45|     49|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure non-zero size
   46|     49|    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeSize);
   47|       |    
   48|       |    // Convert string to Unicode vector
   49|     49|    std::vector<Unicode> unicodeData(unicodeString.begin(), unicodeString.end());
   50|       |
   51|       |    // Validate the size of the unicodeData vector
   52|     49|    if (unicodeData.size() != unicodeSize) {
  ------------------
  |  Branch (52:9): [True: 46, False: 3]
  ------------------
   53|     46|        return 0; // Exit if the size does not match
   54|     46|    }
   55|       |
   56|       |    // Consume GBool flags
   57|      3|    GBool flag1 = stream.ConsumeBool();
   58|      3|    GBool flag2 = stream.ConsumeBool();
   59|      3|    GBool flag3 = stream.ConsumeBool();
   60|       |
   61|       |    // Call the function under test
   62|      3|    SplashOutputDev splashOutputDev;
   63|      3|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, fontSize,
   64|      3|                             unicodeData.data(), static_cast<int>(unicodeData.size()), 
   65|      3|                             flag1, flag2, flag3);
   66|       |
   67|      3|    return 0;
   68|     49|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   19|      3|                  Unicode *unicode, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {
   20|       |        // Function implementation
   21|      3|    }

