{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <cstring>\\n#include <string>\\n\\n// Assume the necessary includes for GfxState, CharCode, Unicode, and GBool are available\\n// For the sake of this example, let's define some dummy types\\nclass GfxState {};\\nusing CharCode = uint32_t;\\nusing Unicode = uint32_t;\\nusing GBool = bool;\\n\\n// Dummy class definition for SplashOutputDev\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x1, double y1, double x2, double y2,\\n                  double x3, double y3, CharCode charCode, int fontSize,\\n                  Unicode *unicode, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer\\n    GfxState gfxState;\\n\\n    // Consume doubles\\n    double x1 = stream.ConsumeFloatingPoint<double>();\\n    double y1 = stream.ConsumeFloatingPoint<double>();\\n    double x2 = stream.ConsumeFloatingPoint<double>();\\n    double y2 = stream.ConsumeFloatingPoint<double>();\\n    double x3 = stream.ConsumeFloatingPoint<double>();\\n    double y3 = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n\\n    // Consume font size\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode data\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure non-zero size\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeSize);\\n    \\n    // Convert string to Unicode vector\\n    std::vector<Unicode> unicodeData(unicodeString.begin(), unicodeString.end());\\n\\n    // Validate the size of the unicodeData vector\\n    if (unicodeData.size() != unicodeSize) {\\n        return 0; // Exit if the size does not match\\n    }\\n\\n    // Consume GBool flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, fontSize,\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                             unicodeData.data(), static_cast<int>(unicodeData.size()), \\n                             flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstddef> // for size_t\\n#include <string>  // for std::string\\n\\n// Include standard libraries before project-specific libraries\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\"\\n\\n// Assuming GBool is defined in SplashOutputDev.h, so we do not need to include GBool.h\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize a GfxState object with assumed parameters\\n    double hDPI = 72.0; // Example DPI value\\n    double vDPI = 72.0; // Example DPI value\\n    PDFRectangle *pageBox = nullptr; // Assuming nullptr is acceptable\\n    int rotate = 0; // Example rotation\\n    GBool upsideDown = gFalse; // Example upside down value\\n    GfxState gfxState(hDPI, vDPI, pageBox, rotate, upsideDown);\\n\\n    // Consume doubles for the coordinates and other parameters\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume a CharCode value (assuming it can be represented as an integral)\\n    CharCode charCode = static_cast<CharCode>(stream.ConsumeIntegral<int>());\\n\\n    // Consume an integer value\\n    int intValue = stream.ConsumeIntegral<int>();\\n\\n    // Consume a Unicode string\\n    size_t unicode_length = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure non-null and reasonable length\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicode_length);\\n    Unicode* unicodePtr = reinterpret_cast<Unicode*>(const_cast<char*>(unicodeString.data()));\\n\\n    // Consume additional integer values\\n    int additionalInt1 = stream.ConsumeIntegral<int>();\\n    int additionalInt2 = stream.ConsumeIntegral<int>();\\n\\n    // Consume boolean values\\n    GBool boolParam1 = stream.ConsumeBool() ? 1 : 0; // Assuming GBool is an integer type\\n    GBool boolParam2 = stream.ConsumeBool() ? 1 : 0;\\n    GBool boolParam3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Initialize SplashOutputDev with assumed parameters\\n    SplashColorMode colorMode = splashModeRGB8; // Changed from splashModeRGB to splashModeRGB8\\n    int bitmapRowPad = 4; // Example bitmap row padding\\n    GBool reverseVideo = gFalse; // Example reverse video value\\n    SplashColorPtr paperColor = nullptr; // Assuming nullptr is acceptable\\n    GBool bitmapTopDown = gTrue; // Example bitmap top-down value\\n    GBool allowAntialias = gTrue; // Example antialiasing value\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intValue, unicodePtr, additionalInt1, boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}