{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming the necessary headers for OutputDev, GBool, and PDFDoc are included\\nclass OutputDev {};\\nusing GBool = bool;\\n\\nstruct DW_TAG_subroutine_typeInfinite {\\n    // Define the structure members as needed for your application\\n    int dummy; // Example member\\n};\\n\\nclass PDFDoc {\\npublic:\\n    static void displayPages(OutputDev *, int, int, double, double, int, GBool, GBool, GBool, DW_TAG_subroutine_typeInfinite *, void *);\\n};\\n\\nextern \"C\" void PDFDoc::displayPages(OutputDev *, int, int, double, double, int, GBool, GBool, GBool, DW_TAG_subroutine_typeInfinite *, void *) {\\n    // Implementation of the function\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) { // Added 'extern \"C\"' to ensure correct linkage\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for the function call\\n    OutputDev outputDev; // Assuming default constructor is available\\n    int param1 = fuzzed_data.ConsumeIntegral<int>();\\n    int param2 = fuzzed_data.ConsumeIntegral<int>();\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param4 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int param5 = fuzzed_data.ConsumeIntegral<int>();\\n    GBool param6 = fuzzed_data.ConsumeBool();\\n    GBool param7 = fuzzed_data.ConsumeBool();\\n    GBool param8 = fuzzed_data.ConsumeBool();\\n\\n    // Prepare the last two parameters\\n    DW_TAG_subroutine_typeInfinite* param9 = nullptr;\\n    std::string str_param9 = fuzzed_data.ConsumeRandomLengthString(16); // Example length, adjust as needed\\n    if (str_param9.size() >= sizeof(DW_TAG_subroutine_typeInfinite)) {\\n        param9 = reinterpret_cast<DW_TAG_subroutine_typeInfinite*>(const_cast<char*>(str_param9.data()));\\n    }\\n\\n    // Fixing the error by specifying the type for ConsumeRemainingBytes\\n    void* param10 = reinterpret_cast<void*>(fuzzed_data.ConsumeRemainingBytes<uint8_t>().data());\\n\\n    // Ensure param9 is not null before calling the function\\n    if (param9) {\\n        // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n        PDFDoc::displayPages(&outputDev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n    }\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <xpdf/PDFDoc.h> // Include the header for PDFDoc\\n#include \"/src/xpdf-4.05/goo/GString.h\" // Correct path for GString\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\" // Include Stream instead of BaseStream\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\" // Include GlobalParams for initialization\\n\\n// Assuming the necessary classes and types are defined somewhere\\nclass OutputDev {};\\nusing GBool = int; // Change to match the typedef in gtypes.h\\nstruct DW_TAG_subroutine_typeInfinite {};\\n\\n// Function under test\\n// Note: The declaration of displayPages should match the original declaration in PDFDoc.h\\nvoid displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool rotate, GBool crop, GBool print, GBool (*abortCheckCbk)(void *), void *userData) {\\n    // Function implementation\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    OutputDev outputDev; // Create an instance of OutputDev\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Example range for page numbers\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double x = stream.ConsumeFloatingPoint<double>(); // Consume a double for x\\n    double y = stream.ConsumeFloatingPoint<double>(); // Consume a double for y\\n    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Example zoom range\\n    GBool rotate = stream.ConsumeBool(); // Consume a boolean for rotate\\n    GBool crop = stream.ConsumeBool(); // Consume a boolean for crop\\n    GBool print = stream.ConsumeBool(); // Consume a boolean for print\\n\\n    // Create a subroutine type instance\\n    DW_TAG_subroutine_typeInfinite subroutineInstance;\\n    GBool (*abortCheckCbk)(void *) = nullptr; // Initialize abortCheckCbk to nullptr\\n    void *userData = nullptr; // Initialize userData to nullptr\\n\\n    // Initialize GlobalParams before using PDFDoc\\n    GlobalParams globalParams; // Create an instance of GlobalParams\\n    globalParams.setDefault(); // Set default values for global parameters\\n\\n    // Call the function under test\\n    // Create an instance of PDFDoc using a valid constructor\\n    GString fileName(\"dummy.pdf\"); // Create a dummy GString for the constructor\\n    PDFDoc pdfDoc(&fileName); // Create an instance of PDFDoc with the necessary argument\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, rotate, crop, print, abortCheckCbk, userData);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}