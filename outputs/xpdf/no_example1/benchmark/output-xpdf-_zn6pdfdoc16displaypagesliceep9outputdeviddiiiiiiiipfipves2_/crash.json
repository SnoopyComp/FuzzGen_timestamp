{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Use the actual path for PDFDoc\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include the header file where OutputDev is defined\\n#include <vector>\\n#include <string> // Include string for GString\\n\\n// Dummy abort check callback function\\nGBool abortCheckCallback(void *data) {\\n    return gFalse; // Always return false for fuzzing purposes\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for the function\\n    std::vector<uint8_t> output_dev_bytes = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(OutputDev));\\n    if (output_dev_bytes.size() != sizeof(OutputDev)) return 0; // Validate size\\n    OutputDev* output_dev = reinterpret_cast<OutputDev*>(output_dev_bytes.data());\\n\\n    int page_number = fuzzed_data.ConsumeIntegral<int>();\\n    double x1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int x2 = fuzzed_data.ConsumeIntegral<int>();\\n    GBool flag1 = static_cast<GBool>(fuzzed_data.ConsumeBool());\\n    GBool flag2 = static_cast<GBool>(fuzzed_data.ConsumeBool());\\n    GBool flag3 = static_cast<GBool>(fuzzed_data.ConsumeBool());\\n    int rotation = fuzzed_data.ConsumeIntegral<int>();\\n    int width = fuzzed_data.ConsumeIntegral<int>();\\n    int height = fuzzed_data.ConsumeIntegral<int>();\\n    int crop_x = fuzzed_data.ConsumeIntegral<int>();\\n    int crop_y = fuzzed_data.ConsumeIntegral<int>();\\n    \\n    // Define a dummy structure for fuzzing purposes\\n    struct DummyDW_TAG {\\n        // Add necessary members if needed for testing\\n        int dummy_member; // Ensure the struct has a size greater than 0\\n    };\\n    \\n    std::vector<uint8_t> infinite_loop_bytes = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(DummyDW_TAG));\\n    if (infinite_loop_bytes.size() != sizeof(DummyDW_TAG)) return 0; // Validate size\\n    DummyDW_TAG* infinite_loop = reinterpret_cast<DummyDW_TAG*>(infinite_loop_bytes.data());\\n    \\n    // Create a random length string for user_data\\n    std::string user_data_string = fuzzed_data.ConsumeRandomLengthString(16); // Example length\\n    void* user_data = static_cast<void*>(const_cast<char*>(user_data_string.c_str())); // Use data() to get pointer\\n\\n    // Create an instance of PDFDoc with a dummy filename for fuzzing\\n    GString dummyFileName(\"dummy.pdf\");\\n    PDFDoc pdf_doc(&dummyFileName); // Create an instance of PDFDoc with required constructor\\n\\n    // Call the function under test with the correct number of arguments\\n    pdf_doc.displayPageSlice(output_dev, page_number, x1, y1, x2, rotation, flag1, flag2, flag3, width, height, crop_x, crop_y, abortCheckCallback);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <string> // Include string for GString\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include the header for PDFDoc\\n\\nclass OutputDev {}; // Mock class for OutputDev\\nusing GBool = int; // Use int as defined in the original library\\nstruct DW_TAG_subroutine_typeInfiniteLoop {}; // Mock struct for DW_TAG_subroutine_typeInfiniteLoop\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    OutputDev outputDev; // Create an instance of OutputDev\\n    int pageNum = stream.ConsumeIntegral<int>(); // Page number\\n    double hDPI = stream.ConsumeFloatingPoint<double>(); // Horizontal DPI\\n    double vDPI = stream.ConsumeFloatingPoint<double>(); // Vertical DPI\\n    int rotation = stream.ConsumeIntegral<int>(); // Rotation\\n    GBool useMediaBox = stream.ConsumeBool(); // Use media box flag\\n    GBool crop = stream.ConsumeBool(); // Crop flag\\n    GBool isPrint = stream.ConsumeBool(); // Print flag\\n    int sliceX = stream.ConsumeIntegral<int>(); // Slice X\\n    int sliceY = stream.ConsumeIntegral<int>(); // Slice Y\\n    int sliceWidth = stream.ConsumeIntegral<int>(); // Slice Width\\n    int sliceHeight = stream.ConsumeIntegral<int>(); // Slice Height\\n\\n    // Create a mock DW_TAG_subroutine_typeInfiniteLoop instance\\n    DW_TAG_subroutine_typeInfiniteLoop loopTag;\\n\\n    // Create a GString instance for the PDFDoc constructor\\n    GString *fileNameA = new GString(\"dummy.pdf\"); // Dummy file name for testing\\n    PDFDoc pdfDoc(fileNameA); // Create an instance of PDFDoc with a valid constructor\\n\\n    // Call the function under test with the correct parameters\\n    pdfDoc.displayPageSlice(&outputDev, pageNum, hDPI, vDPI, rotation, useMediaBox, crop, isPrint, sliceX, sliceY, sliceWidth, sliceHeight, nullptr, nullptr);\\n\\n    delete fileNameA; // Clean up the GString instance\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}