_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   21|     12|void SplashOutputDev::drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {
   22|       |    // Implementation of drawChar (not provided in original code)
   23|     12|}
LLVMFuzzerTestOneInput:
   25|     57|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   26|     57|auto start_target = std::chrono::high_resolution_clock::now();
   27|     57|    FuzzedDataProvider stream(data, size);
   28|       |
   29|       |    // Initialize parameters
   30|     57|    GfxState gfxState; // Create an instance of GfxState
   31|     57|    double x = stream.ConsumeFloatingPoint<double>();
   32|     57|    double y = stream.ConsumeFloatingPoint<double>();
   33|     57|    double width = stream.ConsumeFloatingPoint<double>();
   34|     57|    double height = stream.ConsumeFloatingPoint<double>();
   35|     57|    double dx = stream.ConsumeFloatingPoint<double>();
   36|     57|    double dy = stream.ConsumeFloatingPoint<double>();
   37|       |    
   38|     57|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   39|     57|    int fontSize = stream.ConsumeIntegral<int>();
   40|       |    
   41|       |    // Prepare Unicode array using ConsumeRandomLengthString
   42|     57|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element
   43|     57|    std::string unicodeString = stream.ConsumeRandomLengthString();
   44|       |    
   45|       |    // Ensure the unicodeString size is sufficient for the unicodeSize
   46|     57|    if (unicodeString.size() < unicodeSize * sizeof(Unicode)) {
  ------------------
  |  Branch (46:9): [True: 45, False: 12]
  ------------------
   47|     45|        return 0; // Exit if the size is not as expected
   48|     45|    }
   49|       |
   50|       |    // Create Unicode array from the string
   51|     12|    std::vector<Unicode> unicodeArray(unicodeString.begin(), unicodeString.begin() + unicodeSize * sizeof(Unicode));
   52|       |    
   53|       |    // Ensure unicode size is consistent with the data consumed
   54|     12|    Unicode* unicodePtr = unicodeArray.data();
   55|       |    
   56|       |    // Consume boolean flags
   57|     12|    GBool flag1 = stream.ConsumeBool();
   58|     12|    GBool flag2 = stream.ConsumeBool();
   59|     12|    GBool flag3 = stream.ConsumeBool();
   60|       |
   61|       |    // Call the function under test
   62|     12|	auto start_func = std::chrono::high_resolution_clock::now();
   63|     12|    SplashOutputDev::drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodePtr, static_cast<int>(unicodeSize), flag1, flag2, flag3);
   64|     12|	auto end_func = std::chrono::high_resolution_clock::now();
   65|     12|auto end_target = std::chrono::high_resolution_clock::now();
   66|     12|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   67|       |
   68|     12|    return 0;
   69|     57|}

