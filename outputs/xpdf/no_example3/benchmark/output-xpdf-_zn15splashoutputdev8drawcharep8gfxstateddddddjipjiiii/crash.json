{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "61.19",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string> // Include string for std::string\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass GfxState {};\\nclass SplashOutputDev { // Define SplashOutputDev class\\npublic:\\n    static void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, uint32_t charCode, int fontSize, uint32_t *unicode, int unicodeSize, bool flag1, bool flag2, bool flag3);\\n};\\nusing CharCode = uint32_t; // Example definition\\nusing Unicode = uint32_t;   // Example definition\\nusing GBool = bool;         // Example definition\\n\\n// Function under test\\nvoid SplashOutputDev::drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {\\n    // Implementation of drawChar (not provided in original code)\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Create an instance of GfxState\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    \\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Prepare Unicode array using ConsumeRandomLengthString\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element\\n    std::string unicodeString = stream.ConsumeRandomLengthString();\\n    \\n    // Ensure the unicodeString size is sufficient for the unicodeSize\\n    if (unicodeString.size() < unicodeSize * sizeof(Unicode)) {\\n        return 0; // Exit if the size is not as expected\\n    }\\n\\n    // Create Unicode array from the string\\n    std::vector<Unicode> unicodeArray(unicodeString.begin(), unicodeString.begin() + unicodeSize * sizeof(Unicode));\\n    \\n    // Ensure unicode size is consistent with the data consumed\\n    Unicode* unicodePtr = unicodeArray.data();\\n    \\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    SplashOutputDev::drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodePtr, static_cast<int>(unicodeSize), flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <string>\\n#include <cstdint> // Include for uint32_t\\n\\n// Assuming the necessary types are defined somewhere\\nclass GfxState {};\\nusing CharCode = uint32_t; // Assuming CharCode is a 32-bit unsigned integer\\nusing Unicode = uint32_t;   // Assuming Unicode is also a 32-bit unsigned integer\\nusing GBool = int;          // Assuming GBool is an integer type (0 or 1)\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height, \\n                  double x_offset, double y_offset, CharCode char_code, int font_size, \\n                  Unicode *unicode_array, int unicode_count, GBool flag1, \\n                  GBool flag2, GBool flag3) {\\n        // Implementation of drawChar (omitted for brevity)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfx_state;\\n\\n    // Consume double values for x, y, width, height, x_offset, y_offset\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double x_offset = stream.ConsumeFloatingPoint<double>();\\n    double y_offset = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and font size\\n    CharCode char_code = stream.ConsumeIntegral<CharCode>();\\n    int font_size = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode array using ConsumeRandomLengthString\\n    size_t unicode_count = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode\\n    std::string unicode_string = stream.ConsumeRandomLengthString(unicode_count * sizeof(Unicode));\\n    \\n    // Ensure the size of the string is correct\\n    if (unicode_string.size() != unicode_count * sizeof(Unicode)) {\\n        return 0; // Invalid size, do not proceed\\n    }\\n\\n    // Convert the string data to a vector of Unicode\\n    std::vector<Unicode> unicode_array(reinterpret_cast<Unicode*>(unicode_string.data()), \\n                                       reinterpret_cast<Unicode*>(unicode_string.data()) + unicode_count);\\n\\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool() ? 1 : 0;\\n    GBool flag2 = stream.ConsumeBool() ? 1 : 0;\\n    GBool flag3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Call the function under test\\n    SplashOutputDev splash_output_dev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splash_output_dev.drawChar(&gfx_state, x, y, width, height, x_offset, y_offset, \\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                                char_code, font_size, unicode_array.data(), \\n                                static_cast<int>(unicode_array.size()), \\n                                flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}