{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Assuming PDFDoc is defined in this header\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Assuming OutputDev is defined in this header\\n#include \"/src/xpdf-4.05/goo/gmem.h\" // Including gmem.h for GBool type\\n#include \"/src/xpdf-4.05/xpdf/Annot.h\" // Assuming Annot.h defines the required type for displayPages\\n#include \"/src/xpdf-4.05/goo/GString.h\" // Including GString for PDFDoc constructor\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\" // Include GlobalParams if needed for initialization\\n\\n// A concrete implementation of OutputDev to avoid abstract class error\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    // Implementing pure virtual functions\\n    virtual GBool upsideDown() override { return gFalse; }\\n    virtual GBool useDrawChar() override { return gFalse; }\\n    virtual GBool interpretType3Chars() override { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    \\n    // Create an OutputDev object using the concrete implementation\\n    MyOutputDev output_dev;\\n\\n    // Consume parameters for the function\\n    int param1 = fuzzed_data.ConsumeIntegral<int>();\\n    int param2 = fuzzed_data.ConsumeIntegral<int>();\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param4 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int param5 = fuzzed_data.ConsumeIntegral<int>();\\n    GBool param6 = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // Assuming gTrue and gFalse are valid GBool values\\n    GBool param7 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n    GBool param8 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Create a GString for PDFDoc constructor\\n    std::string random_string = fuzzed_data.ConsumeRandomLengthString(100);\\n    GString *fileName = new GString(random_string.c_str());\\n\\n    // Initialize GlobalParams (this is crucial to avoid runtime errors)\\n    GlobalParams::setGlobalParams();\\n\\n    // Call the function under test\\n    PDFDoc pdf_doc(fileName); // Using the GString constructor\\n\\n    // Ensure that the parameters are within a reasonable range\\n    // This is a basic check, you may want to adjust the ranges based on your application logic\\n    if (param1 < 0) param1 = 0;\\n    if (param2 < 0) param2 = 0;\\n    if (param5 < 0) param5 = 0;\\n\\n    // Call displayPages with the parameters\\n    pdf_doc.displayPages(&output_dev, param1, param2, param3, param4, param5, param6, param7, param8, nullptr, nullptr);\\n\\n    // Clean up\\n    delete fileName;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include the header file where PDFDoc is defined\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include the header file for OutputDev\\n#include \"/src/xpdf-4.05/goo/gmem.h\" // Include the header file for GBool\\n#include \"/src/xpdf-4.05/xpdf/Annot.h\" // Include an alternative header file for DW_TAG_subroutine_type\\n\\n// Define the abort check callback function outside of LLVMFuzzerTestOneInput\\nGBool abortCheckCallback(void* data) {\\n    return gFalse; // Always return gFalse for this example\\n}\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Prepare parameters for the function call\\n    std::vector<uint8_t> outputDevData = stream.ConsumeBytes<uint8_t>(sizeof(OutputDev));\\n    if (outputDevData.size() != sizeof(OutputDev)) {\\n        return 0; // Not enough data, exit the function\\n    }\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(outputDevData.data());\\n\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming page numbers are between 1 and 100\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double zoom = stream.ConsumeFloatingPoint<double>(); // Zoom level\\n    double rotation = stream.ConsumeFloatingPoint<double>(); // Rotation angle\\n    int flags = stream.ConsumeIntegral<int>(); // Flags as an integer\\n    GBool flag1 = stream.ConsumeBool() ? gTrue : gFalse; // Convert to GBool\\n    GBool flag2 = stream.ConsumeBool() ? gTrue : gFalse; // Convert to GBool\\n    GBool flag3 = stream.ConsumeBool() ? gTrue : gFalse; // Convert to GBool\\n\\n    // Create a valid PDFDoc object with a dummy file name\\n    GString fileNameA(\"dummy.pdf\");\\n    PDFDoc doc(&fileNameA); // Initialize PDFDoc with a valid GString\\n\\n    // Removed the DW_TAG_subroutine_typeInfinite loop and replaced it with a char buffer\\n    std::string loopData = stream.ConsumeRandomLengthString(); // Use ConsumeRandomLengthString for loop data\\n    if (loopData.empty()) {\\n        return 0; // Not enough data, exit the function\\n    }\\n    // Assuming loop can be represented as a string or char buffer\\n    void* loop = reinterpret_cast<void*>(const_cast<char*>(loopData.data())); // Cast to void*\\n\\n    // Correctly handle userData as a pointer to the remaining bytes\\n    std::vector<uint8_t> userDataVec = stream.ConsumeRemainingBytes<uint8_t>();\\n    void* userData = userDataVec.empty() ? nullptr : userDataVec.data(); // User data pointer, handle empty case\\n\\n    // Call the function under test\\n    doc.displayPages(outputDev, pageStart, pageEnd, zoom, rotation, flags, flag1, flag2, flag3, loop, userData, abortCheckCallback, nullptr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}