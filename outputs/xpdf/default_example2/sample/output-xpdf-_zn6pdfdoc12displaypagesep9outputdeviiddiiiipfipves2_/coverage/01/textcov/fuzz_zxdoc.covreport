_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbP34DW_TAG_subroutine_typeInfiniteLoopPv:
   22|     31|void PDFDoc::displayPages(OutputDev *, int, int, double, double, int, GBool, GBool, GBool, DW_TAG_subroutine_typeInfiniteLoop *, void *) {
   23|       |    // Implementation of displayPages (not shown here)
   24|     31|}
LLVMFuzzerTestOneInput:
   26|     31|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   27|     31|auto start_target = std::chrono::high_resolution_clock::now();
   28|     31|    FuzzedDataProvider fuzzed_data(data, size);
   29|       |    
   30|       |    // Create an OutputDev object
   31|     31|    OutputDev output_dev;
   32|       |
   33|       |    // Consume integers and doubles
   34|     31|    int page_start = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Assuming 1 to 100 pages
   35|     31|    int page_end = fuzzed_data.ConsumeIntegralInRange<int>(page_start, 100); // Ensure page_end is >= page_start
   36|     31|    double x = fuzzed_data.ConsumeFloatingPoint<double>();
   37|     31|    double y = fuzzed_data.ConsumeFloatingPoint<double>();
   38|     31|    int some_int = fuzzed_data.ConsumeIntegral<int>();
   39|       |    
   40|       |    // Consume GBool values
   41|     31|    GBool bool1 = fuzzed_data.ConsumeBool();
   42|     31|    GBool bool2 = fuzzed_data.ConsumeBool();
   43|     31|    GBool bool3 = fuzzed_data.ConsumeBool();
   44|       |
   45|       |    // Create a DW_TAG_subroutine_typeInfiniteLoop object
   46|     31|    DW_TAG_subroutine_typeInfiniteLoop infinite_loop;
   47|       |
   48|       |    // Consume a random length string and allocate memory for it
   49|     31|    std::string random_string = fuzzed_data.ConsumeRandomLengthString(100); // Limit to 100 characters for this example
   50|     31|    void* ptr = nullptr;
   51|     31|    if (!random_string.empty()) {
  ------------------
  |  Branch (51:9): [True: 20, False: 11]
  ------------------
   52|     20|        ptr = malloc(random_string.size());
   53|     20|        if (ptr) {
  ------------------
  |  Branch (53:13): [True: 20, False: 0]
  ------------------
   54|     20|            std::memcpy(ptr, random_string.data(), random_string.size());
   55|     20|        }
   56|     20|    }
   57|       |
   58|       |    // Call the function under test
   59|     31|    PDFDoc pdf_doc;
   60|     31|	auto start_func = std::chrono::high_resolution_clock::now();
   61|     31|    pdf_doc.displayPages(&output_dev, page_start, page_end, x, y, some_int, bool1, bool2, bool3, &infinite_loop, ptr);
   62|     31|	auto end_func = std::chrono::high_resolution_clock::now();
   63|       |
   64|       |    // Free allocated memory
   65|     31|    if (ptr) {
  ------------------
  |  Branch (65:9): [True: 20, False: 11]
  ------------------
   66|     20|        free(ptr);
   67|     20|    }
   68|     31|auto end_target = std::chrono::high_resolution_clock::now();
   69|     31|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   70|       |
   71|     31|    return 0;
   72|     31|}

