_ZN3Gfx14opSetExtGStateEP6Objecti:
   21|      4|    void opSetExtGState(Object *obj, int state) {
   22|       |        // Function implementation...
   23|      4|    }
LLVMFuzzerTestOneInput:
   26|      4|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   27|      4|auto start_target = std::chrono::high_resolution_clock::now();
   28|       |    // Create a FuzzedDataProvider instance
   29|      4|    FuzzedDataProvider fuzzed_data(data, size);
   30|       |
   31|       |    // Create an instance of Object, ensuring it's not NULL
   32|      4|    Object obj;
   33|       |
   34|       |    // Consume an integer value from the fuzz input
   35|      4|    int state = fuzzed_data.ConsumeIntegral<int>();
   36|       |
   37|       |    // Optionally, we can also consume a boolean or other types to modify the state
   38|       |    // For example, let's assume we want to introduce randomness or variation in the state
   39|      4|    if (fuzzed_data.ConsumeBool()) {
  ------------------
  |  Branch (39:9): [True: 2, False: 2]
  ------------------
   40|      2|        state = rand() % 100; // Random state between 0 and 99
   41|      2|    }
   42|       |
   43|       |    // Call the function under test
   44|      4|	auto start_func = std::chrono::high_resolution_clock::now();
   45|      4|    Gfx::opSetExtGState(&obj, state);
   46|      4|	auto end_func = std::chrono::high_resolution_clock::now();
   47|      4|auto end_target = std::chrono::high_resolution_clock::now();
   48|      4|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   49|       |
   50|      4|    return 0;
   51|      4|}
_ZN6ObjectC2Ev:
   14|      4|    Object() {
   15|       |        // Initialize the Object instance as needed
   16|      4|    }

