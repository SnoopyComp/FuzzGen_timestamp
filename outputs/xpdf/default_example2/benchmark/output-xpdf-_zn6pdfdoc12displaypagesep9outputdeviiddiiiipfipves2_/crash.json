{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "61.90",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <cstdlib>  // For std::malloc and std::free\\n#include <cstring>  // For std::memcpy\\n\\n// Assuming the following types are defined somewhere in the codebase\\nclass OutputDev {};\\nusing GBool = bool;\\nstruct DW_TAG_subroutine_typeInfiniteLoop {};\\n\\n// Forward declaration of PDFDoc class\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *, int, int, double, double, int, GBool, GBool, GBool, DW_TAG_subroutine_typeInfiniteLoop *, void *);\\n};\\n\\nvoid PDFDoc::displayPages(OutputDev *, int, int, double, double, int, GBool, GBool, GBool, DW_TAG_subroutine_typeInfiniteLoop *, void *) {\\n    // Implementation of displayPages (not shown here)\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    \\n    // Create an OutputDev object\\n    OutputDev output_dev;\\n\\n    // Consume integers and doubles\\n    int page_start = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Assuming 1 to 100 pages\\n    int page_end = fuzzed_data.ConsumeIntegralInRange<int>(page_start, 100); // Ensure page_end is >= page_start\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int some_int = fuzzed_data.ConsumeIntegral<int>();\\n    \\n    // Consume GBool values\\n    GBool bool1 = fuzzed_data.ConsumeBool();\\n    GBool bool2 = fuzzed_data.ConsumeBool();\\n    GBool bool3 = fuzzed_data.ConsumeBool();\\n\\n    // Create a DW_TAG_subroutine_typeInfiniteLoop object\\n    DW_TAG_subroutine_typeInfiniteLoop infinite_loop;\\n\\n    // Consume a random length string and allocate memory for it\\n    std::string random_string = fuzzed_data.ConsumeRandomLengthString(100); // Limit to 100 characters for this example\\n    void* ptr = nullptr;\\n    if (!random_string.empty()) {\\n        ptr = malloc(random_string.size());\\n        if (ptr) {\\n            std::memcpy(ptr, random_string.data(), random_string.size());\\n        }\\n    }\\n\\n    // Call the function under test\\n    PDFDoc pdf_doc;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdf_doc.displayPages(&output_dev, page_start, page_end, x, y, some_int, bool1, bool2, bool3, &infinite_loop, ptr);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n\\n    // Free allocated memory\\n    if (ptr) {\\n        free(ptr);\\n    }\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <vector>\\n#include <iostream> // Include for standard I/O\\n#include \"PDFDoc.h\" // Include the header file where PDFDoc is defined\\n#include \"GString.h\" // Include the header file where GString is defined\\n#include <cstring> // For memcpy\\n#include <cstdlib> // For malloc and free\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass OutputDev {};\\nusing GBool = int; // Use the same type as defined in gtypes.h\\nusing DW_TAG_subroutine_typeInfinite_loop = int; // Placeholder for the actual type\\n\\n// Function under test\\n// Ensure the signature matches the one in PDFDoc.h\\n// void PDFDoc::displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double zoom, double rotation, int flags, GBool isPrint, GBool isDisplay, GBool isEmbed, GBool (*abortCheckCbk)(void *), void *userData);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for the function call\\n    OutputDev outputDev; // Assuming default constructor is available\\n    int pageStart = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Example range for page numbers\\n    int pageEnd = fuzzed_data.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double zoom = fuzzed_data.ConsumeFloatingPoint<double>(); // Zoom factor\\n    double rotation = fuzzed_data.ConsumeFloatingPoint<double>(); // Rotation angle\\n    int flags = fuzzed_data.ConsumeIntegral<int>(); // Flags\\n    GBool isPrint = fuzzed_data.ConsumeBool(); // Print flag\\n    GBool isDisplay = fuzzed_data.ConsumeBool(); // Display flag\\n    GBool isEmbed = fuzzed_data.ConsumeBool(); // Embed flag\\n\\n    // Allocate memory for userData to ensure it remains valid\\n    size_t remainingBytes = fuzzed_data.remaining_bytes();\\n    void *userData = nullptr;\\n    if (remainingBytes > 0) {\\n        userData = malloc(remainingBytes); // Allocate memory\\n        if (userData) {\\n            memcpy(userData, fuzzed_data.ConsumeRemainingBytes<uint8_t>().data(), remainingBytes); // Copy remaining bytes for user data\\n        } else {\\n            return 0; // If malloc fails, exit early\\n        }\\n    }\\n\\n    // Initialize PDFDoc with a dummy file name (assuming GString is defined)\\n    GString dummyFileName(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&dummyFileName); // Assuming we have an instance of PDFDoc\\n\\n    // Call the function under test\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoom, rotation, flags, isPrint, isDisplay, isEmbed, nullptr, userData); // Pass nullptr for abortCheckCbk\\n\\n    // Free the allocated memory for userData if it was allocated\\n    if (userData) {\\n        free(userData);\\n    }\\n\\n    return 0; // Indicate that the fuzzing input was processed\\n}",
        "model": ""
    }

    ]
}