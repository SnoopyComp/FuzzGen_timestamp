{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <string> // For std::string\\n#include <iostream> // For std::cout, if needed for debugging\\n\\n// Include the necessary project-specific headers\\n#include \"/src/xpdf-4.05/xpdf/Ref.h\" // Include Ref.h for Ref type\\n#include \"/src/xpdf-4.05/xpdf/Object.h\" // Include Object.h for Object type\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\" // Include Dict.h for Dict type\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\" // Include Stream.h for Stream type\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharTypes.h\" // Assuming this header defines CharCode\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\" // Replaced Unicode.h with UnicodeMap.h\\n\\n// Assuming gTrue and gFalse are defined somewhere in the included headers\\n// If not, define them as follows:\\n#include \"../goo/gtypes.h\" // Include gtypes.h to avoid macro conflicts\\nconst GBool gTrue = 1;  // or the appropriate value for true\\nconst GBool gFalse = 0; // or the appropriate value for false\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Prepare parameters for the function call\\n    std::vector<uint8_t> gfxStateBytes = stream.ConsumeBytes<uint8_t>(sizeof(GfxState));\\n    if (gfxStateBytes.size() != sizeof(GfxState)) return 0; // Validate size\\n    GfxState* gfxState = reinterpret_cast<GfxState*>(gfxStateBytes.data());\\n\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    \\n    // Consume CharCode\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n\\n    // Consume integer parameters\\n    int intParam = stream.ConsumeIntegral<int>();\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode pointer\\n    std::vector<uint8_t> unicodeBytes = stream.ConsumeBytes<uint8_t>(sizeof(Unicode)); // Assuming Unicode is defined in UnicodeMap.h\\n    if (unicodeBytes.size() != sizeof(Unicode)) return 0; // Validate size\\n    Unicode* unicodePtr = reinterpret_cast<Unicode*>(unicodeBytes.data());\\n\\n    // Consume boolean parameters\\n    GBool boolParam1 = stream.ConsumeBool() ? gTrue : gFalse;\\n    GBool boolParam2 = stream.ConsumeBool() ? gTrue : gFalse;\\n    GBool boolParam3 = stream.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev; // Ensure SplashOutputDev has a default constructor\\n    splashOutputDev.drawChar(gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string> // Include string for ConsumeRandomLengthString\\n\\n// Assuming the following types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition\\nusing Unicode = uint32_t; // Example definition\\nusing GBool = bool; // Example definition\\n\\n// Forward declaration of SplashOutputDev class\\nclass SplashOutputDev {\\npublic:\\n    static void drawChar(GfxState *gfxState, double x, double y, double width, double height,\\n                         double ascent, double descent, CharCode charCode, int fontSize,\\n                         Unicode *unicode, int unicodeSize, GBool flag1, GBool flag2, GBool flag3);\\n};\\n\\n// Function signature to be fuzzed\\nvoid SplashOutputDev::drawChar(GfxState *gfxState, double x, double y, double width, double height,\\n                                double ascent, double descent, CharCode charCode, int fontSize,\\n                                Unicode *unicode, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {\\n    // Implementation of drawChar (not provided in the original code)\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Prepare GfxState\\n    GfxState gfxState;\\n\\n    // Consume double values\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double ascent = stream.ConsumeFloatingPoint<double>();\\n    double descent = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and font size\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Prepare Unicode array using ConsumeRandomLengthString\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeSize * sizeof(Unicode));\\n    std::vector<Unicode> unicodeArray(unicodeSize);\\n    if (unicodeString.size() == unicodeSize * sizeof(Unicode)) {\\n        std::memcpy(unicodeArray.data(), unicodeString.data(), unicodeString.size());\\n    } else {\\n        return 0; // If size does not match, exit the function\\n    }\\n    Unicode *unicodePtr = unicodeArray.data();\\n\\n    // Consume GBool flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    SplashOutputDev::drawChar(&gfxState, x, y, width, height, ascent, descent,\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                               charCode, fontSize, unicodePtr, static_cast<int>(unicodeSize),\\n                               flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}