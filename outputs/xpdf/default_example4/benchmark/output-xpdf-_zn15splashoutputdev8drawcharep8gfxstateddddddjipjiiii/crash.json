{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "59.06",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <cstring>\\n\\n// Assuming the necessary types and classes are defined somewhere\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, actual type may vary\\nusing Unicode = uint32_t;   // Example definition, actual type may vary\\nusing GBool = bool;         // Example definition, actual type may vary\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Implementation here\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Ensure this is not null\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Unicode pointer\\n    std::vector<Unicode> unicodeVec;\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure non-zero size\\n    for (size_t i = 0; i < unicodeSize; ++i) {\\n        unicodeVec.push_back(stream.ConsumeIntegral<Unicode>());\\n    }\\n    Unicode* unicodePtr = unicodeVec.data(); // This will not be null as unicodeSize is at least 1\\n\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include <cstring> // Include for std::memcpy\\n\\n// Assume GfxState, CharCode, Unicode, and GBool are defined elsewhere in the codebase.\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition; replace with actual type.\\nusing Unicode = uint32_t;   // Example definition; replace with actual type.\\nusing GBool = bool;         // Example definition; replace with actual type.\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *gfxState, double x, double y, double width, double height,\\n                  double ascent, double descent, CharCode charCode, int fontSize,\\n                  Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation...\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Consume double values for x, y, width, height, ascent, descent\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double ascent = stream.ConsumeFloatingPoint<double>();\\n    double descent = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and font size\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode array\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 Unicode\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));\\n    \\n    // Validate the size of the consumed string\\n    if (unicodeString.size() != unicodeCount * sizeof(Unicode)) {\\n        return 0; // Skip this iteration if the size is not as expected\\n    }\\n\\n    std::vector<Unicode> unicodeArray(reinterpret_cast<Unicode*>(const_cast<char*>(unicodeString.data())), \\n                                       reinterpret_cast<Unicode*>(const_cast<char*>(unicodeString.data())) + unicodeCount);\\n    Unicode *unicodePtr = unicodeArray.data();\\n\\n    // Consume GBool flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, ascent, descent,\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                              charCode, fontSize, unicodePtr, static_cast<int>(unicodeCount),\\n                              flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}