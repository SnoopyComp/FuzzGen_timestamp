LLVMFuzzerTestOneInput:
   32|     18|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   33|     18|auto start_target = std::chrono::high_resolution_clock::now();
   34|     18|    FuzzedDataProvider fuzzed_data(data, size);
   35|       |
   36|       |    // Create an instance of GfxState
   37|     18|    GfxState gfxState;
   38|       |
   39|       |    // Initialize GfxState with fuzzed data
   40|     18|    if (size > 0) {
  ------------------
  |  Branch (40:9): [True: 18, False: 0]
  ------------------
   41|       |        // Use ConsumeRandomLengthString to get a string of random length
   42|     18|        std::string random_string = fuzzed_data.ConsumeRandomLengthString();
   43|     18|        const uint8_t* byte_data = reinterpret_cast<const uint8_t*>(random_string.data());
   44|     18|        size_t random_size = random_string.size();
   45|       |
   46|       |        // Validate the size before proceeding
   47|     18|        if (random_size > 0) {
  ------------------
  |  Branch (47:13): [True: 18, False: 0]
  ------------------
   48|     18|            gfxState.initializeFromBytes(byte_data, random_size);
   49|     18|        }
   50|     18|    }
   51|       |
   52|       |    // Create an instance of SplashOutputDev
   53|     18|    SplashOutputDev splashOutputDev;
   54|       |
   55|       |    // Call the function to fuzz
   56|     18|	auto start_func = std::chrono::high_resolution_clock::now();
   57|     18|    splashOutputDev.doUpdateFont(&gfxState);
   58|     18|	auto end_func = std::chrono::high_resolution_clock::now();
   59|     18|auto end_target = std::chrono::high_resolution_clock::now();
   60|     18|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   61|       |
   62|     18|    return 0;
   63|     18|}
_ZN8GfxStateC2Ev:
   14|     18|    GfxState() {
   15|       |        // Initialize the GfxState object
   16|     18|    }
_ZN8GfxState19initializeFromBytesEPKhm:
   19|     18|    void initializeFromBytes(const uint8_t* data, size_t size) {
   20|       |        // Example implementation that uses the data to initialize the state
   21|       |        // This is just a placeholder for actual initialization logic
   22|     18|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   27|     18|    void doUpdateFont(GfxState *gfxState) {
   28|       |        // Implementation of the function
   29|     18|    }

