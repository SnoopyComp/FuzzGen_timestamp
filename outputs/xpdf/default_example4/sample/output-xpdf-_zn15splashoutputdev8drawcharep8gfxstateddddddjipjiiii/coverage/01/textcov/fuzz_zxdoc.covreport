LLVMFuzzerTestOneInput:
   23|     45|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|     45|auto start_target = std::chrono::high_resolution_clock::now();
   25|     45|    FuzzedDataProvider stream(data, size);
   26|       |
   27|       |    // Initialize parameters
   28|     45|    GfxState gfxState; // Ensure this is not null
   29|     45|    double param1 = stream.ConsumeFloatingPoint<double>();
   30|     45|    double param2 = stream.ConsumeFloatingPoint<double>();
   31|     45|    double param3 = stream.ConsumeFloatingPoint<double>();
   32|     45|    double param4 = stream.ConsumeFloatingPoint<double>();
   33|     45|    double param5 = stream.ConsumeFloatingPoint<double>();
   34|     45|    double param6 = stream.ConsumeFloatingPoint<double>();
   35|     45|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   36|     45|    int intParam = stream.ConsumeIntegral<int>();
   37|       |    
   38|       |    // Unicode pointer
   39|     45|    std::vector<Unicode> unicodeVec;
   40|     45|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure non-zero size
   41|    116|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (41:24): [True: 71, False: 45]
  ------------------
   42|     71|        unicodeVec.push_back(stream.ConsumeIntegral<Unicode>());
   43|     71|    }
   44|     45|    Unicode* unicodePtr = unicodeVec.data(); // This will not be null as unicodeSize is at least 1
   45|       |
   46|     45|    int intParam2 = stream.ConsumeIntegral<int>();
   47|     45|    GBool boolParam1 = stream.ConsumeBool();
   48|     45|    GBool boolParam2 = stream.ConsumeBool();
   49|     45|    GBool boolParam3 = stream.ConsumeBool();
   50|       |
   51|       |    // Call the function under test
   52|     45|    SplashOutputDev splashOutputDev;
   53|     45|	auto start_func = std::chrono::high_resolution_clock::now();
   54|     45|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);
   55|     45|	auto end_func = std::chrono::high_resolution_clock::now();
   56|     45|auto end_target = std::chrono::high_resolution_clock::now();
   57|     45|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   58|       |
   59|     45|    return 0;
   60|     45|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   18|     45|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   19|       |        // Implementation here
   20|     45|    }

