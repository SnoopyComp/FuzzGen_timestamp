LLVMFuzzerTestOneInput:
   23|     29|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|     29|auto start_target = std::chrono::high_resolution_clock::now();
   25|     29|    FuzzedDataProvider stream(data, size);
   26|       |
   27|       |    // Create an instance of OutputDev
   28|     29|    OutputDev outputDev;
   29|       |
   30|       |    // Consume data for the parameters
   31|     29|    int pageIndex = stream.ConsumeIntegral<int>();
   32|     29|    double x1 = stream.ConsumeFloatingPoint<double>();
   33|     29|    double y1 = stream.ConsumeFloatingPoint<double>();
   34|     29|    int width = stream.ConsumeIntegral<int>();
   35|     29|    GBool isPrint = stream.ConsumeBool();
   36|     29|    GBool isView = stream.ConsumeBool();
   37|     29|    GBool isThumbnail = stream.ConsumeBool();
   38|     29|    int rotation = stream.ConsumeIntegral<int>();
   39|     29|    int pageCount = stream.ConsumeIntegral<int>();
   40|     29|    int totalPages = stream.ConsumeIntegral<int>();
   41|     29|    int flags = stream.ConsumeIntegral<int>();
   42|       |
   43|       |    // Create a loop variable (assuming it's a pointer type)
   44|     29|    DW_TAG_subroutine_typeInfinite *loopVariablePtr = (DW_TAG_subroutine_typeInfinite*) std::malloc(sizeof(DW_TAG_subroutine_typeInfinite));
   45|     29|    *loopVariablePtr = stream.ConsumeIntegral<DW_TAG_subroutine_typeInfinite>(); // Fill it with some data
   46|       |
   47|       |    // Create user data (as a void pointer)
   48|     29|    std::vector<std::byte> userDataVec = stream.ConsumeRemainingBytes<std::byte>(); // Consume remaining bytes as a vector
   49|     29|    void *userData = userDataVec.data(); // Get the pointer to the underlying data
   50|       |
   51|       |    // Call the function under test
   52|     29|    PDFDoc pdfDoc;
   53|     29|	auto start_func = std::chrono::high_resolution_clock::now();
   54|     29|    pdfDoc.displayPageSlice(&outputDev, pageIndex, x1, y1, width, isPrint, isView, isThumbnail, rotation, pageCount, totalPages, flags, loopVariablePtr, userData);
   55|     29|	auto end_func = std::chrono::high_resolution_clock::now();
   56|       |
   57|     29|    std::free(loopVariablePtr); // Free allocated memory
   58|     29|auto end_target = std::chrono::high_resolution_clock::now();
   59|     29|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   60|       |
   61|     29|    return 0;
   62|     29|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddibbbiiiiPiPv:
   17|     29|    void displayPageSlice(OutputDev *outputDev, int pageIndex, double x1, double y1, int width, GBool isPrint, GBool isView, GBool isThumbnail, int rotation, int pageCount, int totalPages, int flags, DW_TAG_subroutine_typeInfinite *loop, void *userData) {
   18|       |        // Function implementation (not shown)
   19|     29|    }

