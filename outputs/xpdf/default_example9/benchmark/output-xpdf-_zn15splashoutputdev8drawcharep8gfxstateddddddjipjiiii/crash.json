{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "48.78",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined somewhere in the codebase\\nclass GfxState {}; // Placeholder definition\\nusing CharCode = int; // Placeholder definition\\nusing Unicode = char; // Placeholder definition\\nusing GBool = bool; // Placeholder definition\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height, double ascent, double descent,\\n                  CharCode charCode, int fontSize, Unicode *unicode, int unicodeLength, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation goes here\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    GfxState gfxState; // Must not be NULL\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double ascent = stream.ConsumeFloatingPoint<double>();\\n    double descent = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Prepare Unicode array\\n    size_t unicodeLength = stream.ConsumeIntegralInRange<size_t>(1, 256); // Ensure non-zero length\\n    std::vector<Unicode> unicodeData = stream.ConsumeBytes<Unicode>(unicodeLength);\\n    \\n    // Ensure unicodeData is not empty\\n    Unicode *unicodePtr = unicodeData.data(); // Will not be NULL if unicodeLength > 0\\n\\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, ascent, descent, charCode, fontSize, unicodePtr, static_cast<int>(unicodeLength), flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint> // Include for uint32_t\\n#include <cstring> // Include for std::memcpy\\n\\n// Assuming the following types are defined somewhere in the codebase\\nclass GfxState {\\npublic:\\n    GfxState() {\\n        // Constructor implementation (if necessary)\\n    }\\n    // Other member functions and variables\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double xscale, double yscale, uint32_t charCode, int fontSize,\\n                  uint32_t *unicodeArray, int unicodeCount, int flag1,\\n                  int flag2, int flag3) {\\n        // Function implementation (if necessary)\\n    }\\n};\\n\\nusing CharCode = uint32_t; // Assuming CharCode is a 32-bit unsigned integer\\nusing Unicode = uint32_t; // Assuming Unicode is a 32-bit unsigned integer\\nusing GBool = int; // Assuming GBool is an integer type\\n\\n// The function under test\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer (not NULL)\\n    GfxState *gfxState = new GfxState(); // Assuming GfxState has a default constructor\\n\\n    // Consume doubles for coordinates and sizes\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double xscale = stream.ConsumeFloatingPoint<double>();\\n    double yscale = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and font size\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode array length\\n    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 100); // Ensure at least 1 Unicode character\\n    std::vector<Unicode> unicodeArray;\\n\\n    // Use ConsumeRandomLengthString to get Unicode data\\n    // Ensure we have enough bytes for the unicodeCount\\n    std::string unicodeData = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));\\n    if (unicodeData.size() != unicodeCount * sizeof(Unicode)) {\\n        delete gfxState; // Clean up before returning\\n        return 0; // Exit if the size does not match\\n    }\\n\\n    unicodeArray.resize(unicodeCount);\\n    std::memcpy(unicodeArray.data(), unicodeData.data(), unicodeCount * sizeof(Unicode));\\n\\n    // Consume flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(gfxState, x, y, width, height, xscale, yscale, charCode, fontSize,\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                              unicodeArray.data(), unicodeCount, flag1, flag2, flag3);\\n\\n    // Clean up\\n    delete gfxState;\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}