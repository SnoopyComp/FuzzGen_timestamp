_ZN3Gfx14opSetExtGStateEP6Objecti:
   23|      3|    void opSetExtGState(Object *obj, int state) {
   24|       |        // Function implementation
   25|       |        // Example implementation that uses the state parameter
   26|      3|        obj->setProperty(state); // Use the state to modify the object
   27|      3|    }
LLVMFuzzerTestOneInput:
   30|      3|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   31|      3|auto start_target = std::chrono::high_resolution_clock::now();
   32|       |    // Create a FuzzedDataProvider instance
   33|      3|    FuzzedDataProvider fuzzed_data(data, size);
   34|       |    
   35|       |    // Initialize an Object pointer
   36|      3|    Object obj; // Create an instance of Object
   37|      3|    Object *obj_ptr = &obj; // Get a pointer to the Object instance
   38|       |
   39|       |    // Consume an integer value for the state parameter
   40|       |    // Use a wider range of integers, including negative values
   41|      3|    int state = fuzzed_data.ConsumeIntegralInRange<int>(
   42|      3|        std::numeric_limits<int>::min(), std::numeric_limits<int>::max());
   43|       |
   44|       |    // Call the function under test
   45|      3|	auto start_func = std::chrono::high_resolution_clock::now();
   46|      3|    Gfx::opSetExtGState(obj_ptr, state);
   47|      3|	auto end_func = std::chrono::high_resolution_clock::now();
   48|       |
   49|       |    // Optionally, we can check the state after modification to ensure the function was invoked correctly
   50|       |    // This is not strictly necessary for fuzzing, but can help in understanding the behavior
   51|      3|    int modified_property = obj_ptr->getProperty();
   52|       |    
   53|       |    // We can use the modified_property in some way to ensure the function was effective
   54|       |    // For example, we could assert or log it, but for fuzzing, we typically don't do that.
   55|       |    
   56|       |    // Ensure the fuzzing process is effective by making sure the function is invoked with varied input
   57|       |    // This is already handled by the FuzzedDataProvider, but we can also ensure that the object is modified
   58|       |    // We will introduce a condition that varies the property based on additional input
   59|      3|    if (fuzzed_data.ConsumeBool()) {
  ------------------
  |  Branch (59:9): [True: 0, False: 3]
  ------------------
   60|       |        // If the boolean is true, we modify the property further
   61|      0|        int additional_state = fuzzed_data.ConsumeIntegralInRange<int>(
   62|      0|            std::numeric_limits<int>::min(), std::numeric_limits<int>::max());
   63|      0|        obj_ptr->setProperty(obj_ptr->getProperty() + additional_state);
   64|      0|    }
   65|       |
   66|       |    // This condition can help in understanding if the function is working as expected
   67|       |    // In a real fuzzing scenario, we wouldn't typically assert or log, but this serves for demonstration
   68|      3|    if (modified_property != state) {
  ------------------
  |  Branch (68:9): [True: 0, False: 3]
  ------------------
   69|       |        // This condition can help in understanding if the function is working as expected
   70|      0|    }
   71|      3|auto end_target = std::chrono::high_resolution_clock::now();
   72|      3|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   73|       |    
   74|      3|    return 0;
   75|      3|}
_ZN6Object11setPropertyEi:
   18|      3|    void setProperty(int value) { some_property = value; }
_ZN6ObjectC2Ev:
   17|      3|    Object() : some_property(0) {} // Default constructor
_ZNK6Object11getPropertyEv:
   19|      3|    int getProperty() const { return some_property; } // Getter for testing

