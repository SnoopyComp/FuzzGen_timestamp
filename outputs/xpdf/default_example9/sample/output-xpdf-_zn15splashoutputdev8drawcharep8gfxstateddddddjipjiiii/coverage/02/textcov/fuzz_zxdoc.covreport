LLVMFuzzerTestOneInput:
   30|     53|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   31|     53|    FuzzedDataProvider stream(data, size);
   32|       |
   33|       |    // Initialize GfxState pointer (not NULL)
   34|     53|    GfxState *gfxState = new GfxState(); // Assuming GfxState has a default constructor
   35|       |
   36|       |    // Consume doubles for coordinates and sizes
   37|     53|    double x = stream.ConsumeFloatingPoint<double>();
   38|     53|    double y = stream.ConsumeFloatingPoint<double>();
   39|     53|    double width = stream.ConsumeFloatingPoint<double>();
   40|     53|    double height = stream.ConsumeFloatingPoint<double>();
   41|     53|    double xscale = stream.ConsumeFloatingPoint<double>();
   42|     53|    double yscale = stream.ConsumeFloatingPoint<double>();
   43|       |
   44|       |    // Consume CharCode and font size
   45|     53|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   46|     53|    int fontSize = stream.ConsumeIntegral<int>();
   47|       |
   48|       |    // Consume Unicode array length
   49|     53|    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 100); // Ensure at least 1 Unicode character
   50|     53|    std::vector<Unicode> unicodeArray;
   51|       |
   52|       |    // Use ConsumeRandomLengthString to get Unicode data
   53|       |    // Ensure we have enough bytes for the unicodeCount
   54|     53|    std::string unicodeData = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));
   55|     53|    if (unicodeData.size() != unicodeCount * sizeof(Unicode)) {
  ------------------
  |  Branch (55:9): [True: 50, False: 3]
  ------------------
   56|     50|        delete gfxState; // Clean up before returning
   57|     50|        return 0; // Exit if the size does not match
   58|     50|    }
   59|       |
   60|      3|    unicodeArray.resize(unicodeCount);
   61|      3|    std::memcpy(unicodeArray.data(), unicodeData.data(), unicodeCount * sizeof(Unicode));
   62|       |
   63|       |    // Consume flags
   64|      3|    GBool flag1 = stream.ConsumeBool();
   65|      3|    GBool flag2 = stream.ConsumeBool();
   66|      3|    GBool flag3 = stream.ConsumeBool();
   67|       |
   68|       |    // Call the function under test
   69|      3|    SplashOutputDev splashOutputDev;
   70|      3|    splashOutputDev.drawChar(gfxState, x, y, width, height, xscale, yscale, charCode, fontSize,
   71|      3|                              unicodeArray.data(), unicodeCount, flag1, flag2, flag3);
   72|       |
   73|       |    // Clean up
   74|      3|    delete gfxState;
   75|       |
   76|      3|    return 0;
   77|     53|}
_ZN8GfxStateC2Ev:
    9|     53|    GfxState() {
   10|       |        // Constructor implementation (if necessary)
   11|     53|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjiiii:
   20|      3|                  int flag2, int flag3) {
   21|       |        // Function implementation (if necessary)
   22|      3|    }

