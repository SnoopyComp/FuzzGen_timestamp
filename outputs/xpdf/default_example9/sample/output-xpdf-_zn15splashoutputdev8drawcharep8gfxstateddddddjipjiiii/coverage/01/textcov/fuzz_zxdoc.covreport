LLVMFuzzerTestOneInput:
   22|     33|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   23|     33|auto start_target = std::chrono::high_resolution_clock::now();
   24|     33|    FuzzedDataProvider stream(data, size);
   25|       |
   26|       |    // Initialize parameters for the function
   27|     33|    GfxState gfxState; // Must not be NULL
   28|     33|    double x = stream.ConsumeFloatingPoint<double>();
   29|     33|    double y = stream.ConsumeFloatingPoint<double>();
   30|     33|    double width = stream.ConsumeFloatingPoint<double>();
   31|     33|    double height = stream.ConsumeFloatingPoint<double>();
   32|     33|    double ascent = stream.ConsumeFloatingPoint<double>();
   33|     33|    double descent = stream.ConsumeFloatingPoint<double>();
   34|     33|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   35|     33|    int fontSize = stream.ConsumeIntegral<int>();
   36|       |    
   37|       |    // Prepare Unicode array
   38|     33|    size_t unicodeLength = stream.ConsumeIntegralInRange<size_t>(1, 256); // Ensure non-zero length
   39|     33|    std::vector<Unicode> unicodeData = stream.ConsumeBytes<Unicode>(unicodeLength);
   40|       |    
   41|       |    // Ensure unicodeData is not empty
   42|     33|    Unicode *unicodePtr = unicodeData.data(); // Will not be NULL if unicodeLength > 0
   43|       |
   44|       |    // Consume boolean flags
   45|     33|    GBool flag1 = stream.ConsumeBool();
   46|     33|    GBool flag2 = stream.ConsumeBool();
   47|     33|    GBool flag3 = stream.ConsumeBool();
   48|       |
   49|       |    // Call the function under test
   50|     33|    SplashOutputDev splashOutputDev;
   51|     33|	auto start_func = std::chrono::high_resolution_clock::now();
   52|     33|    splashOutputDev.drawChar(&gfxState, x, y, width, height, ascent, descent, charCode, fontSize, unicodePtr, static_cast<int>(unicodeLength), flag1, flag2, flag3);
   53|     33|	auto end_func = std::chrono::high_resolution_clock::now();
   54|     33|auto end_target = std::chrono::high_resolution_clock::now();
   55|     33|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   56|       |
   57|     33|    return 0;
   58|     33|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddiiPcibbb:
   17|     33|                  CharCode charCode, int fontSize, Unicode *unicode, int unicodeLength, GBool flag1, GBool flag2, GBool flag3) {
   18|       |        // Function implementation goes here
   19|     33|    }

