LLVMFuzzerTestOneInput:
   28|      7|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   29|      7|auto start_target = std::chrono::high_resolution_clock::now();
   30|       |    // Create a FuzzedDataProvider to consume the input data.
   31|      7|    FuzzedDataProvider stream(data, size);
   32|       |
   33|       |    // Initialize GfxState object
   34|      7|    GfxState gfxState;
   35|       |
   36|       |    // Consume data for GfxState members
   37|      7|    gfxState.some_integer = stream.ConsumeIntegral<int>();
   38|      7|    gfxState.some_float = stream.ConsumeFloatingPoint<float>();
   39|       |
   40|       |    // Consume a random length for some_data vector
   41|      7|    size_t data_length = stream.ConsumeIntegralInRange<size_t>(1, 128); // Avoid zero-length
   42|      7|    gfxState.some_data = stream.ConsumeBytes<uint8_t>(data_length);
   43|       |
   44|       |    // Call the function under test
   45|      7|    SplashOutputDev splashOutputDev;
   46|      7|	auto start_func = std::chrono::high_resolution_clock::now();
   47|      7|    splashOutputDev.doUpdateFont(&gfxState);
   48|      7|	auto end_func = std::chrono::high_resolution_clock::now();
   49|      7|auto end_target = std::chrono::high_resolution_clock::now();
   50|      7|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   51|       |
   52|      7|    return 0;
   53|      7|}
_ZN8GfxStateC2Ev:
   17|      7|    GfxState() : some_integer(0), some_float(0.0f) {}
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   23|      7|    void doUpdateFont(GfxState *gfxState) {
   24|       |        // Function implementation goes here.
   25|      7|    }

