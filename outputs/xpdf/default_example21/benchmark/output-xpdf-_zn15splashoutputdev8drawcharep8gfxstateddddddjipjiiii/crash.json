{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n\\n// Include standard libraries before project-specific libraries\\n#include \"gtypes.h\" // Assuming this header defines GBool\\n#include \"Object.h\" // Assuming this header defines Object\\n#include \"Dict.h\"   // Assuming this header defines Dict\\n#include \"GfxState.h\" // Include GfxState before SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Adjusted to include the correct path for SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/SplashColor.h\" // Include the header for SplashColorMode\\n\\n// Function under test\\n// Removed the out-of-line declaration since it is not a definition\\n// void SplashOutputDev::drawChar(GfxState *gfxState, double x, double y, double width, double height, double ascent, double descent, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState(0, 0, nullptr, 0, false); // Create an instance of GfxState with appropriate constructor\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double ascent = stream.ConsumeFloatingPoint<double>();\\n    double descent = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate memory for Unicode array\\n    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 100); // Ensure at least 1 Unicode character\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    for (int i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n    \\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Create an instance of SplashOutputDev with appropriate constructor arguments\\n    SplashColorMode colorMode = splashModeRGB; // Replace with a valid SplashColorMode, e.g., splashModeRGB\\n    int bitmapRowPad = 0; // Replace with a valid bitmap row padding\\n    GBool reverseVideo = gFalse; // Replace with a valid GBool value\\n    SplashColorPtr paperColor = nullptr; // Replace with a valid SplashColorPtr if needed\\n\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor);\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, ascent, descent, charCode, fontSize, unicodeArray.data(), unicodeCount, flag1, flag2, flag3);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming the definitions of GfxState, CharCode, Unicode, and GBool are available\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition\\nusing Unicode = uint32_t;   // Example definition\\nusing GBool = bool;         // Example definition\\n\\n// Definition of SplashOutputDev class\\nclass SplashOutputDev {\\npublic:\\n    // Function under test\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double ascent, double descent, CharCode charCode, int fontSize,\\n                  Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n        // Implementation of the function (mock implementation for fuzzing)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    GfxState gfxState; // Non-null pointer, assuming default constructor is valid\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double ascent = stream.ConsumeFloatingPoint<double>();\\n    double descent = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate Unicode array\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // At least 1 Unicode character\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    for (size_t i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    SplashOutputDev().drawChar(&gfxState, x, y, width, height, ascent, descent, charCode, fontSize,\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                                unicodeArray.data(), static_cast<int>(unicodeCount), flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}