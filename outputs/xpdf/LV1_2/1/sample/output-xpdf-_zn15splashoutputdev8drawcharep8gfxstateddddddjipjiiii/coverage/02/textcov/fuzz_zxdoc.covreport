LLVMFuzzerTestOneInput:
   48|     46|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   49|     46|auto start_target = std::chrono::high_resolution_clock::now();//erase
   50|     46|    FuzzedDataProvider stream(data, size);
   51|       |
   52|       |    // Create an instance of SplashOutputDev
   53|     46|    SplashOutputDev splashOutputDev;
   54|       |
   55|       |    // Create a GfxState object
   56|     46|    GfxState gfxState;
   57|       |
   58|       |    // Use the fuzzed data to influence the GfxState
   59|     46|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   60|     46|    gfxState.setFontSize(fontSize);
   61|       |
   62|       |    // Consume fuzzed data for parameters
   63|     46|    double x1 = stream.ConsumeFloatingPoint<double>();
   64|     46|    double y1 = stream.ConsumeFloatingPoint<double>();
   65|     46|    double x2 = stream.ConsumeFloatingPoint<double>();
   66|     46|    double y2 = stream.ConsumeFloatingPoint<double>();
   67|     46|    double x3 = stream.ConsumeFloatingPoint<double>();
   68|     46|    double y3 = stream.ConsumeFloatingPoint<double>();
   69|     46|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   70|     46|    int intParam = stream.ConsumeIntegral<int>(); // Integer parameter
   71|     46|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   72|     46|    std::vector<Unicode> unicodeArray(unicodeSize); // Create Unicode array
   73|    442|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (73:24): [True: 396, False: 46]
  ------------------
   74|    396|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array with random values
   75|    396|    }
   76|     46|    GBool boolParam1 = stream.ConsumeBool(); // First boolean parameter
   77|     46|    GBool boolParam2 = stream.ConsumeBool(); // Second boolean parameter
   78|     46|    GBool boolParam3 = stream.ConsumeBool(); // Third boolean parameter
   79|       |
   80|       |    // Call the function under test
   81|     46|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   82|     46|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, intParam, unicodeArray.data(), static_cast<int>(unicodeArray.size()), boolParam1, boolParam2, boolParam3);
   83|     46|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   84|     46|auto end_target = std::chrono::high_resolution_clock::now();//erase
   85|     46|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   86|       |
   87|     46|    return 0;
   88|     46|}
_ZN8GfxStateC2Ev:
   18|     46|    GfxState() {
   19|       |        // Initialize members
   20|     46|        fontSize = 12; // Default font size
   21|     46|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     46|    }
_ZN8GfxState11setFontSizeEi:
   24|     46|    void setFontSize(int size) {
   25|     46|        fontSize = size;
   26|     46|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     46|    void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intParam, Unicode *unicodeArray, int unicodeSize, GBool boolParam1, GBool boolParam2, GBool boolParam3) {
   41|       |        // Implementation of drawChar (omitted for brevity)
   42|       |        // For example, just printing the state (in a real implementation, this would do something meaningful)
   43|     46|        printf("Drawing char with code: %u at position (%f, %f)\n", charCode, x1, y1);
   44|     46|    }

