LLVMFuzzerTestOneInput:
   48|     52|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   49|     52|auto start_target = std::chrono::high_resolution_clock::now();//erase
   50|     52|    FuzzedDataProvider stream(data, size);
   51|       |
   52|       |    // Create an instance of SplashOutputDev
   53|     52|    SplashOutputDev splashOutputDev;
   54|       |
   55|       |    // Create a GfxState object
   56|     52|    GfxState gfxState;
   57|       |
   58|       |    // Use the fuzzed data to influence the GfxState
   59|     52|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   60|     52|    gfxState.setFontSize(fontSize);
   61|       |
   62|       |    // Consume doubles for the position parameters
   63|     52|    double x1 = stream.ConsumeFloatingPoint<double>();
   64|     52|    double y1 = stream.ConsumeFloatingPoint<double>();
   65|     52|    double x2 = stream.ConsumeFloatingPoint<double>();
   66|     52|    double y2 = stream.ConsumeFloatingPoint<double>();
   67|     52|    double x3 = stream.ConsumeFloatingPoint<double>();
   68|     52|    double y3 = stream.ConsumeFloatingPoint<double>();
   69|       |
   70|       |    // Consume a CharCode
   71|     52|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   72|       |
   73|       |    // Consume an integer parameter
   74|     52|    int intParam = stream.ConsumeIntegral<int>();
   75|       |
   76|       |    // Consume a Unicode array
   77|     52|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   78|     52|    std::vector<Unicode> unicodeArray(unicodeSize);
   79|    747|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (79:24): [True: 695, False: 52]
  ------------------
   80|    695|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();
   81|    695|    }
   82|       |
   83|       |    // Consume boolean parameters
   84|     52|    GBool boolParam1 = stream.ConsumeBool();
   85|     52|    GBool boolParam2 = stream.ConsumeBool();
   86|     52|    GBool boolParam3 = stream.ConsumeBool();
   87|       |
   88|       |    // Call the function under test
   89|     52|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   90|     52|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, intParam, unicodeArray.data(), static_cast<int>(unicodeArray.size()), boolParam1, boolParam2, boolParam3);
   91|     52|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   92|     52|auto end_target = std::chrono::high_resolution_clock::now();//erase
   93|     52|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   94|       |
   95|     52|    return 0;
   96|     52|}
_ZN8GfxStateC2Ev:
   18|     52|    GfxState() {
   19|       |        // Initialize members
   20|     52|        fontSize = 12; // Default font size
   21|     52|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     52|    }
_ZN8GfxState11setFontSizeEi:
   24|     52|    void setFontSize(int size) {
   25|     52|        fontSize = size;
   26|     52|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     52|    void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intParam, Unicode *unicodeArray, int unicodeSize, GBool boolParam1, GBool boolParam2, GBool boolParam3) {
   41|       |        // Implementation of drawChar (omitted for brevity)
   42|       |        // For example, just printing the state (in a real implementation, this would do something meaningful)
   43|     52|        printf("Drawing char: %u at (%f, %f) with font size %d\n", charCode, x1, y1, state->fontSize);
   44|     52|    }

