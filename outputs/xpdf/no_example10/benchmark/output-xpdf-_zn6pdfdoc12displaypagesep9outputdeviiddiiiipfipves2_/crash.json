{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "48.25",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include <cstddef> // Include for size_t\\n\\n// Assuming the necessary includes and definitions for OutputDev, GBool, and DW_TAG_subroutine_typeInfinite are available.\\n// For the sake of this example, let's define some placeholder types.\\nclass OutputDev {};\\nusing GBool = bool;\\nusing DW_TAG_subroutine_typeInfinite = int; // Placeholder definition\\n\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool isPrint, GBool isDisplay, GBool isAnnotate, DW_TAG_subroutine_typeInfinite *subroutine, void *userData) {\\n        // Implementation of the function (not shown here)\\n    }\\n};\\n\\n// Define the entry point for the fuzzer\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function call\\n    OutputDev outputDev; // Assuming a default constructor is available\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming 1 to 100 pages\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // pageEnd should be >= pageStart\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Assuming zoom levels from 1 to 10\\n    GBool isPrint = stream.ConsumeBool();\\n    GBool isDisplay = stream.ConsumeBool();\\n    GBool isAnnotate = stream.ConsumeBool();\\n    \\n    // Consume a random length string for DW_TAG_subroutine_typeInfinite\\n    std::string subroutineString = stream.ConsumeRandomLengthString(sizeof(DW_TAG_subroutine_typeInfinite));\\n    if (subroutineString.size() != sizeof(DW_TAG_subroutine_typeInfinite)) {\\n        return 0; // Invalid size, do not proceed\\n    }\\n    DW_TAG_subroutine_typeInfinite *subroutine = reinterpret_cast<DW_TAG_subroutine_typeInfinite*>(const_cast<char*>(subroutineString.data()));\\n    \\n    // Consume a user data pointer as a string\\n    std::string userDataString = stream.ConsumeRandomLengthString(16); // Assuming userData can be up to 16 bytes\\n    void *userData = const_cast<char*>(userDataString.data()); // Convert string to void pointer\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, isPrint, isDisplay, isAnnotate, subroutine, userData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include \"PDFDoc.h\" // Include the header file for PDFDoc\\n\\n// Include the necessary library for GBool if it is defined in another header\\n#include \"../goo/gtypes.h\" // Adjust the path as necessary\\n\\n// Assuming the definitions of OutputDev and DW_TAG_subroutine_typeInfinite are available\\nclass OutputDev {\\n    // Implementation details for OutputDev\\n};\\n\\nclass DW_TAG_subroutine_typeInfinite {\\n    // Implementation details for DW_TAG_subroutine_typeInfinite\\n};\\n\\n// Ensure the function signature matches the declaration in PDFDoc\\n// This is a placeholder signature; you must adjust it to match the actual PDFDoc declaration\\nvoid displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool useCache, GBool renderAnnotations, GBool isPrint, GBool (*abortCheckCbk)(void *), void *userData) {\\n    // Implementation of the function\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    \\n    // Create an OutputDev object (assuming a default constructor is available)\\n    OutputDev outputDev;\\n\\n    // Consume parameters\\n    int pageStart = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Example range for pages\\n    int pageEnd = fuzzed_data.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int zoom = fuzzed_data.ConsumeIntegralInRange<int>(1, 10); // Example zoom levels\\n    GBool useCache = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // Use the typedef from gtypes.h\\n    GBool renderAnnotations = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // Use the typedef from gtypes.h\\n    GBool isPrint = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // Use the typedef from gtypes.h\\n\\n    // Create a DW_TAG_subroutine_typeInfinite object (assuming a default constructor is available)\\n    DW_TAG_subroutine_typeInfinite subroutine;\\n\\n    // Create a GString object for the PDFDoc constructor\\n    GString *fileNameA = new GString(\"sample.pdf\"); // Provide a valid file name for the PDFDoc constructor\\n\\n    // Create an instance of PDFDoc using a constructor that takes necessary parameters\\n    PDFDoc pdfDoc(fileNameA); // Adjust based on PDFDoc's constructor\\n\\n    // Call the function under test\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, useCache, renderAnnotations, isPrint, nullptr, nullptr); // Call the function\\n\\n    // Clean up\\n    delete fileNameA; // Free the allocated GString\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}