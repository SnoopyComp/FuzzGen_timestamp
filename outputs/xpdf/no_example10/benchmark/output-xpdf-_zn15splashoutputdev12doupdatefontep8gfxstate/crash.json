{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "47.13",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n#include <string>\\n\\n// Assuming GfxState is a class defined elsewhere in your codebase\\nclass GfxState {\\npublic:\\n    // Example member variables for GfxState\\n    int fontSize;\\n    std::vector<uint8_t> fontData;\\n\\n    GfxState(int size, const std::vector<uint8_t>& data) : fontSize(size), fontData(data) {}\\n};\\n\\n// Assuming SplashOutputDev is a class defined elsewhere in your codebase\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Function implementation\\n    } // Added missing semicolon here\\n};\\n\\n// The function must be defined with extern \"C\" to avoid name mangling\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for GfxState\\n    int fontSize = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Non-zero font size\\n    std::string fontDataString = fuzzed_data.ConsumeRandomLengthString(256); // Non-empty font data string\\n    std::vector<uint8_t> fontData(fontDataString.begin(), fontDataString.end()); // Convert string to vector<uint8_t>\\n\\n    // Create an instance of GfxState\\n    GfxState gfxState(fontSize, fontData);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <iostream>\\n\\n// Assume GfxState is a defined class somewhere in the codebase.\\nclass GfxState {\\npublic:\\n    // Example constructor and member variables for GfxState.\\n    GfxState() : some_value(0) {}\\n    int some_value;\\n    // Add other necessary members and methods as needed.\\n\\n    void printState() const {\\n    }\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Function implementation (not provided).\\n        // This is where the actual logic would be.\\n        \\n        // Example usage of gfxState to ensure some behavior is observable.\\n        if (gfxState->some_value > 0) {\\n        } else {\\n        }\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Consume data to initialize members of GfxState\\n    // For example, let's say we want to set some_value to a value from the fuzz input.\\n    gfxState.some_value = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}