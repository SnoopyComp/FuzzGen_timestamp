{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "62.19",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include <cstring> // Include for std::memcpy\\n\\n// Assume these types are defined somewhere in the codebase.\\nclass GfxState {};\\nusing CharCode = uint32_t;\\nusing Unicode = uint32_t;\\nusing GBool = bool;\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation goes here.\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState;  // Assuming GfxState can be default constructed\\n    double param1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param4 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param5 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param6 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    CharCode charCode = fuzzed_data.ConsumeIntegral<CharCode>();\\n    int intParam1 = fuzzed_data.ConsumeIntegral<int>();\\n    \\n    // Ensure we have a non-null Unicode pointer\\n    size_t unicodeArraySize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100); // At least 1 Unicode character\\n    std::vector<Unicode> unicodeArray(unicodeArraySize); // Preallocate the vector\\n\\n    // Consume random length string and validate the size\\n    std::string unicodeData = fuzzed_data.ConsumeRandomLengthString(unicodeArraySize * sizeof(Unicode));\\n    if (unicodeData.size() != unicodeArraySize * sizeof(Unicode)) {\\n        return 0; // Early return if the size does not match\\n    }\\n\\n    // Copy the data into the unicodeArray\\n    std::memcpy(unicodeArray.data(), unicodeData.data(), unicodeArraySize * sizeof(Unicode));\\n\\n    Unicode *unicodePtr = unicodeArray.data();\\n\\n    int intParam2 = fuzzed_data.ConsumeIntegral<int>();\\n    GBool boolParam1 = fuzzed_data.ConsumeBool();\\n    GBool boolParam2 = fuzzed_data.ConsumeBool();\\n    GBool boolParam3 = fuzzed_data.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam1, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming the following types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example type for CharCode\\nusing Unicode = uint32_t;   // Example type for Unicode\\nusing GBool = int;          // Example type for GBool\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double ascent, double descent, CharCode charCode, int flags,\\n                  Unicode *unicode, int unicodeLength, GBool isUnderlined,\\n                  GBool isBold, GBool isItalic) {\\n        // Function implementation\\n    }\\n}; // Added missing semicolon\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    if (size == 0) {\\n        return 0; // Avoid processing if there's no input data\\n    }\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a GfxState object\\n    GfxState gfxState;\\n\\n    // Consume doubles for coordinates and dimensions\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double ascent = stream.ConsumeFloatingPoint<double>();\\n    double descent = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume a CharCode\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n\\n    // Consume an integer for flags\\n    int flags = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode data\\n    size_t unicodeLength = stream.ConsumeIntegralInRange<size_t>(1, 32); // Example range\\n    std::string unicodeString = stream.ConsumeRandomLengthString(); // Get a random length string\\n\\n    // Ensure the length of the string is as expected\\n    if (unicodeString.size() < unicodeLength) {\\n        return 0; // Not enough data to proceed\\n    }\\n\\n    // Convert the string to Unicode array\\n    std::vector<Unicode> unicodeData(unicodeLength);\\n    for (size_t i = 0; i < unicodeLength; ++i) {\\n        unicodeData[i] = static_cast<Unicode>(unicodeString[i]); // Convert char to Unicode\\n    }\\n    Unicode *unicodePtr = unicodeData.data(); // Pointer to the Unicode data\\n\\n    // Consume GBool values\\n    GBool isUnderlined = stream.ConsumeBool() ? 1 : 0;\\n    GBool isBold = stream.ConsumeBool() ? 1 : 0;\\n    GBool isItalic = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, ascent, descent,\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                              charCode, flags, unicodePtr, static_cast<int>(unicodeLength),\\n                              isUnderlined, isBold, isItalic);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}