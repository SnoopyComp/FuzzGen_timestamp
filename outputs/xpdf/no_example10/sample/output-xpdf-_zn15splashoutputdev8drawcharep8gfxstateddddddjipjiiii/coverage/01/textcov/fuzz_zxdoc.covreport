LLVMFuzzerTestOneInput:
   24|     57|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     57|auto start_target = std::chrono::high_resolution_clock::now();
   26|       |    // Create a FuzzedDataProvider instance
   27|     57|    FuzzedDataProvider fuzzed_data(data, size);
   28|       |
   29|       |    // Initialize parameters
   30|     57|    GfxState gfxState;  // Assuming GfxState can be default constructed
   31|     57|    double param1 = fuzzed_data.ConsumeFloatingPoint<double>();
   32|     57|    double param2 = fuzzed_data.ConsumeFloatingPoint<double>();
   33|     57|    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();
   34|     57|    double param4 = fuzzed_data.ConsumeFloatingPoint<double>();
   35|     57|    double param5 = fuzzed_data.ConsumeFloatingPoint<double>();
   36|     57|    double param6 = fuzzed_data.ConsumeFloatingPoint<double>();
   37|     57|    CharCode charCode = fuzzed_data.ConsumeIntegral<CharCode>();
   38|     57|    int intParam1 = fuzzed_data.ConsumeIntegral<int>();
   39|       |    
   40|       |    // Ensure we have a non-null Unicode pointer
   41|     57|    size_t unicodeArraySize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100); // At least 1 Unicode character
   42|     57|    std::vector<Unicode> unicodeArray(unicodeArraySize); // Preallocate the vector
   43|       |
   44|       |    // Consume random length string and validate the size
   45|     57|    std::string unicodeData = fuzzed_data.ConsumeRandomLengthString(unicodeArraySize * sizeof(Unicode));
   46|     57|    if (unicodeData.size() != unicodeArraySize * sizeof(Unicode)) {
  ------------------
  |  Branch (46:9): [True: 50, False: 7]
  ------------------
   47|     50|        return 0; // Early return if the size does not match
   48|     50|    }
   49|       |
   50|       |    // Copy the data into the unicodeArray
   51|      7|    std::memcpy(unicodeArray.data(), unicodeData.data(), unicodeArraySize * sizeof(Unicode));
   52|       |
   53|      7|    Unicode *unicodePtr = unicodeArray.data();
   54|       |
   55|      7|    int intParam2 = fuzzed_data.ConsumeIntegral<int>();
   56|      7|    GBool boolParam1 = fuzzed_data.ConsumeBool();
   57|      7|    GBool boolParam2 = fuzzed_data.ConsumeBool();
   58|      7|    GBool boolParam3 = fuzzed_data.ConsumeBool();
   59|       |
   60|       |    // Call the function under test
   61|      7|    SplashOutputDev splashOutputDev;
   62|      7|	auto start_func = std::chrono::high_resolution_clock::now();
   63|      7|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam1, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);
   64|      7|	auto end_func = std::chrono::high_resolution_clock::now();
   65|      7|auto end_target = std::chrono::high_resolution_clock::now();
   66|      7|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   67|       |
   68|      7|    return 0;
   69|     57|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   19|      7|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   20|       |        // Function implementation goes here.
   21|      7|    }

