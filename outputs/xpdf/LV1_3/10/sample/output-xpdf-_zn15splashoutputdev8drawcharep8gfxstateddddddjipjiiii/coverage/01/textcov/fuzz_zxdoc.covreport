LLVMFuzzerTestOneInput:
   49|     39|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   50|     39|auto start_target = std::chrono::high_resolution_clock::now();//erase
   51|     39|    FuzzedDataProvider stream(data, size);
   52|       |
   53|       |    // Create an instance of SplashOutputDev
   54|     39|    SplashOutputDev splashOutputDev;
   55|       |
   56|       |    // Create a GfxState object
   57|     39|    GfxState gfxState;
   58|       |
   59|       |    // Use the fuzzed data to influence the GfxState
   60|     39|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   61|     39|    gfxState.setFontSize(fontSize);
   62|       |
   63|       |    // Consume parameters for drawChar
   64|     39|    double x = stream.ConsumeFloatingPoint<double>();
   65|     39|    double y = stream.ConsumeFloatingPoint<double>();
   66|     39|    double dx = stream.ConsumeFloatingPoint<double>();
   67|     39|    double dy = stream.ConsumeFloatingPoint<double>();
   68|     39|    double width = stream.ConsumeFloatingPoint<double>();
   69|     39|    double height = stream.ConsumeFloatingPoint<double>();
   70|     39|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   71|     39|    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Number of Unicode characters
   72|     39|    std::vector<Unicode> unicodeArray(unicodeCount);
   73|    120|    for (int i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (73:21): [True: 81, False: 39]
  ------------------
   74|     81|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill Unicode array with fuzzed data
   75|     81|    }
   76|     39|    GBool isText = stream.ConsumeBool(); // First boolean parameter
   77|     39|    GBool isStroke = stream.ConsumeBool(); // Second boolean parameter
   78|     39|    GBool isFill = stream.ConsumeBool(); // Third boolean parameter
   79|       |
   80|       |    // Call the function under test
   81|     39|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   82|     39|    splashOutputDev.drawChar(&gfxState, x, y, dx, dy, width, height, charCode, fontSize, unicodeArray.data(), unicodeCount, isText, isStroke, isFill);
   83|     39|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   84|     39|auto end_target = std::chrono::high_resolution_clock::now();//erase
   85|     39|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   86|       |
   87|     39|    return 0;
   88|     39|}
_ZN8GfxStateC2Ev:
   17|     39|    GfxState() {
   18|       |        // Initialize members
   19|     39|        fontSize = 12; // Default font size
   20|     39|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   21|     39|    }
_ZN8GfxState11setFontSizeEi:
   23|     39|    void setFontSize(int size) {
   24|     39|        fontSize = size;
   25|     39|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   41|     39|    void drawChar(GfxState *state, double x, double y, double dx, double dy, double width, double height, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool isText, GBool isStroke, GBool isFill) {
   42|       |        // Function implementation (placeholder)
   43|       |        // For example, just printing the parameters (in a real implementation, this would do something meaningful)
   44|     39|        printf("Drawing char: %u at (%f, %f) with size %d\n", charCode, x, y, fontSize);
   45|     39|    }

