{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "60.20",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint> // For uint32_t\\n#include <vector>  // For std::vector\\n#include <string>  // For std::string\\n#include <cstring> // For memset\\n#include <cstdio>  // For printf (used in drawChar)\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined somewhere in the codebase\\nclass GfxState {\\npublic:\\n    // Example members for GfxState\\n    int fontSize;\\n    char fontName[50]; // Example for a font name\\n\\n    GfxState() {\\n        // Initialize members\\n        fontSize = 12; // Default font size\\n        memset(fontName, 0, sizeof(fontName)); // Clear font name\\n    }\\n\\n    void setFontSize(int size) {\\n        fontSize = size;\\n    }\\n\\n    void setFontName(const char* name) {\\n        strncpy(fontName, name, sizeof(fontName) - 1);\\n        fontName[sizeof(fontName) - 1] = '\\0'; // Ensure null-termination\\n    }\\n};\\n\\nusing CharCode = uint32_t; // Example definition\\nusing Unicode = uint32_t;   // Example definition\\nusing GBool = bool;         // Example definition\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool fill, GBool stroke, GBool clip) {\\n        // Implementation of drawChar (omitted for brevity)\\n        // For example, just printing the state (in a real implementation, this would do something meaningful)\\n        printf(\"Drawing char %u at (%f, %f) with size %d\\\n\", charCode, x, y, fontSize);\\n    }\\n};\\n\\n// This function is the entry point for the fuzzer\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Create a GfxState object\\n    GfxState gfxState;\\n\\n    // Use the fuzzed data to influence the GfxState\\n    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100\\n    gfxState.setFontSize(fontSize);\\n\\n    // Consume a string from the fuzzed data for the font name\\n    std::string fontName = stream.ConsumeRandomLengthString(49); // Max length 49 to fit in the buffer\\n    gfxState.setFontName(fontName.c_str());\\n\\n    // Prepare parameters for drawChar\\n    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate\\n    double width = stream.ConsumeFloatingPoint<double>(); // Width\\n    double height = stream.ConsumeFloatingPoint<double>(); // Height\\n    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X\\n    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode\\n    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Unicode count\\n    std::vector<Unicode> unicodeArray(unicodeCount); // Unicode array\\n    for (int i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array\\n    }\\n    GBool fill = stream.ConsumeBool(); // Fill flag\\n    GBool stroke = stream.ConsumeBool(); // Stroke flag\\n    GBool clip = stream.ConsumeBool(); // Clip flag\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeCount, fill, stroke, clip);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "55.07",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint> // For uint32_t\\n#include <vector>  // For std::vector\\n#include <string>  // For std::string\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined somewhere in the codebase\\nclass GfxState {\\npublic:\\n    // Example members for GfxState\\n    // Add necessary members and methods as required\\n};\\n\\nusing CharCode = uint32_t; // Example definition for CharCode\\nusing Unicode = uint32_t;   // Example definition for Unicode\\nusing GBool = bool;         // Example definition for GBool\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool fill, GBool stroke, GBool render) {\\n        // Placeholder implementation for drawChar\\n        // This is where the actual drawing logic would go\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of GfxState\\n    GfxState gfxState;\\n\\n    // Initialize parameters for the function\\n    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate\\n    double width = stream.ConsumeFloatingPoint<double>(); // Width\\n    double height = stream.ConsumeFloatingPoint<double>(); // Height\\n    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X\\n    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code\\n    int fontSize = stream.ConsumeIntegral<int>(); // Font size\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Number of Unicode characters\\n    std::vector<Unicode> unicodeArray(unicodeCount); // Unicode array\\n\\n    // Fill the Unicode array with fuzzed data\\n    for (size_t i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Populate with random Unicode values\\n    }\\n\\n    GBool fill = stream.ConsumeBool(); // Fill flag\\n    GBool stroke = stream.ConsumeBool(); // Stroke flag\\n    GBool render = stream.ConsumeBool(); // Render flag\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), fill, stroke, render);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}