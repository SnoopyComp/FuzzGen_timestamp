LLVMFuzzerTestOneInput:
   29|     50|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   30|     50|auto start_target = std::chrono::high_resolution_clock::now();//erase
   31|     50|    FuzzedDataProvider stream(data, size);
   32|       |
   33|       |    // Create an instance of GfxState
   34|     50|    GfxState gfxState;
   35|       |
   36|       |    // Initialize parameters for the function
   37|     50|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   38|     50|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   39|     50|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   40|     50|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   41|     50|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   42|     50|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   43|     50|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code
   44|     50|    int fontSize = stream.ConsumeIntegral<int>(); // Font size
   45|     50|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Number of Unicode characters
   46|     50|    std::vector<Unicode> unicodeArray(unicodeCount); // Unicode array
   47|       |
   48|       |    // Fill the Unicode array with fuzzed data
   49|    726|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (49:24): [True: 676, False: 50]
  ------------------
   50|    676|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Populate with random Unicode values
   51|    676|    }
   52|       |
   53|     50|    GBool fill = stream.ConsumeBool(); // Fill flag
   54|     50|    GBool stroke = stream.ConsumeBool(); // Stroke flag
   55|     50|    GBool render = stream.ConsumeBool(); // Render flag
   56|       |
   57|       |    // Create an instance of SplashOutputDev
   58|     50|    SplashOutputDev splashOutputDev;
   59|       |
   60|       |    // Call the function under test
   61|     50|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   62|     50|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), fill, stroke, render);
   63|     50|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   64|     50|auto end_target = std::chrono::high_resolution_clock::now();//erase
   65|     50|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   66|       |
   67|     50|    return 0;
   68|     50|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   23|     50|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool fill, GBool stroke, GBool render) {
   24|       |        // Placeholder implementation for drawChar
   25|       |        // This is where the actual drawing logic would go
   26|     50|    }

