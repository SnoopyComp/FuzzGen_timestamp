LLVMFuzzerTestOneInput:
   34|     13|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   35|     13|auto start_target = std::chrono::high_resolution_clock::now();//erase
   36|     13|    FuzzedDataProvider stream(data, size);
   37|       |
   38|       |    // Initialize parameters for the function
   39|     13|    OutputDev outputDev; // Create an instance of OutputDev (not null)
   40|       |    
   41|     13|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100
   42|     13|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   43|     13|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   44|     13|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   45|     13|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (45:18): [True: 1, False: 12]
  ------------------
   46|     13|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (46:20): [True: 2, False: 11]
  ------------------
   47|     13|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (47:19): [True: 1, False: 12]
  ------------------
   48|       |    
   49|       |    // Create a subroutine type pointer (not null)
   50|     13|    DW_TAG_subroutine_typeInfinite_loop subroutineType;
   51|     13|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   52|       |
   53|       |    // Additional parameters
   54|     13|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100
   55|     13|    int param1 = stream.ConsumeIntegral<int>(); // Additional integer parameter
   56|     13|    int param2 = stream.ConsumeIntegral<int>(); // Additional integer parameter
   57|     13|    int param3 = stream.ConsumeIntegral<int>(); // Additional integer parameter
   58|       |
   59|       |    // Call the function under test
   60|     13|    PDFDoc pdfDoc;
   61|     13|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   62|     13|    pdfDoc.displayPageSlice(&outputDev, pageStart, x, y, zoom, crop, rotate, print, pageEnd, param1, param2, param3, subroutinePtr, nullptr);
   63|     13|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   64|     13|auto end_target = std::chrono::high_resolution_clock::now();//erase
   65|     13|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   66|       |
   67|     13|    return 0;
   68|     13|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   28|     13|    void displayPageSlice(OutputDev *outputDev, int pageStart, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int pageEnd, int param1, int param2, int param3, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   29|       |        // Placeholder for the actual implementation
   30|       |        // This is just for demonstration and should be replaced with actual logic.
   31|     13|    }

