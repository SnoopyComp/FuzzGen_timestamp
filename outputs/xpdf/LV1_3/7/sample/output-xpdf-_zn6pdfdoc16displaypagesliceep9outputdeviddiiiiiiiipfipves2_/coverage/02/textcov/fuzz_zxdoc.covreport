LLVMFuzzerTestOneInput:
   32|     12|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   33|     12|auto start_target = std::chrono::high_resolution_clock::now();//erase
   34|     12|    FuzzedDataProvider stream(data, size);
   35|       |
   36|       |    // Initialize parameters for the function
   37|     12|    OutputDev outputDev; // Create an instance of OutputDev
   38|     12|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100
   39|     12|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   40|     12|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   41|     12|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   42|     12|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (42:18): [True: 1, False: 11]
  ------------------
   43|     12|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (43:20): [True: 2, False: 10]
  ------------------
   44|     12|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (44:19): [True: 1, False: 11]
  ------------------
   45|     12|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100
   46|     12|    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Width between 1 and 1000
   47|     12|    int height = stream.ConsumeIntegralInRange<int>(1, 1000); // Height between 1 and 1000
   48|     12|    int depth = stream.ConsumeIntegralInRange<int>(1, 32); // Depth between 1 and 32
   49|     12|    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Create an instance of DW_TAG_subroutine_typeInfinite_loop
   50|     12|    void *userData = nullptr; // Pointer to user data, can be null
   51|       |
   52|       |    // Call the function under test
   53|     12|    PDFDoc pdfDoc;
   54|     12|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   55|     12|    pdfDoc.displayPageSlice(&outputDev, pageStart, x, y, zoom, crop, rotate, print, pageEnd, width, height, depth, &subroutineType, userData);
   56|     12|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   57|     12|auto end_target = std::chrono::high_resolution_clock::now();//erase
   58|     12|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   59|       |
   60|     12|    return 0;
   61|     12|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   27|     12|    void displayPageSlice(OutputDev *outputDev, int pageStart, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int pageEnd, int width, int height, int depth, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   28|       |        // Placeholder for the actual implementation
   29|     12|    }

