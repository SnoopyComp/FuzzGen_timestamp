LLVMFuzzerTestOneInput:
   27|     11|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   28|     11|auto start_target = std::chrono::high_resolution_clock::now();//erase
   29|     11|    FuzzedDataProvider stream(data, size);
   30|       |
   31|       |    // Initialize parameters for the function
   32|     11|    OutputDev outputDev; // Create an instance of OutputDev (not null)
   33|       |    
   34|     11|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100
   35|     11|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100
   36|     11|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   37|     11|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   38|     11|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   39|     11|    GBool crop = stream.ConsumeBool(); // Crop flag
   40|     11|    GBool rotate = stream.ConsumeBool(); // Rotate flag
   41|     11|    GBool print = stream.ConsumeBool(); // Print flag
   42|       |    
   43|       |    // Create a subroutine type pointer (not null)
   44|     11|    DW_TAG_subroutine_typeInfinite_loop subroutineType;
   45|     11|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   46|       |
   47|       |    // Pointer to user data, can be initialized to nullptr or some valid data
   48|     11|    void *userData = nullptr; // Assuming this can be null for the test
   49|       |
   50|       |    // Call the function under test
   51|     11|    PDFDoc pdfDoc;
   52|     11|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   53|     11|    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, crop, rotate, print, subroutinePtr, userData);
   54|     11|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   55|     11|auto end_target = std::chrono::high_resolution_clock::now();//erase
   56|     11|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   57|       |
   58|     11|    return 0;
   59|     11|}
_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbPiPv:
   20|     11|    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   21|       |        // Function implementation (placeholder)
   22|       |        // For demonstration, we can print the parameters (in a real implementation, this would do something meaningful)
   23|     11|        printf("Pages: %d to %d, Position: (%f, %f), Zoom: %d, Crop: %d, Rotate: %d, Print: %d\n", pageStart, pageEnd, x, y, zoom, crop, rotate, print);
   24|     11|    }

