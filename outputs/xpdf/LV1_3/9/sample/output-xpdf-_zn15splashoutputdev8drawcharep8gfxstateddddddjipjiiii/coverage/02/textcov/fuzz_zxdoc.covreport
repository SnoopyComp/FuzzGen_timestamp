LLVMFuzzerTestOneInput:
   46|     41|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   47|     41|auto start_target = std::chrono::high_resolution_clock::now();//erase
   48|     41|    FuzzedDataProvider stream(data, size);
   49|       |
   50|       |    // Create an instance of SplashOutputDev
   51|     41|    SplashOutputDev splashOutputDev;
   52|       |
   53|       |    // Create a GfxState object
   54|     41|    GfxState gfxState;
   55|       |
   56|       |    // Use the fuzzed data to influence the GfxState
   57|     41|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   58|     41|    gfxState.setFontSize(fontSize);
   59|       |
   60|       |    // Consume parameters for drawChar function
   61|     41|    double x = stream.ConsumeFloatingPoint<double>();
   62|     41|    double y = stream.ConsumeFloatingPoint<double>();
   63|     41|    double width = stream.ConsumeFloatingPoint<double>();
   64|     41|    double height = stream.ConsumeFloatingPoint<double>();
   65|     41|    double dx = stream.ConsumeFloatingPoint<double>();
   66|     41|    double dy = stream.ConsumeFloatingPoint<double>();
   67|     41|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   68|     41|    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Random unicode count
   69|     41|    std::vector<Unicode> unicodeArray(unicodeCount);
   70|       |    
   71|       |    // Fill the Unicode array with fuzzed data
   72|    136|    for (int i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (72:21): [True: 95, False: 41]
  ------------------
   73|     95|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();
   74|     95|    }
   75|       |
   76|     41|    GBool isText = stream.ConsumeBool(); // First boolean parameter
   77|     41|    GBool isStroke = stream.ConsumeBool(); // Second boolean parameter
   78|     41|    GBool isFill = stream.ConsumeBool(); // Third boolean parameter
   79|       |
   80|       |    // Call the function under test
   81|     41|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   82|     41|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeCount, isText, isStroke, isFill);
   83|     41|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   84|     41|auto end_target = std::chrono::high_resolution_clock::now();//erase
   85|     41|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   86|       |
   87|     41|    return 0;
   88|     41|}
_ZN8GfxStateC2Ev:
   18|     41|    GfxState() {
   19|       |        // Initialize members
   20|     41|        fontSize = 12; // Default font size
   21|     41|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     41|    }
_ZN8GfxState11setFontSizeEi:
   24|     41|    void setFontSize(int size) {
   25|     41|        fontSize = size;
   26|     41|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     41|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool isText, GBool isStroke, GBool isFill) {
   41|       |        // Function implementation (placeholder)
   42|       |        // This would typically render the character based on the parameters
   43|     41|    }

