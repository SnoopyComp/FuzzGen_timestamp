LLVMFuzzerTestOneInput:
   26|     12|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   27|     12|auto start_target = std::chrono::high_resolution_clock::now();//erase
   28|     12|    FuzzedDataProvider stream(data, size);
   29|       |
   30|       |    // Initialize parameters for the function
   31|     12|    OutputDev outputDev; // Create an instance of OutputDev
   32|     12|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100
   33|     12|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   34|     12|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   35|     12|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   36|     12|    GBool crop = stream.ConsumeBool(); // Crop flag
   37|     12|    GBool rotate = stream.ConsumeBool(); // Rotate flag
   38|     12|    GBool print = stream.ConsumeBool(); // Print flag
   39|     12|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100
   40|     12|    int param1 = stream.ConsumeIntegral<int>(); // Additional parameter 1
   41|     12|    int param2 = stream.ConsumeIntegral<int>(); // Additional parameter 2
   42|     12|    int param3 = stream.ConsumeIntegral<int>(); // Additional parameter 3
   43|       |
   44|       |    // Create an instance of DW_TAG_subroutine_typeInfinite_loop
   45|     12|    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Non-null instance
   46|     12|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType; // Pointer to subroutine type
   47|       |
   48|       |    // Call the function under test
   49|     12|    PDFDoc pdfDoc;
   50|     12|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   51|     12|    pdfDoc.displayPageSlice(&outputDev, pageStart, x, y, zoom, crop, rotate, print, pageEnd, param1, param2, param3, subroutinePtr, nullptr);
   52|     12|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   53|     12|auto end_target = std::chrono::high_resolution_clock::now();//erase
   54|     12|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   55|       |
   56|     12|    return 0;
   57|     12|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddibbbiiiiPiPv:
   20|     12|    void displayPageSlice(OutputDev *outputDev, int pageStart, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int pageEnd, int param1, int param2, int param3, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   21|       |        // Function implementation (placeholder)
   22|       |        // This is just for demonstration and should be replaced with actual logic.
   23|     12|    }

