LLVMFuzzerTestOneInput:
   46|     19|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   47|     19|auto start_target = std::chrono::high_resolution_clock::now();//erase
   48|     19|    FuzzedDataProvider stream(data, size);
   49|       |
   50|       |    // Create an instance of SplashOutputDev
   51|     19|    SplashOutputDev splashOutputDev;
   52|       |
   53|       |    // Create a GfxState object
   54|     19|    GfxState gfxState;
   55|       |
   56|       |    // Use the fuzzed data to influence the GfxState
   57|     19|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   58|     19|    gfxState.setFontSize(fontSize);
   59|       |
   60|       |    // Consume a string from the fuzzed data for the font name
   61|     19|    std::string fontName = stream.ConsumeRandomLengthString(49); // Max length 49 to fit in the buffer
   62|     19|    gfxState.setFontName(fontName.c_str());
   63|       |
   64|       |    // Call the function under test
   65|     19|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   66|     19|    splashOutputDev.doUpdateFont(&gfxState);
   67|     19|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   68|     19|auto end_target = std::chrono::high_resolution_clock::now();//erase
   69|     19|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   70|       |
   71|     19|    return 0;
   72|     19|}
_ZN8GfxStateC2Ev:
   18|     19|    GfxState() {
   19|       |        // Initialize members
   20|     19|        fontSize = 12; // Default font size
   21|     19|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     19|    }
_ZN8GfxState11setFontSizeEi:
   24|     19|    void setFontSize(int size) {
   25|     19|        fontSize = size;
   26|     19|    }
_ZN8GfxState11setFontNameEPKc:
   28|     19|    void setFontName(const char* name) {
   29|     19|        strncpy(fontName, name, sizeof(fontName) - 1);
   30|     19|        fontName[sizeof(fontName) - 1] = '\0'; // Ensure null-termination
   31|     19|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   38|     19|    void doUpdateFont(GfxState *state) {
   39|       |        // Function implementation (for demonstration purposes)
   40|       |        // This is just a placeholder for the actual implementation
   41|     19|        printf("Font Size: %d, Font Name: %s\n", state->fontSize, state->fontName);
   42|     19|    }

