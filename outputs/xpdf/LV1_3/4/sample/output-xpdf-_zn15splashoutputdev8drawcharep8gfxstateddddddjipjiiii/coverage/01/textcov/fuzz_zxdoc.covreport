LLVMFuzzerTestOneInput:
   49|     49|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   50|     49|auto start_target = std::chrono::high_resolution_clock::now();//erase
   51|     49|    FuzzedDataProvider stream(data, size);
   52|       |
   53|       |    // Initialize parameters for the function
   54|     49|    GfxState gfxState; // Create an instance of GfxState
   55|     49|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   56|     49|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   57|     49|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   58|     49|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   59|     49|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   60|     49|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   61|     49|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code
   62|     49|    int fontSize = stream.ConsumeIntegral<int>(); // Font size
   63|     49|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   64|     49|    std::vector<Unicode> unicodeArray(unicodeSize); // Unicode array
   65|    486|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (65:24): [True: 437, False: 49]
  ------------------
   66|    437|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill with fuzzed data
   67|    437|    }
   68|     49|    int unicodeSizeParam = static_cast<int>(unicodeSize); // Size of the Unicode array
   69|     49|    GBool fill = stream.ConsumeBool(); // Fill flag
   70|     49|    GBool stroke = stream.ConsumeBool(); // Stroke flag
   71|     49|    GBool clip = stream.ConsumeBool(); // Clip flag
   72|       |
   73|       |    // Call the function under test
   74|     49|    SplashOutputDev splashOutputDev;
   75|     49|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   76|     49|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeSizeParam, fill, stroke, clip);
   77|     49|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   78|     49|auto end_target = std::chrono::high_resolution_clock::now();//erase
   79|     49|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   80|       |
   81|     49|    return 0;
   82|     49|}
_ZN8GfxStateC2Ev:
   19|     49|    GfxState() {
   20|       |        // Initialize members
   21|     49|        fontSize = 12; // Default font size
   22|     49|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   23|     49|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   41|     49|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeSize, GBool fill, GBool stroke, GBool clip) {
   42|       |        // Implementation of drawChar (omitted for brevity)
   43|       |        // For demonstration, we will just print the parameters
   44|     49|        printf("Drawing char: %u at (%f, %f) with size %d\n", charCode, x, y, fontSize);
   45|     49|    }

