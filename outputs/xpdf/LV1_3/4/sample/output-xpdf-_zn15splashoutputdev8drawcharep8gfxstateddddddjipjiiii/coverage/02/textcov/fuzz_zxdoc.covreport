LLVMFuzzerTestOneInput:
   47|     48|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   48|     48|auto start_target = std::chrono::high_resolution_clock::now();//erase
   49|     48|    FuzzedDataProvider stream(data, size);
   50|       |
   51|       |    // Initialize parameters for the function
   52|     48|    GfxState gfxState; // Create an instance of GfxState
   53|     48|    double x1 = stream.ConsumeFloatingPoint<double>(); // First double parameter
   54|     48|    double y1 = stream.ConsumeFloatingPoint<double>(); // Second double parameter
   55|     48|    double x2 = stream.ConsumeFloatingPoint<double>(); // Third double parameter
   56|     48|    double y2 = stream.ConsumeFloatingPoint<double>(); // Fourth double parameter
   57|     48|    double x3 = stream.ConsumeFloatingPoint<double>(); // Fifth double parameter
   58|     48|    double y3 = stream.ConsumeFloatingPoint<double>(); // Sixth double parameter
   59|     48|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   60|     48|    int intParam = stream.ConsumeIntegral<int>(); // Integer parameter
   61|     48|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   62|     48|    std::vector<Unicode> unicodeArray(unicodeSize); // Unicode array
   63|    434|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (63:24): [True: 386, False: 48]
  ------------------
   64|    386|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array with fuzzed data
   65|    386|    }
   66|     48|    int unicodeCount = static_cast<int>(unicodeSize); // Count of Unicode characters
   67|     48|    GBool boolParam1 = stream.ConsumeBool(); // First boolean parameter
   68|     48|    GBool boolParam2 = stream.ConsumeBool(); // Second boolean parameter
   69|     48|    GBool boolParam3 = stream.ConsumeBool(); // Third boolean parameter
   70|       |
   71|       |    // Call the function under test
   72|     48|    SplashOutputDev splashOutputDev;
   73|     48|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   74|     48|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, intParam, unicodeArray.data(), unicodeCount, boolParam1, boolParam2, boolParam3);
   75|     48|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   76|     48|auto end_target = std::chrono::high_resolution_clock::now();//erase
   77|     48|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   78|       |
   79|     48|    return 0;
   80|     48|}
_ZN8GfxStateC2Ev:
   18|     48|    GfxState() {
   19|       |        // Initialize members
   20|     48|        fontSize = 12; // Default font size
   21|     48|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     48|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     48|    void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intParam, Unicode *unicodeArray, int unicodeCount, GBool boolParam1, GBool boolParam2, GBool boolParam3) {
   41|       |        // Function implementation (placeholder)
   42|       |        // This is just for demonstration and should be replaced with actual logic.
   43|     48|    }

