LLVMFuzzerTestOneInput:
   26|     10|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   27|     10|auto start_target = std::chrono::high_resolution_clock::now();//erase
   28|     10|    FuzzedDataProvider stream(data, size);
   29|       |
   30|       |    // Initialize parameters for the function
   31|     10|    OutputDev outputDev; // Create an instance of OutputDev (not null)
   32|       |    
   33|       |    // Consume integers for page range
   34|     10|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100
   35|     10|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100);   // Page end between 1 and 100
   36|       |
   37|       |    // Ensure pageEnd is greater than or equal to pageStart
   38|     10|    if (pageEnd < pageStart) {
  ------------------
  |  Branch (38:9): [True: 6, False: 4]
  ------------------
   39|      6|        pageEnd = pageStart; // Adjust to ensure valid range
   40|      6|    }
   41|       |
   42|       |    // Consume doubles for x and y coordinates
   43|     10|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   44|     10|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   45|       |
   46|       |    // Consume an integer for zoom level
   47|     10|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   48|       |
   49|       |    // Consume boolean flags
   50|     10|    GBool crop = stream.ConsumeBool(); // Crop flag
   51|     10|    GBool rotate = stream.ConsumeBool(); // Rotate flag
   52|     10|    GBool print = stream.ConsumeBool(); // Print flag
   53|       |
   54|       |    // Create a subroutine type pointer (not null)
   55|     10|    DW_TAG_subroutine_typeInfinite_loop subroutineType;
   56|     10|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   57|       |
   58|       |    // Pointer to user data (can be initialized to nullptr)
   59|     10|    void *userData = nullptr; // Assuming this can be null for the test
   60|       |
   61|       |    // Call the function under test
   62|     10|    PDFDoc pdfDoc;
   63|     10|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   64|     10|    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, crop, rotate, print, subroutinePtr, userData);
   65|     10|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   66|     10|auto end_target = std::chrono::high_resolution_clock::now();//erase
   67|     10|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   68|       |
   69|     10|    return 0;
   70|     10|}
_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbPiPv:
   21|     10|    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   22|       |        // Placeholder for the actual implementation
   23|     10|    }

