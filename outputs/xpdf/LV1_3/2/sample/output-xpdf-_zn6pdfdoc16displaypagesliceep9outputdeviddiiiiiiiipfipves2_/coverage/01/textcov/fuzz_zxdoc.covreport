LLVMFuzzerTestOneInput:
   35|     10|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   36|     10|auto start_target = std::chrono::high_resolution_clock::now();//erase
   37|     10|    FuzzedDataProvider stream(data, size);
   38|       |
   39|       |    // Initialize parameters for the function
   40|     10|    OutputDev outputDev; // Create an instance of OutputDev (not null)
   41|       |    
   42|     10|    int pageNum = stream.ConsumeIntegralInRange<int>(1, 100); // Page number between 1 and 100
   43|     10|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   44|     10|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   45|     10|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   46|     10|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (46:18): [True: 0, False: 10]
  ------------------
   47|     10|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (47:20): [True: 0, False: 10]
  ------------------
   48|     10|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (48:19): [True: 0, False: 10]
  ------------------
   49|       |    
   50|       |    // Create a subroutine type pointer (not null)
   51|     10|    DW_TAG_subroutine_typeInfinite_loop subroutineType;
   52|     10|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   53|       |
   54|       |    // Pointer to void, can be initialized to nullptr or some valid data
   55|     10|    void *userData = nullptr; // Assuming this can be null for the test
   56|       |
   57|       |    // Call the function under test
   58|     10|    PDFDoc pdfDoc;
   59|     10|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   60|     10|    pdfDoc.displayPageSlice(&outputDev, pageNum, x, y, zoom, crop, rotate, print, 0, 0, 0, 0, subroutinePtr, userData);
   61|     10|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   62|     10|auto end_target = std::chrono::high_resolution_clock::now();//erase
   63|     10|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   64|       |
   65|     10|    return 0;
   66|     10|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   27|     10|    void displayPageSlice(OutputDev *outputDev, int pageNum, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int param1, int param2, int param3, int param4, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   28|       |        // Implementation details for displayPageSlice
   29|       |        // For example, just printing the parameters (in a real implementation, this would do something meaningful)
   30|       |        // This is just for demonstration and should be replaced with actual logic.
   31|     10|        printf("Page Num: %d, Coordinates: (%f, %f), Zoom: %d\n", pageNum, x, y, zoom);
   32|     10|    }

