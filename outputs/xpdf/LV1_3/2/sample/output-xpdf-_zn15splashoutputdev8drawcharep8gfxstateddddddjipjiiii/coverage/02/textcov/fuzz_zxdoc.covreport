LLVMFuzzerTestOneInput:
   51|     61|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   52|     61|auto start_target = std::chrono::high_resolution_clock::now();//erase
   53|     61|    FuzzedDataProvider stream(data, size);
   54|       |
   55|       |    // Create an instance of SplashOutputDev
   56|     61|    SplashOutputDev splashOutputDev;
   57|       |
   58|       |    // Create a GfxState object
   59|     61|    GfxState gfxState;
   60|       |
   61|       |    // Use the fuzzed data to influence the GfxState
   62|     61|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   63|     61|    gfxState.setFontSize(fontSize);
   64|       |
   65|       |    // Consume a string from the fuzzed data for the font name
   66|     61|    std::string fontName = stream.ConsumeRandomLengthString(49); // Max length 49 to fit in the buffer
   67|     61|    gfxState.setFontName(fontName.c_str());
   68|       |
   69|       |    // Prepare parameters for drawChar
   70|     61|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   71|     61|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   72|     61|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   73|     61|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   74|     61|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   75|     61|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   76|     61|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   77|     61|    int unicodeSize = stream.ConsumeIntegralInRange<int>(1, 10); // Size of Unicode array
   78|     61|    std::vector<Unicode> unicodeArray(unicodeSize); // Unicode array
   79|    170|    for (int i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (79:21): [True: 109, False: 61]
  ------------------
   80|    109|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill Unicode array
   81|    109|    }
   82|     61|    GBool flag1 = stream.ConsumeBool(); // First boolean parameter
   83|     61|    GBool flag2 = stream.ConsumeBool(); // Second boolean parameter
   84|     61|    GBool flag3 = stream.ConsumeBool(); // Third boolean parameter
   85|       |
   86|       |    // Call the function under test
   87|     61|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   88|     61|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeSize, flag1, flag2, flag3);
   89|     61|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   90|     61|auto end_target = std::chrono::high_resolution_clock::now();//erase
   91|     61|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   92|       |
   93|     61|    return 0;
   94|     61|}
_ZN8GfxStateC2Ev:
   19|     61|    GfxState() {
   20|       |        // Initialize members
   21|     61|        fontSize = 12; // Default font size
   22|     61|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   23|     61|    }
_ZN8GfxState11setFontSizeEi:
   25|     61|    void setFontSize(int size) {
   26|     61|        fontSize = size;
   27|     61|    }
_ZN8GfxState11setFontNameEPKc:
   29|     61|    void setFontName(const char* name) {
   30|     61|        strncpy(fontName, name, sizeof(fontName) - 1);
   31|     61|        fontName[sizeof(fontName) - 1] = '\0'; // Ensure null-termination
   32|     61|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   43|     61|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {
   44|       |        // Function implementation (placeholder)
   45|       |        // For example, just printing the state (in a real implementation, this would do something meaningful)
   46|     61|        printf("Drawing char: %u at (%f, %f) with font size %d\n", charCode, x, y, fontSize);
   47|     61|    }

