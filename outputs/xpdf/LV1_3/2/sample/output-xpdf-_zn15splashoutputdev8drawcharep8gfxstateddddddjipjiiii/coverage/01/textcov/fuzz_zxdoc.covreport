LLVMFuzzerTestOneInput:
   50|     53|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   51|     53|auto start_target = std::chrono::high_resolution_clock::now();//erase
   52|     53|    FuzzedDataProvider stream(data, size);
   53|       |
   54|       |    // Initialize parameters for the function
   55|     53|    GfxState gfxState; // Create an instance of GfxState
   56|     53|    double x1 = stream.ConsumeFloatingPoint<double>(); // First double parameter
   57|     53|    double y1 = stream.ConsumeFloatingPoint<double>(); // Second double parameter
   58|     53|    double x2 = stream.ConsumeFloatingPoint<double>(); // Third double parameter
   59|     53|    double y2 = stream.ConsumeFloatingPoint<double>(); // Fourth double parameter
   60|     53|    double x3 = stream.ConsumeFloatingPoint<double>(); // Fifth double parameter
   61|     53|    double y3 = stream.ConsumeFloatingPoint<double>(); // Sixth double parameter
   62|     53|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   63|     53|    int intParam = stream.ConsumeIntegral<int>(); // Integer parameter
   64|     53|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   65|     53|    std::vector<Unicode> unicodeArray(unicodeSize); // Unicode array
   66|       |
   67|       |    // Fill the Unicode array with fuzzed data
   68|    757|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (68:24): [True: 704, False: 53]
  ------------------
   69|    704|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill with fuzzed values
   70|    704|    }
   71|       |
   72|       |    // Consume additional integer parameter
   73|     53|    int intParam2 = stream.ConsumeIntegral<int>(); // Second integer parameter
   74|     53|    GBool boolParam1 = stream.ConsumeBool(); // First boolean parameter
   75|     53|    GBool boolParam2 = stream.ConsumeBool(); // Second boolean parameter
   76|     53|    GBool boolParam3 = stream.ConsumeBool(); // Third boolean parameter
   77|       |
   78|       |    // Call the function under test
   79|     53|    SplashOutputDev splashOutputDev;
   80|     53|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   81|     53|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, intParam, unicodeArray.data(), unicodeSize, boolParam1, boolParam2, boolParam3);
   82|     53|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   83|     53|auto end_target = std::chrono::high_resolution_clock::now();//erase
   84|     53|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   85|       |
   86|     53|    return 0;
   87|     53|}
_ZN8GfxStateC2Ev:
   19|     53|    GfxState() {
   20|       |        // Initialize members
   21|     53|        fontSize = 12; // Default font size
   22|     53|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   23|     53|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   43|     53|    void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intParam, Unicode *unicodeArray, int unicodeSize, GBool boolParam1, GBool boolParam2, GBool boolParam3) {
   44|       |        // Implementation of drawChar (omitted for brevity)
   45|       |        // For example, just printing the state (in a real implementation, this would do something meaningful)
   46|     53|        printf("Drawing char: %u at (%f, %f) with font size: %d\n", charCode, x1, y1, state->fontSize);
   47|     53|    }

