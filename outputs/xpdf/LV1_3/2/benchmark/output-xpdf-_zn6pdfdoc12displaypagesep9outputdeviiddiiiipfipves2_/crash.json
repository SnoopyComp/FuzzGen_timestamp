{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "50.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint> // For integral types\\n#include <vector>  // For std::vector\\n#include <string>  // For std::string\\n#include <iostream> // For std::cerr, if needed for debugging\\n\\n// Assuming necessary headers for OutputDev, GBool, and DW_TAG_subroutine_typeInfinite_loop are available\\nclass OutputDev {\\n    // Placeholder for OutputDev class definition\\n};\\n\\nusing GBool = bool; // Assuming GBool is a boolean type\\nusing DW_TAG_subroutine_typeInfinite_loop = int; // Placeholder for DW_TAG_subroutine_typeInfinite_loop definition\\n\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {\\n        // Placeholder for the actual implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    OutputDev outputDev; // Create an instance of OutputDev (not null)\\n    \\n    // Consume integers for page range\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100);   // Page end between 1 and 100\\n\\n    // Ensure pageEnd is greater than or equal to pageStart\\n    if (pageEnd < pageStart) {\\n        pageEnd = pageStart; // Adjust to ensure valid range\\n    }\\n\\n    // Consume doubles for x and y coordinates\\n    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate\\n\\n    // Consume an integer for zoom level\\n    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10\\n\\n    // Consume boolean flags\\n    GBool crop = stream.ConsumeBool(); // Crop flag\\n    GBool rotate = stream.ConsumeBool(); // Rotate flag\\n    GBool print = stream.ConsumeBool(); // Print flag\\n\\n    // Create a subroutine type pointer (not null)\\n    DW_TAG_subroutine_typeInfinite_loop subroutineType;\\n    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;\\n\\n    // Pointer to user data (can be initialized to nullptr)\\n    void *userData = nullptr; // Assuming this can be null for the test\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, crop, rotate, print, subroutinePtr, userData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "50.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint>\\n#include <vector>\\n#include <string>\\n\\n// Assuming necessary includes for OutputDev, GBool, and DW_TAG_subroutine_typeInfinite_loop are available\\nclass OutputDev {\\n    // Placeholder for OutputDev class definition\\n};\\n\\nusing GBool = bool; // Assuming GBool is a boolean type\\nusing DW_TAG_subroutine_typeInfinite_loop = int; // Placeholder for DW_TAG_subroutine_typeInfinite_loop definition\\n\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {\\n        // Placeholder for the actual implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    // Create a FuzzedDataProvider to consume the input data\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    OutputDev outputDev; // Create an instance of OutputDev (not null)\\n    \\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100\\n    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate\\n    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10\\n    GBool crop = stream.ConsumeBool(); // Crop flag\\n    GBool rotate = stream.ConsumeBool(); // Rotate flag\\n    GBool print = stream.ConsumeBool(); // Print flag\\n    \\n    // Create a subroutine type pointer (not null)\\n    DW_TAG_subroutine_typeInfinite_loop subroutineType;\\n    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;\\n\\n    // Pointer to void, can be initialized to nullptr or some valid data\\n    void *userData = nullptr; // Assuming this can be null for the test\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, crop, rotate, print, subroutinePtr, userData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}