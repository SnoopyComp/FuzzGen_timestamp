LLVMFuzzerTestOneInput:
   32|     12|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   33|     12|auto start_target = std::chrono::high_resolution_clock::now();//erase
   34|     12|    FuzzedDataProvider stream(data, size);
   35|       |
   36|       |    // Initialize parameters for the function
   37|     12|    OutputDev outputDev; // Create an instance of OutputDev (not null)
   38|       |    
   39|     12|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100
   40|     12|    double x1 = stream.ConsumeFloatingPoint<double>(); // X coordinate
   41|     12|    double y1 = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   42|     12|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100
   43|     12|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (43:18): [True: 1, False: 11]
  ------------------
   44|     12|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (44:20): [True: 1, False: 11]
  ------------------
   45|     12|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (45:19): [True: 0, False: 12]
  ------------------
   46|     12|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   47|     12|    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Width between 1 and 1000
   48|     12|    int height = stream.ConsumeIntegralInRange<int>(1, 1000); // Height between 1 and 1000
   49|     12|    int depth = stream.ConsumeIntegralInRange<int>(1, 10); // Depth between 1 and 10
   50|       |
   51|       |    // Create a subroutine type pointer (not null)
   52|     12|    DW_TAG_subroutine_typeInfinite_loop subroutineType;
   53|     12|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   54|       |
   55|       |    // Pointer to void, can be initialized to nullptr or some valid data
   56|     12|    void *userData = nullptr; // Assuming this can be null for the test
   57|       |
   58|       |    // Call the function under test
   59|     12|    PDFDoc pdfDoc;
   60|     12|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   61|     12|    pdfDoc.displayPageSlice(&outputDev, pageStart, x1, y1, pageEnd, crop, rotate, print, zoom, width, height, depth, subroutinePtr, userData);
   62|     12|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   63|     12|auto end_target = std::chrono::high_resolution_clock::now();//erase
   64|     12|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   65|       |
   66|     12|    return 0;
   67|     12|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   27|     12|    void displayPageSlice(OutputDev *outputDev, int pageStart, double x1, double y1, int pageEnd, GBool crop, GBool rotate, GBool print, int zoom, int width, int height, int depth, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   28|       |        // Placeholder for the actual implementation
   29|     12|    }

