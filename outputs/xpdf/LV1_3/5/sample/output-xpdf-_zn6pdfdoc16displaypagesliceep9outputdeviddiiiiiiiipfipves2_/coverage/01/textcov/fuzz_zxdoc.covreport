LLVMFuzzerTestOneInput:
   33|     16|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|     16|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|     16|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize parameters for the function
   38|     16|    OutputDev outputDev; // Create a non-null instance of OutputDev
   39|     16|    int pageNum = stream.ConsumeIntegralInRange<int>(1, 100); // Page number between 1 and 100
   40|     16|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   41|     16|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   42|     16|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   43|     16|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (43:18): [True: 4, False: 12]
  ------------------
   44|     16|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (44:20): [True: 2, False: 14]
  ------------------
   45|     16|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (45:19): [True: 2, False: 14]
  ------------------
   46|       |
   47|       |    // Create a subroutine type pointer (not null)
   48|     16|    DW_TAG_subroutine_typeInfinite_loop subroutineType;
   49|     16|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   50|       |
   51|       |    // Additional integer parameters
   52|     16|    int param1 = stream.ConsumeIntegral<int>(); // First additional parameter
   53|     16|    int param2 = stream.ConsumeIntegral<int>(); // Second additional parameter
   54|     16|    int param3 = stream.ConsumeIntegral<int>(); // Third additional parameter
   55|     16|    int param4 = stream.ConsumeIntegral<int>(); // Fourth additional parameter
   56|       |
   57|       |    // Call the function under test
   58|     16|    PDFDoc pdfDoc;
   59|     16|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   60|     16|    pdfDoc.displayPageSlice(&outputDev, pageNum, x, y, zoom, crop, rotate, print, param1, param2, param3, param4, subroutinePtr, nullptr);
   61|     16|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   62|     16|auto end_target = std::chrono::high_resolution_clock::now();//erase
   63|     16|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   64|       |
   65|     16|    return 0;
   66|     16|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   28|     16|    void displayPageSlice(OutputDev *outputDev, int pageNum, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int param1, int param2, int param3, int param4, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   29|       |        // Placeholder for the actual implementation
   30|     16|    }

