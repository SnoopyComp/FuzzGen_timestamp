LLVMFuzzerTestOneInput:
   47|     69|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   48|     69|auto start_target = std::chrono::high_resolution_clock::now();//erase
   49|     69|    FuzzedDataProvider stream(data, size);
   50|       |
   51|       |    // Create an instance of SplashOutputDev
   52|     69|    SplashOutputDev splashOutputDev;
   53|       |
   54|       |    // Create a GfxState object
   55|     69|    GfxState gfxState;
   56|       |
   57|       |    // Use the fuzzed data to influence the GfxState
   58|     69|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   59|     69|    gfxState.setFontSize(fontSize);
   60|       |
   61|       |    // Consume a string from the fuzzed data for the font name
   62|     69|    std::string fontName = stream.ConsumeRandomLengthString(49); // Max length 49 to fit in the buffer
   63|     69|    gfxState.setFontName(fontName.c_str());
   64|       |
   65|       |    // Prepare parameters for the drawChar function
   66|     69|    double x1 = stream.ConsumeFloatingPoint<double>();
   67|     69|    double y1 = stream.ConsumeFloatingPoint<double>();
   68|     69|    double x2 = stream.ConsumeFloatingPoint<double>();
   69|     69|    double y2 = stream.ConsumeFloatingPoint<double>();
   70|     69|    double x3 = stream.ConsumeFloatingPoint<double>();
   71|     69|    double y3 = stream.ConsumeFloatingPoint<double>();
   72|     69|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   73|     69|    int intParam = stream.ConsumeIntegral<int>(); // Integer parameter
   74|     69|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   75|     69|    std::vector<Unicode> unicodeArray(unicodeSize); // Create a Unicode array
   76|    757|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (76:24): [True: 688, False: 69]
  ------------------
   77|    688|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array with fuzzed data
   78|    688|    }
   79|     69|    int intParam2 = stream.ConsumeIntegral<int>(); // Second integer parameter
   80|     69|    GBool boolParam1 = stream.ConsumeBool(); // First boolean parameter
   81|     69|    GBool boolParam2 = stream.ConsumeBool(); // Second boolean parameter
   82|     69|    GBool boolParam3 = stream.ConsumeBool(); // Third boolean parameter
   83|       |
   84|       |    // Call the function under test
   85|     69|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   86|     69|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);
   87|     69|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   88|     69|auto end_target = std::chrono::high_resolution_clock::now();//erase
   89|     69|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   90|       |
   91|     69|    return 0;
   92|     69|}
_ZN8GfxStateC2Ev:
   18|     69|    GfxState() {
   19|       |        // Initialize members
   20|     69|        fontSize = 12; // Default font size
   21|     69|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     69|    }
_ZN8GfxState11setFontSizeEi:
   24|     69|    void setFontSize(int size) {
   25|     69|        fontSize = size;
   26|     69|    }
_ZN8GfxState11setFontNameEPKc:
   28|     69|    void setFontName(const char* name) {
   29|     69|        strncpy(fontName, name, sizeof(fontName) - 1);
   30|     69|        fontName[sizeof(fontName) - 1] = '\0'; // Ensure null-termination
   31|     69|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     69|    void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intParam, Unicode *unicodeArray, int intParam2, GBool boolParam1, GBool boolParam2, GBool boolParam3) {
   41|       |        // Placeholder implementation for drawChar
   42|       |        // In a real implementation, this would do something meaningful with the parameters
   43|     69|    }

