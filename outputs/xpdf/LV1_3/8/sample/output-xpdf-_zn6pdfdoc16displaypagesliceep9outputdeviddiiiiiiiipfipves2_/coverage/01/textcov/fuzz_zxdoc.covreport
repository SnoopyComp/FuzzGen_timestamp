LLVMFuzzerTestOneInput:
   33|      9|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|      9|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|      9|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize parameters for the function
   38|      9|    OutputDev outputDev; // Create an instance of OutputDev
   39|      9|    int pageNum = stream.ConsumeIntegralInRange<int>(1, 100); // Page number between 1 and 100
   40|      9|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   41|      9|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   42|      9|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   43|      9|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (43:18): [True: 0, False: 9]
  ------------------
   44|      9|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (44:20): [True: 0, False: 9]
  ------------------
   45|      9|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (45:19): [True: 0, False: 9]
  ------------------
   46|      9|    int startPage = stream.ConsumeIntegralInRange<int>(1, 100); // Start page
   47|      9|    int endPage = stream.ConsumeIntegralInRange<int>(1, 100); // End page
   48|      9|    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Width
   49|      9|    int height = stream.ConsumeIntegralInRange<int>(1, 1000); // Height
   50|       |
   51|       |    // Create an instance of DW_TAG_subroutine_typeInfinite_loop
   52|      9|    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Non-null instance
   53|       |
   54|       |    // Pointer to void, can be initialized to nullptr or some valid data
   55|      9|    void *userData = nullptr; // Assuming this can be null for the test
   56|       |
   57|       |    // Call the function under test
   58|      9|    PDFDoc pdfDoc;
   59|      9|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   60|      9|    pdfDoc.displayPageSlice(&outputDev, pageNum, x, y, zoom, crop, rotate, print, startPage, endPage, width, height, &subroutineType, userData);
   61|      9|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   62|      9|auto end_target = std::chrono::high_resolution_clock::now();//erase
   63|      9|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   64|       |
   65|      9|    return 0;
   66|      9|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   28|      9|    void displayPageSlice(OutputDev *outputDev, int pageNum, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int startPage, int endPage, int width, int height, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   29|       |        // Function implementation (placeholder)
   30|      9|    }

