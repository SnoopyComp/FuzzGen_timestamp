LLVMFuzzerTestOneInput:
   33|     10|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|     10|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|     10|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize parameters for the function
   38|     10|    OutputDev outputDev; // Create an instance of OutputDev
   39|     10|    int pageNum = stream.ConsumeIntegralInRange<int>(1, 100); // Page number between 1 and 100
   40|     10|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   41|     10|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   42|     10|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   43|     10|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (43:18): [True: 0, False: 10]
  ------------------
   44|     10|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (44:20): [True: 0, False: 10]
  ------------------
   45|     10|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (45:19): [True: 0, False: 10]
  ------------------
   46|       |
   47|       |    // Consume integers for page range
   48|     10|    int startPage = stream.ConsumeIntegralInRange<int>(1, 100); // Start page between 1 and 100
   49|     10|    int endPage = stream.ConsumeIntegralInRange<int>(1, 100); // End page between 1 and 100
   50|     10|    int totalPages = stream.ConsumeIntegralInRange<int>(1, 100); // Total pages between 1 and 100
   51|     10|    int flags = stream.ConsumeIntegral<int>(); // Flags
   52|       |
   53|       |    // Create an instance of DW_TAG_subroutine_typeInfinite_loop
   54|     10|    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Non-null instance
   55|       |
   56|       |    // Pointer to void, can be initialized to nullptr or some valid data
   57|     10|    void *userData = nullptr; // Assuming this can be null for the test
   58|       |
   59|       |    // Call the function under test
   60|     10|    PDFDoc pdfDoc;
   61|     10|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   62|     10|    pdfDoc.displayPageSlice(&outputDev, pageNum, x, y, zoom, crop, rotate, print, startPage, endPage, totalPages, flags, &subroutineType, userData);
   63|     10|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   64|     10|auto end_target = std::chrono::high_resolution_clock::now();//erase
   65|     10|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   66|       |
   67|     10|    return 0;
   68|     10|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   27|     10|    void displayPageSlice(OutputDev *outputDev, int pageNum, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int startPage, int endPage, int totalPages, int flags, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   28|       |        // Function implementation (for demonstration purposes)
   29|       |        // This is just a placeholder; actual implementation would do something meaningful
   30|     10|    }

