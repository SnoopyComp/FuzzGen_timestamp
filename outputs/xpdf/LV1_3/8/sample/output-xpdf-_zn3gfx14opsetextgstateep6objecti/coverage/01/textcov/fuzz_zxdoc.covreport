_ZN3Gfx14opSetExtGStateEPNS_6ObjectEi:
   34|     25|    void opSetExtGState(Object *obj, int state) {
   35|       |        // Example implementation of the function
   36|     25|        if (obj) {
  ------------------
  |  Branch (36:13): [True: 25, False: 0]
  ------------------
   37|     25|            obj->id = state; // Set object's state based on input
   38|       |            // Additional logic can be added here
   39|     25|        }
   40|     25|    }
LLVMFuzzerTestOneInput:
   43|     25|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   44|     25|auto start_target = std::chrono::high_resolution_clock::now();//erase
   45|       |    // Create a FuzzedDataProvider to consume the input data
   46|     25|    FuzzedDataProvider stream(data, size);
   47|       |
   48|       |    // Create an Object instance with fuzzed data
   49|     25|    int id = stream.ConsumeIntegral<int>(); // Fuzzed id
   50|     25|    std::string name = stream.ConsumeRandomLengthString(49); // Random string for name
   51|     25|    Gfx::Object obj(id, name.c_str()); // Initialize Object with fuzzed values
   52|       |
   53|       |    // Consume an integer for the state parameter
   54|     25|    int state = stream.ConsumeIntegral<int>(); // Fuzzed state
   55|       |
   56|       |    // Call the function under test
   57|     25|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   58|     25|    Gfx::opSetExtGState(&obj, state);
   59|     25|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   60|     25|auto end_target = std::chrono::high_resolution_clock::now();//erase
   61|     25|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   62|       |
   63|     25|    return 0;
   64|     25|}
_ZN3Gfx6ObjectC2EiPKc:
   23|     25|        Object(int id, const char* name) : id(id) {
   24|     25|            strncpy(this->name, name, sizeof(this->name) - 1);
   25|     25|            this->name[sizeof(this->name) - 1] = '\0'; // Ensure null-termination
   26|     25|        }

