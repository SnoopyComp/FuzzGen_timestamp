LLVMFuzzerTestOneInput:
   47|     40|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   48|     40|auto start_target = std::chrono::high_resolution_clock::now();//erase
   49|     40|    FuzzedDataProvider stream(data, size);
   50|       |
   51|       |    // Create an instance of SplashOutputDev
   52|     40|    SplashOutputDev splashOutputDev;
   53|       |
   54|       |    // Create a GfxState object
   55|     40|    GfxState gfxState;
   56|       |
   57|       |    // Use the fuzzed data to influence the GfxState
   58|     40|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   59|     40|    gfxState.setFontSize(fontSize);
   60|       |
   61|       |    // Consume parameters for the drawChar function
   62|     40|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   63|     40|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   64|     40|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   65|     40|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   66|     40|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   67|     40|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   68|     40|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   69|     40|    int unicodeSize = stream.ConsumeIntegralInRange<int>(1, 10); // Size for Unicode array
   70|     40|    std::vector<Unicode> unicodeArray(unicodeSize); // Create a Unicode array
   71|    107|    for (int i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (71:21): [True: 67, False: 40]
  ------------------
   72|     67|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array with fuzzed data
   73|     67|    }
   74|     40|    GBool fill = stream.ConsumeBool(); // Fill flag
   75|     40|    GBool stroke = stream.ConsumeBool(); // Stroke flag
   76|     40|    GBool clip = stream.ConsumeBool(); // Clip flag
   77|       |
   78|       |    // Call the function under test
   79|     40|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   80|     40|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeSize, fill, stroke, clip);
   81|     40|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   82|     40|auto end_target = std::chrono::high_resolution_clock::now();//erase
   83|     40|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   84|       |
   85|     40|    return 0;
   86|     40|}
_ZN8GfxStateC2Ev:
   17|     40|    GfxState() {
   18|       |        // Initialize members
   19|     40|        fontSize = 12; // Default font size
   20|     40|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   21|     40|    }
_ZN8GfxState11setFontSizeEi:
   23|     40|    void setFontSize(int size) {
   24|     40|        fontSize = size;
   25|     40|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   39|     40|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeSize, GBool fill, GBool stroke, GBool clip) {
   40|       |        // Implementation of drawChar (omitted for brevity)
   41|       |        // For example, just printing the state (in a real implementation, this would do something meaningful)
   42|     40|        printf("Drawing char: %u at (%f, %f) with font size: %d\n", charCode, x, y, fontSize);
   43|     40|    }

