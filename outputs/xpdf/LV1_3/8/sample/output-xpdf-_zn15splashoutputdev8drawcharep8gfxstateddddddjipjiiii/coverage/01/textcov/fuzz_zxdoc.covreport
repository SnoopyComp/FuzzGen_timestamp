LLVMFuzzerTestOneInput:
   32|     46|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   33|     46|auto start_target = std::chrono::high_resolution_clock::now();//erase
   34|     46|    FuzzedDataProvider stream(data, size);
   35|       |
   36|       |    // Initialize parameters for the function
   37|     46|    GfxState gfxState; // Create an instance of GfxState
   38|       |
   39|     46|    double x1 = stream.ConsumeFloatingPoint<double>();
   40|     46|    double y1 = stream.ConsumeFloatingPoint<double>();
   41|     46|    double x2 = stream.ConsumeFloatingPoint<double>();
   42|     46|    double y2 = stream.ConsumeFloatingPoint<double>();
   43|     46|    double x3 = stream.ConsumeFloatingPoint<double>();
   44|     46|    double y3 = stream.ConsumeFloatingPoint<double>();
   45|     46|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   46|     46|    int intParam = stream.ConsumeIntegral<int>(); // Integer parameter
   47|       |
   48|       |    // Consume a size for the Unicode array
   49|     46|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size between 1 and 100
   50|     46|    std::vector<Unicode> unicodeArray(unicodeSize); // Create a Unicode array
   51|    435|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (51:24): [True: 389, False: 46]
  ------------------
   52|    389|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the array with fuzzed data
   53|    389|    }
   54|       |
   55|     46|    GBool boolParam1 = stream.ConsumeBool(); // First boolean parameter
   56|     46|    GBool boolParam2 = stream.ConsumeBool(); // Second boolean parameter
   57|     46|    GBool boolParam3 = stream.ConsumeBool(); // Third boolean parameter
   58|       |
   59|       |    // Create an instance of SplashOutputDev
   60|     46|    SplashOutputDev splashOutputDev;
   61|       |
   62|       |    // Call the function under test
   63|     46|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   64|     46|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, intParam, unicodeArray.data(), static_cast<int>(unicodeSize), boolParam1, boolParam2, boolParam3);
   65|     46|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   66|     46|auto end_target = std::chrono::high_resolution_clock::now();//erase
   67|     46|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   68|       |
   69|     46|    return 0;
   70|     46|}
_ZN8GfxStateC2Ev:
   17|     46|    GfxState() : fontSize(12) {} // Default constructor
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   26|     46|    void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intParam, Unicode *unicodeArray, int unicodeSize, GBool boolParam1, GBool boolParam2, GBool boolParam3) {
   27|       |        // Implementation of drawChar (omitted for brevity)
   28|       |        // This is just a placeholder to demonstrate the function call
   29|     46|    }

