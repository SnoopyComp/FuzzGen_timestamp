LLVMFuzzerTestOneInput:
   31|     21|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   32|     21|auto start_target = std::chrono::high_resolution_clock::now();//erase
   33|     21|    FuzzedDataProvider stream(data, size);
   34|       |
   35|       |    // Initialize parameters for the function
   36|     21|    OutputDev outputDev; // Create an instance of OutputDev (not null)
   37|       |    
   38|     21|    int param1 = stream.ConsumeIntegral<int>(); // First integer parameter
   39|     21|    double param2 = stream.ConsumeFloatingPoint<double>(); // First double parameter
   40|     21|    double param3 = stream.ConsumeFloatingPoint<double>(); // Second double parameter
   41|     21|    int param4 = stream.ConsumeIntegral<int>(); // Second integer parameter
   42|     21|    GBool param5 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // First boolean parameter
  ------------------
  |  Branch (42:20): [True: 2, False: 19]
  ------------------
   43|     21|    GBool param6 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Second boolean parameter
  ------------------
  |  Branch (43:20): [True: 1, False: 20]
  ------------------
   44|     21|    GBool param7 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Third boolean parameter
  ------------------
  |  Branch (44:20): [True: 1, False: 20]
  ------------------
   45|     21|    int param8 = stream.ConsumeIntegral<int>(); // Third integer parameter
   46|     21|    int param9 = stream.ConsumeIntegral<int>(); // Fourth integer parameter
   47|     21|    int param10 = stream.ConsumeIntegral<int>(); // Fifth integer parameter
   48|     21|    int param11 = stream.ConsumeIntegral<int>(); // Sixth integer parameter
   49|       |
   50|       |    // Create an instance of DW_TAG_subroutine_typeInfinite_loop (not null)
   51|     21|    DW_TAG_subroutine_typeInfinite_loop subroutineType; 
   52|     21|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType; // Pointer to the subroutine type
   53|       |
   54|       |    // Call the function under test
   55|     21|    PDFDoc pdfDoc;
   56|     21|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   57|     21|    pdfDoc.displayPageSlice(&outputDev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, subroutinePtr, nullptr);
   58|     21|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   59|     21|auto end_target = std::chrono::high_resolution_clock::now();//erase
   60|     21|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   61|       |
   62|     21|    return 0;
   63|     21|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   26|     21|    void displayPageSlice(OutputDev *outputDev, int param1, double param2, double param3, int param4, GBool param5, GBool param6, GBool param7, int param8, int param9, int param10, int param11, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   27|       |        // Placeholder for the actual implementation
   28|     21|    }

