LLVMFuzzerTestOneInput:
   31|     16|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   32|     16|auto start_target = std::chrono::high_resolution_clock::now();//erase
   33|     16|    FuzzedDataProvider stream(data, size);
   34|       |
   35|       |    // Initialize parameters for the function
   36|     16|    OutputDev outputDev; // Create an instance of OutputDev
   37|     16|    int pageNum = stream.ConsumeIntegralInRange<int>(1, 100); // Page number between 1 and 100
   38|     16|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   39|     16|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   40|     16|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   41|     16|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (41:18): [True: 5, False: 11]
  ------------------
   42|     16|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (42:20): [True: 6, False: 10]
  ------------------
   43|     16|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (43:19): [True: 5, False: 11]
  ------------------
   44|       |
   45|       |    // Create an instance of DW_TAG_subroutine_typeInfinite_loop
   46|     16|    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Non-null instance
   47|     16|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   48|       |
   49|       |    // Additional integer parameters
   50|     16|    int param1 = stream.ConsumeIntegral<int>();
   51|     16|    int param2 = stream.ConsumeIntegral<int>();
   52|     16|    int param3 = stream.ConsumeIntegral<int>();
   53|     16|    int param4 = stream.ConsumeIntegral<int>();
   54|       |
   55|       |    // Call the function under test
   56|     16|    PDFDoc pdfDoc;
   57|     16|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   58|     16|    pdfDoc.displayPageSlice(&outputDev, pageNum, x, y, zoom, crop, rotate, print, param1, param2, param3, param4, subroutinePtr, nullptr);
   59|     16|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   60|     16|auto end_target = std::chrono::high_resolution_clock::now();//erase
   61|     16|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   62|       |
   63|     16|    return 0;
   64|     16|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   26|     16|    void displayPageSlice(OutputDev *outputDev, int pageNum, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int param1, int param2, int param3, int param4, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   27|       |        // Function implementation (placeholder)
   28|     16|    }

