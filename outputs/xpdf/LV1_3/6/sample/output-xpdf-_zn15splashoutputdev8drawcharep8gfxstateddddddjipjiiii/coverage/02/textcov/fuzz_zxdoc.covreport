LLVMFuzzerTestOneInput:
   46|     57|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   47|     57|auto start_target = std::chrono::high_resolution_clock::now();//erase
   48|     57|    FuzzedDataProvider stream(data, size);
   49|       |
   50|       |    // Create an instance of SplashOutputDev
   51|     57|    SplashOutputDev splashOutputDev;
   52|       |
   53|       |    // Create a GfxState object
   54|     57|    GfxState gfxState;
   55|       |
   56|       |    // Use the fuzzed data to influence the GfxState
   57|     57|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   58|     57|    gfxState.setFontSize(fontSize);
   59|       |
   60|       |    // Consume a string from the fuzzed data for the font name
   61|     57|    std::string fontName = stream.ConsumeRandomLengthString(49); // Max length 49 to fit in the buffer
   62|     57|    gfxState.setFontName(fontName.c_str());
   63|       |
   64|       |    // Prepare parameters for drawChar
   65|     57|    double x1 = stream.ConsumeFloatingPoint<double>();
   66|     57|    double y1 = stream.ConsumeFloatingPoint<double>();
   67|     57|    double x2 = stream.ConsumeFloatingPoint<double>();
   68|     57|    double y2 = stream.ConsumeFloatingPoint<double>();
   69|     57|    double x3 = stream.ConsumeFloatingPoint<double>();
   70|     57|    double y3 = stream.ConsumeFloatingPoint<double>();
   71|     57|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   72|     57|    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Number of Unicode characters
   73|     57|    std::vector<Unicode> unicodeArray(unicodeCount);
   74|       |    
   75|    164|    for (int i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (75:21): [True: 107, False: 57]
  ------------------
   76|    107|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill unicode array with random values
   77|    107|    }
   78|       |
   79|     57|    GBool flag1 = stream.ConsumeBool(); // First boolean parameter
   80|     57|    GBool flag2 = stream.ConsumeBool(); // Second boolean parameter
   81|     57|    GBool flag3 = stream.ConsumeBool(); // Third boolean parameter
   82|       |
   83|       |    // Call the function under test
   84|     57|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   85|     57|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, fontSize, unicodeArray.data(), unicodeCount, flag1, flag2, flag3);
   86|     57|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   87|     57|auto end_target = std::chrono::high_resolution_clock::now();//erase
   88|     57|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   89|       |
   90|     57|    return 0;
   91|     57|}
_ZN8GfxStateC2Ev:
   17|     57|    GfxState() {
   18|       |        // Initialize members
   19|     57|        fontSize = 12; // Default font size
   20|     57|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   21|     57|    }
_ZN8GfxState11setFontSizeEi:
   23|     57|    void setFontSize(int size) {
   24|     57|        fontSize = size;
   25|     57|    }
_ZN8GfxState11setFontNameEPKc:
   27|     57|    void setFontName(const char* name) {
   28|     57|        strncpy(fontName, name, sizeof(fontName) - 1);
   29|     57|        fontName[sizeof(fontName) - 1] = '\0'; // Ensure null-termination
   30|     57|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   39|     57|    void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   40|       |        // Implementation of drawChar (omitted for brevity)
   41|       |        // This is just for demonstration and should be replaced with actual logic.
   42|     57|    }

