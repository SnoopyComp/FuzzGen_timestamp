{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "56.25",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint> // For uint32_t\\n#include <vector>  // For std::vector\\n#include <string>  // For std::string\\n\\n// Assuming the necessary headers for OutputDev, GBool, and DW_TAG_subroutine_typeInfinite_loop are available\\nclass OutputDev {\\n    // Placeholder for OutputDev class definition\\n};\\n\\nenum class GBool {\\n    gFalse = 0,\\n    gTrue = 1\\n};\\n\\n// Placeholder for DW_TAG_subroutine_typeInfinite_loop\\nstruct DW_TAG_subroutine_typeInfinite_loop {\\n    // Implementation details for DW_TAG_subroutine_typeInfinite_loop\\n};\\n\\n// Definition of PDFDoc class with the displayPageSlice method\\nclass PDFDoc {\\npublic:\\n    void displayPageSlice(OutputDev *, int, double, double, int, GBool, GBool, GBool, int, int, int, int, DW_TAG_subroutine_typeInfinite_loop *, void *) {\\n        // Implementation details for displayPageSlice\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    OutputDev outputDev; // Create an instance of OutputDev (not null)\\n    \\n    int intParam1 = stream.ConsumeIntegralInRange<int>(1, 100); // Random integer between 1 and 100\\n    double doubleParam1 = stream.ConsumeFloatingPoint<double>(); // First double parameter\\n    double doubleParam2 = stream.ConsumeFloatingPoint<double>(); // Second double parameter\\n    int intParam2 = stream.ConsumeIntegralInRange<int>(1, 10); // Second integer parameter\\n    GBool boolParam1 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // First boolean parameter\\n    GBool boolParam2 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Second boolean parameter\\n    GBool boolParam3 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Third boolean parameter\\n    int intParam3 = stream.ConsumeIntegral<int>(); // Third integer parameter\\n    int intParam4 = stream.ConsumeIntegral<int>(); // Fourth integer parameter\\n    int intParam5 = stream.ConsumeIntegral<int>(); // Fifth integer parameter\\n    int intParam6 = stream.ConsumeIntegral<int>(); // Sixth integer parameter\\n\\n    // Create an instance of DW_TAG_subroutine_typeInfinite_loop\\n    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Non-null instance\\n\\n    // Pointer to void, can be initialized to nullptr or some valid data\\n    void *voidPtr = nullptr; // Assuming this can be null for the test\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    pdfDoc.displayPageSlice(&outputDev, intParam1, doubleParam1, doubleParam2, intParam2, boolParam1, boolParam2, boolParam3, intParam3, intParam4, intParam5, intParam6, &subroutineType, voidPtr);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "56.25",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint> // For uint32_t\\n#include <vector>  // For std::vector\\n#include <string>  // For std::string\\n\\n// Assuming the necessary classes and types are defined somewhere\\nclass OutputDev {\\n    // Placeholder for OutputDev class definition\\n};\\n\\nusing GBool = bool; // Assuming GBool is a boolean type\\nusing DW_TAG_subroutine_typeInfinite_loop = int; // Placeholder for DW_TAG_subroutine_typeInfinite_loop definition\\n\\nclass PDFDoc {\\npublic:\\n    void displayPageSlice(OutputDev *outputDev, int pageStart, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int param1, int param2, int param3, int param4, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {\\n        // Placeholder for the actual implementation\\n        // This would contain logic to handle the page display\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    OutputDev outputDev; // Create an instance of OutputDev (not null)\\n    \\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100\\n    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate\\n    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10\\n    GBool crop = stream.ConsumeBool(); // Crop flag\\n    GBool rotate = stream.ConsumeBool(); // Rotate flag\\n    GBool print = stream.ConsumeBool(); // Print flag\\n\\n    // Create a subroutine type pointer (not null)\\n    DW_TAG_subroutine_typeInfinite_loop subroutineType;\\n    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;\\n\\n    // Additional integer parameters\\n    int param1 = stream.ConsumeIntegral<int>(); // Additional parameter\\n    int param2 = stream.ConsumeIntegral<int>(); // Additional parameter\\n    int param3 = stream.ConsumeIntegral<int>(); // Additional parameter\\n    int param4 = stream.ConsumeIntegral<int>(); // Additional parameter\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    pdfDoc.displayPageSlice(&outputDev, pageStart, x, y, zoom, crop, rotate, print, param1, param2, param3, param4, subroutinePtr, nullptr);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}