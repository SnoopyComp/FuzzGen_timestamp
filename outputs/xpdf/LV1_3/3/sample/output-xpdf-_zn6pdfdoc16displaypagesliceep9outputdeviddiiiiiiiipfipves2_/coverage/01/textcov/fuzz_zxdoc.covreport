LLVMFuzzerTestOneInput:
   33|     17|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|     17|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|     17|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize parameters for the function
   38|     17|    OutputDev outputDev; // Create an instance of OutputDev (not null)
   39|       |    
   40|     17|    int intParam1 = stream.ConsumeIntegralInRange<int>(1, 100); // Random integer between 1 and 100
   41|     17|    double doubleParam1 = stream.ConsumeFloatingPoint<double>(); // First double parameter
   42|     17|    double doubleParam2 = stream.ConsumeFloatingPoint<double>(); // Second double parameter
   43|     17|    int intParam2 = stream.ConsumeIntegralInRange<int>(1, 10); // Second integer parameter
   44|     17|    GBool boolParam1 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // First boolean parameter
  ------------------
  |  Branch (44:24): [True: 2, False: 15]
  ------------------
   45|     17|    GBool boolParam2 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Second boolean parameter
  ------------------
  |  Branch (45:24): [True: 2, False: 15]
  ------------------
   46|     17|    GBool boolParam3 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Third boolean parameter
  ------------------
  |  Branch (46:24): [True: 3, False: 14]
  ------------------
   47|     17|    int intParam3 = stream.ConsumeIntegral<int>(); // Third integer parameter
   48|     17|    int intParam4 = stream.ConsumeIntegral<int>(); // Fourth integer parameter
   49|     17|    int intParam5 = stream.ConsumeIntegral<int>(); // Fifth integer parameter
   50|     17|    int intParam6 = stream.ConsumeIntegral<int>(); // Sixth integer parameter
   51|       |
   52|       |    // Create an instance of DW_TAG_subroutine_typeInfinite_loop
   53|     17|    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Non-null instance
   54|       |
   55|       |    // Pointer to void, can be initialized to nullptr or some valid data
   56|     17|    void *voidPtr = nullptr; // Assuming this can be null for the test
   57|       |
   58|       |    // Call the function under test
   59|     17|    PDFDoc pdfDoc;
   60|     17|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   61|     17|    pdfDoc.displayPageSlice(&outputDev, intParam1, doubleParam1, doubleParam2, intParam2, boolParam1, boolParam2, boolParam3, intParam3, intParam4, intParam5, intParam6, &subroutineType, voidPtr);
   62|     17|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   63|     17|auto end_target = std::chrono::high_resolution_clock::now();//erase
   64|     17|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   65|       |
   66|     17|    return 0;
   67|     17|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddi5GBoolS2_S2_iiiiP35DW_TAG_subroutine_typeInfinite_loopPv:
   28|     17|    void displayPageSlice(OutputDev *, int, double, double, int, GBool, GBool, GBool, int, int, int, int, DW_TAG_subroutine_typeInfinite_loop *, void *) {
   29|       |        // Implementation details for displayPageSlice
   30|     17|    }

