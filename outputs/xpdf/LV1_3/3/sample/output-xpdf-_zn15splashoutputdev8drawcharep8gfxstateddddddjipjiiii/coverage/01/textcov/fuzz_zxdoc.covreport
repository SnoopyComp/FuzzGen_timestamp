LLVMFuzzerTestOneInput:
   47|     42|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   48|     42|auto start_target = std::chrono::high_resolution_clock::now();//erase
   49|     42|    FuzzedDataProvider stream(data, size);
   50|       |
   51|       |    // Initialize parameters for the function
   52|     42|    GfxState gfxState; // Create an instance of GfxState
   53|       |
   54|       |    // Use the fuzzed data to influence the GfxState
   55|     42|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   56|     42|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   57|     42|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   58|     42|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   59|     42|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   60|     42|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   61|     42|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   62|     42|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100
   63|       |
   64|       |    // Consume a Unicode array
   65|     42|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Count of Unicode characters
   66|     42|    std::vector<Unicode> unicodeArray(unicodeCount);
   67|    117|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (67:24): [True: 75, False: 42]
  ------------------
   68|     75|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array
   69|     75|    }
   70|       |
   71|       |    // Boolean parameters
   72|     42|    GBool fill = stream.ConsumeBool(); // Fill flag
   73|     42|    GBool stroke = stream.ConsumeBool(); // Stroke flag
   74|     42|    GBool clip = stream.ConsumeBool(); // Clip flag
   75|       |
   76|       |    // Call the function under test
   77|     42|    SplashOutputDev splashOutputDev;
   78|     42|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   79|     42|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), fill, stroke, clip);
   80|     42|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   81|     42|auto end_target = std::chrono::high_resolution_clock::now();//erase
   82|     42|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   83|       |
   84|     42|    return 0;
   85|     42|}
_ZN8GfxStateC2Ev:
   17|     42|    GfxState() {
   18|       |        // Initialize members
   19|     42|        fontSize = 12; // Default font size
   20|     42|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   21|     42|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   39|     42|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool fill, GBool stroke, GBool clip) {
   40|       |        // Implementation of drawChar (omitted for brevity)
   41|       |        // For example, just printing the state (in a real implementation, this would do something meaningful)
   42|     42|        printf("Drawing char: %u at (%f, %f) with font size %d\n", charCode, x, y, fontSize);
   43|     42|    }

