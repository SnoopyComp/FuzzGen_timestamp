LLVMFuzzerTestOneInput:
   35|     12|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   36|     12|auto start_target = std::chrono::high_resolution_clock::now();//erase
   37|     12|    FuzzedDataProvider stream(data, size);
   38|       |
   39|       |    // Initialize parameters for the function
   40|     12|    OutputDev outputDev; // Create an instance of OutputDev (not null)
   41|       |    
   42|     12|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100
   43|     12|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100
   44|     12|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   45|     12|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   46|     12|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   47|     12|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (47:18): [True: 0, False: 12]
  ------------------
   48|     12|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (48:20): [True: 0, False: 12]
  ------------------
   49|     12|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (49:19): [True: 0, False: 12]
  ------------------
   50|       |    
   51|       |    // Create a subroutine type pointer (not null)
   52|     12|    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Non-null instance
   53|     12|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   54|       |
   55|       |    // Pointer to void, can be initialized to nullptr or some valid data
   56|     12|    void *userData = nullptr; // Assuming this can be null for the test
   57|       |
   58|       |    // Call the function under test
   59|     12|    PDFDoc pdfDoc;
   60|     12|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   61|     12|    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, crop, rotate, print, subroutinePtr, userData);
   62|     12|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   63|     12|auto end_target = std::chrono::high_resolution_clock::now();//erase
   64|     12|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   65|       |
   66|     12|    return 0;
   67|     12|}
_ZN6PDFDoc12displayPagesEP9OutputDeviiddi5GBoolS2_S2_P35DW_TAG_subroutine_typeInfinite_loopPv:
   27|     12|    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   28|       |        // Implementation details for displayPages
   29|       |        // For demonstration purposes, we can print the parameters
   30|       |        // In a real implementation, this would perform the actual rendering
   31|     12|        printf("Displaying pages from %d to %d at position (%.2f, %.2f) with zoom %d\n", pageStart, pageEnd, x, y, zoom);
   32|     12|    }

