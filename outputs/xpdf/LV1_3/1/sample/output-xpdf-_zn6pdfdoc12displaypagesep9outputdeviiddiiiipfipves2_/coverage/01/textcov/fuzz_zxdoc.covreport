LLVMFuzzerTestOneInput:
   33|      9|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|      9|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|      9|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize parameters for the function
   38|      9|    OutputDev outputDev; // Create an instance of OutputDev
   39|      9|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100
   40|      9|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100
   41|      9|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   42|      9|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   43|      9|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   44|      9|    GBool crop = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Crop flag
  ------------------
  |  Branch (44:18): [True: 0, False: 9]
  ------------------
   45|      9|    GBool rotate = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Rotate flag
  ------------------
  |  Branch (45:20): [True: 0, False: 9]
  ------------------
   46|      9|    GBool print = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse; // Print flag
  ------------------
  |  Branch (46:19): [True: 0, False: 9]
  ------------------
   47|       |
   48|       |    // Create a subroutine type pointer (not null)
   49|      9|    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Non-null instance
   50|      9|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   51|       |
   52|       |    // Pointer to void, can be initialized to nullptr or some valid data
   53|      9|    void *voidPtr = nullptr; // Assuming this can be null for the test
   54|       |
   55|       |    // Call the function under test
   56|      9|    PDFDoc pdfDoc;
   57|      9|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   58|      9|    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, crop, rotate, print, subroutinePtr, voidPtr);
   59|      9|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   60|      9|auto end_target = std::chrono::high_resolution_clock::now();//erase
   61|      9|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   62|       |
   63|      9|    return 0;
   64|      9|}
_ZN6PDFDoc12displayPagesEP9OutputDeviiddi5GBoolS2_S2_P35DW_TAG_subroutine_typeInfinite_loopPv:
   27|      9|    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   28|       |        // Placeholder for the actual implementation
   29|       |        // This is just for demonstration and should be replaced with actual logic.
   30|      9|    }

