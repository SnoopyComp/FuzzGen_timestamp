LLVMFuzzerTestOneInput:
   24|     29|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     29|auto start_target = std::chrono::high_resolution_clock::now();
   26|     29|    FuzzedDataProvider fuzzed_data(data, size);
   27|       |
   28|       |    // Initialize parameters for the function call
   29|     29|    OutputDev outputDev; // Must not be NULL
   30|     29|    int pageStart = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Assuming valid page numbers
   31|     29|    int pageEnd = fuzzed_data.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart
   32|     29|    double zoom = fuzzed_data.ConsumeFloatingPoint<double>(); // Zoom can be any double
   33|     29|    double rotation = fuzzed_data.ConsumeFloatingPointInRange<double>(0.0, 360.0); // Rotation in degrees
   34|     29|    int flags = fuzzed_data.ConsumeIntegral<int>(); // Flags can be any integer
   35|     29|    GBool doPrint = fuzzed_data.ConsumeBool(); // Must not be NULL
   36|     29|    GBool doRender = fuzzed_data.ConsumeBool(); // Must not be NULL
   37|     29|    GBool doAnnotate = fuzzed_data.ConsumeBool(); // Must not be NULL
   38|       |    
   39|       |    // Allocate memory for subroutine
   40|     29|    DW_TAG_subroutine_type subroutine; // Must not be NULL
   41|     29|    void *userData = nullptr;
   42|       |
   43|       |    // Use ConsumeRandomLengthString for userData
   44|     29|    std::string userDataString = fuzzed_data.ConsumeRandomLengthString(100); // Allocate a random length string
   45|     29|    userData = static_cast<void*>(const_cast<char*>(userDataString.c_str())); // Cast to void*
   46|       |
   47|       |    // Call the function under test
   48|     29|    PDFDoc pdfDoc;
   49|     29|	auto start_func = std::chrono::high_resolution_clock::now();
   50|     29|    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoom, rotation, flags, doPrint, doRender, doAnnotate, &subroutine, userData);
   51|     29|	auto end_func = std::chrono::high_resolution_clock::now();
   52|     29|auto end_target = std::chrono::high_resolution_clock::now();
   53|     29|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   54|       |
   55|     29|    return 0;
   56|     29|}
_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbP22DW_TAG_subroutine_typePv:
   19|     29|    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double zoom, double rotation, int flags, GBool doPrint, GBool doRender, GBool doAnnotate, DW_TAG_subroutine_type *subroutine, void *userData) {
   20|       |        // Implementation of displayPages
   21|     29|    }

