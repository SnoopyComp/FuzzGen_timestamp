LLVMFuzzerTestOneInput:
   23|     51|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|     51|    FuzzedDataProvider stream(data, size);
   25|       |
   26|       |    // Initialize parameters
   27|     51|    GfxState gfxState; // Assuming default constructor is available
   28|     51|    double x1 = stream.ConsumeFloatingPoint<double>();
   29|     51|    double y1 = stream.ConsumeFloatingPoint<double>();
   30|     51|    double x2 = stream.ConsumeFloatingPoint<double>();
   31|     51|    double y2 = stream.ConsumeFloatingPoint<double>();
   32|     51|    double x3 = stream.ConsumeFloatingPoint<double>();
   33|     51|    double y3 = stream.ConsumeFloatingPoint<double>();
   34|     51|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   35|     51|    int fontSize = stream.ConsumeIntegral<int>();
   36|       |    
   37|       |    // Unicode pointer and count
   38|     51|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character
   39|     51|    std::string unicodeStr = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));
   40|       |    
   41|       |    // Ensure the size of the string is correct
   42|     51|    if (unicodeStr.size() != unicodeCount * sizeof(Unicode)) {
  ------------------
  |  Branch (42:9): [True: 49, False: 2]
  ------------------
   43|     49|        return 0; // Invalid size, do not proceed
   44|     49|    }
   45|       |
   46|       |    // Convert string to Unicode vector
   47|      2|    std::vector<Unicode> unicodeVec(reinterpret_cast<const Unicode*>(unicodeStr.data()), 
   48|      2|                                     reinterpret_cast<const Unicode*>(unicodeStr.data()) + unicodeCount);
   49|      2|    Unicode *unicodePtr = unicodeVec.data(); // Pointer to Unicode array
   50|       |
   51|       |    // Boolean flags
   52|      2|    GBool flag1 = stream.ConsumeBool();
   53|      2|    GBool flag2 = stream.ConsumeBool();
   54|      2|    GBool flag3 = stream.ConsumeBool();
   55|       |
   56|       |    // Call the function under test
   57|      2|    SplashOutputDev splashOutputDev;
   58|      2|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode,
   59|      2|                              fontSize, unicodePtr, static_cast<int>(unicodeCount),
   60|      2|                              flag1, flag2, flag3);
   61|       |
   62|      2|    return 0;
   63|     51|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   18|      2|                  GBool flag2, GBool flag3) {
   19|       |        // Function implementation
   20|      2|    }

