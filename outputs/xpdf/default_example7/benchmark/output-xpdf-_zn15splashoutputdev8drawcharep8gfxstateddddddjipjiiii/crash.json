{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n\\n// Include necessary standard libraries first\\n#include <cstdint> // For uint8_t\\n#include <cstdlib> // For size_t\\n\\n// Include necessary xpdf headers\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\" // Replaced Unicode.h with UnicodeMap.h\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\n// Assuming gTrue and gFalse are defined as 1 and 0 respectively\\nconst int gTrue = 1; // Changed from GBool to int\\nconst int gFalse = 0; // Changed from GBool to int\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for the function under test\\n    GfxState *gfxState = new GfxState(); // Assuming GfxState can be initialized this way\\n    double param1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param4 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param5 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param6 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int charCode = fuzzed_data.ConsumeIntegral<int>(); // Using int instead of CharCode\\n    int intParam = fuzzed_data.ConsumeIntegral<int>();\\n    \\n    // Initialize Unicode pointer\\n    size_t unicode_length = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100); // Ensure non-null\\n    Unicode *unicodeArray = new Unicode[unicode_length];\\n    for (size_t i = 0; i < unicode_length; ++i) {\\n        unicodeArray[i] = static_cast<Unicode>(fuzzed_data.ConsumeIntegral<int>());\\n    }\\n    \\n    int intParam2 = fuzzed_data.ConsumeIntegral<int>();\\n    int boolParam1 = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // Changed GBool to int\\n    int boolParam2 = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // Changed GBool to int\\n    int boolParam3 = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // Changed GBool to int\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n    splashOutputDev.drawChar(gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray, intParam2, boolParam1, boolParam2, boolParam3);\\n\\n    // Clean up\\n    delete[] unicodeArray;\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include <cstdlib> // For std::malloc and std::free\\n\\n// Assuming the following types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, replace with actual type\\nusing Unicode = uint32_t; // Example definition, replace with actual type\\nusing GBool = bool; // Example definition, replace with actual type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x1, double y1, double x2, double y2,\\n                  double x3, double y3, CharCode charCode, int fontSize,\\n                  Unicode *unicodePtr, int unicodeCount, GBool flag1,\\n                  GBool flag2, GBool flag3) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Assuming default constructor is available\\n    double x1 = stream.ConsumeFloatingPoint<double>();\\n    double y1 = stream.ConsumeFloatingPoint<double>();\\n    double x2 = stream.ConsumeFloatingPoint<double>();\\n    double y2 = stream.ConsumeFloatingPoint<double>();\\n    double x3 = stream.ConsumeFloatingPoint<double>();\\n    double y3 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Unicode pointer and count\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character\\n    std::string unicodeStr = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));\\n    \\n    // Ensure the size of the string is correct\\n    if (unicodeStr.size() != unicodeCount * sizeof(Unicode)) {\\n        return 0; // Invalid size, do not proceed\\n    }\\n\\n    // Convert string to Unicode vector\\n    std::vector<Unicode> unicodeVec(reinterpret_cast<const Unicode*>(unicodeStr.data()), \\n                                     reinterpret_cast<const Unicode*>(unicodeStr.data()) + unicodeCount);\\n    Unicode *unicodePtr = unicodeVec.data(); // Pointer to Unicode array\\n\\n    // Boolean flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode,\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                              fontSize, unicodePtr, static_cast<int>(unicodeCount),\\n                              flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}