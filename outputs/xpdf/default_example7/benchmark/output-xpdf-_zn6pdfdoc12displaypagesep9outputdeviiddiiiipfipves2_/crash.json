{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "58.78",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming the necessary headers for OutputDev, GBool, and DW_TAG_subroutine_type are included\\nclass OutputDev {}; // Placeholder for OutputDev class\\nusing GBool = bool; // Placeholder for GBool type\\n\\n// Correctly define DW_TAG_subroutine_type instead of using an invalid name\\nstruct DW_TAG_subroutine_type {}; // Placeholder for DW_TAG_subroutine_type structure\\n\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double zoom, double rotation, int flags, GBool doPrint, GBool doRender, GBool doAnnotate, DW_TAG_subroutine_type *subroutine, void *userData) {\\n        // Implementation of displayPages\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for the function call\\n    OutputDev outputDev; // Must not be NULL\\n    int pageStart = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Assuming valid page numbers\\n    int pageEnd = fuzzed_data.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double zoom = fuzzed_data.ConsumeFloatingPoint<double>(); // Zoom can be any double\\n    double rotation = fuzzed_data.ConsumeFloatingPointInRange<double>(0.0, 360.0); // Rotation in degrees\\n    int flags = fuzzed_data.ConsumeIntegral<int>(); // Flags can be any integer\\n    GBool doPrint = fuzzed_data.ConsumeBool(); // Must not be NULL\\n    GBool doRender = fuzzed_data.ConsumeBool(); // Must not be NULL\\n    GBool doAnnotate = fuzzed_data.ConsumeBool(); // Must not be NULL\\n    \\n    // Allocate memory for subroutine\\n    DW_TAG_subroutine_type subroutine; // Must not be NULL\\n    void *userData = nullptr;\\n\\n    // Use ConsumeRandomLengthString for userData\\n    std::string userDataString = fuzzed_data.ConsumeRandomLengthString(100); // Allocate a random length string\\n    userData = static_cast<void*>(const_cast<char*>(userDataString.c_str())); // Cast to void*\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoom, rotation, flags, doPrint, doRender, doAnnotate, &subroutine, userData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "50.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming the necessary headers for PDFDoc, OutputDev, GBool, and DW_TAG_subroutine_type are included somewhere\\n// For the sake of this example, we will define minimal versions of these classes/types\\n\\nclass OutputDev {\\n    // Placeholder for OutputDev class definition\\n};\\n\\nusing GBool = bool; // Assuming GBool is a boolean type\\nusing DW_TAG_subroutine_type = int; // Placeholder for DW_TAG_subroutine_type definition\\n\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, DW_TAG_subroutine_type *subroutine, void *userData) {\\n        // Placeholder for the actual implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    OutputDev outputDev; // Create an instance of OutputDev (not null)\\n    \\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100\\n    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate\\n    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10\\n    GBool crop = stream.ConsumeBool(); // Crop flag\\n    GBool rotate = stream.ConsumeBool(); // Rotate flag\\n    GBool print = stream.ConsumeBool(); // Print flag\\n    \\n    // Create a subroutine type pointer (not null)\\n    DW_TAG_subroutine_type subroutineType;\\n    DW_TAG_subroutine_type *subroutinePtr = &subroutineType;\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, crop, rotate, print, subroutinePtr, nullptr);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}