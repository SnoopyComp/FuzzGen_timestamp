{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Include necessary headers for the xpdf library types\\n#include \"GfxState.h\" // Assuming the header file for GfxState is named GfxState.h\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Updated to the correct path for SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\" // Replaced Unicode.h with CharCodeToUnicode.h\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function under test\\n    std::vector<uint8_t> gfxStateData = stream.ConsumeBytes<uint8_t>(sizeof(GfxState));\\n    if (gfxStateData.size() != sizeof(GfxState)) return 0; // Validate size\\n    GfxState* gfxState = reinterpret_cast<GfxState*>(gfxStateData.data());\\n\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    \\n    // Replaced CharCode with a suitable alternative (assuming CharCode is not available)\\n    int charCode = stream.ConsumeIntegral<int>(); // Using int as a placeholder for CharCode\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Create a Unicode pointer and ensure it's not NULL\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100);\\n    std::vector<uint8_t> unicodeData = stream.ConsumeBytes<uint8_t>(unicodeSize * sizeof(uint8_t)); // Changed to uint8_t\\n    if (unicodeData.size() != unicodeSize * sizeof(uint8_t)) return 0; // Validate size\\n    Unicode* unicodePtr = reinterpret_cast<Unicode*>(unicodeData.data()); // Corrected type to Unicode*\\n\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool() ? 1 : 0;\\n    GBool boolParam2 = stream.ConsumeBool() ? 1 : 0;\\n    GBool boolParam3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Create an instance of SplashOutputDev with required parameters\\n    SplashColorMode colorMode = splashModeRGB8; // Changed to splashModeRGB8 as per the error message\\n    int bitmapRowPad = 0; // Assuming a default row padding\\n    GBool reverseVideo = gFalse; // Assuming default value\\n    SplashColorPtr paperColor = nullptr; // Assuming no specific paper color\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor);\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "55.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming the necessary types are defined somewhere\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition\\nusing Unicode = uint32_t;   // Example definition\\nusing GBool = bool;         // Example definition\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Assuming GfxState can be default constructed\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Consume Unicode pointer (we need to allocate memory for it)\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element\\n    std::vector<Unicode> unicodeData(unicodeSize);\\n    stream.ConsumeData(unicodeData.data(), unicodeSize * sizeof(Unicode));\\n    Unicode* unicodePtr = unicodeData.data();\\n\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}