LLVMFuzzerTestOneInput:
   22|     36|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   23|     36|auto start_target = std::chrono::high_resolution_clock::now();
   24|     36|    FuzzedDataProvider stream(data, size);
   25|       |
   26|       |    // Initialize parameters
   27|     36|    GfxState gfxState; // Assuming GfxState can be default constructed
   28|     36|    double param1 = stream.ConsumeFloatingPoint<double>();
   29|     36|    double param2 = stream.ConsumeFloatingPoint<double>();
   30|     36|    double param3 = stream.ConsumeFloatingPoint<double>();
   31|     36|    double param4 = stream.ConsumeFloatingPoint<double>();
   32|     36|    double param5 = stream.ConsumeFloatingPoint<double>();
   33|     36|    double param6 = stream.ConsumeFloatingPoint<double>();
   34|     36|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   35|     36|    int intParam = stream.ConsumeIntegral<int>();
   36|       |    
   37|       |    // Consume Unicode pointer (we need to allocate memory for it)
   38|     36|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element
   39|     36|    std::vector<Unicode> unicodeData(unicodeSize);
   40|     36|    stream.ConsumeData(unicodeData.data(), unicodeSize * sizeof(Unicode));
   41|     36|    Unicode* unicodePtr = unicodeData.data();
   42|       |
   43|     36|    int intParam2 = stream.ConsumeIntegral<int>();
   44|     36|    GBool boolParam1 = stream.ConsumeBool();
   45|     36|    GBool boolParam2 = stream.ConsumeBool();
   46|     36|    GBool boolParam3 = stream.ConsumeBool();
   47|       |
   48|       |    // Call the function under test
   49|     36|    SplashOutputDev splashOutputDev;
   50|     36|	auto start_func = std::chrono::high_resolution_clock::now();
   51|     36|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);
   52|     36|	auto end_func = std::chrono::high_resolution_clock::now();
   53|     36|auto end_target = std::chrono::high_resolution_clock::now();
   54|     36|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   55|       |
   56|     36|    return 0;
   57|     36|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   17|     36|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   18|       |        // Function implementation
   19|     36|    }

