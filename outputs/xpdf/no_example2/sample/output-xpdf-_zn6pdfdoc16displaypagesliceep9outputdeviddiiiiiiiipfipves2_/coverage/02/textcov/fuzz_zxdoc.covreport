_ZN6PDFDoc16displayPageSliceEP9OutputDeviddibbbiiiiP22DW_TAG_subroutine_typePv:
   23|     15|void PDFDoc::displayPageSlice(OutputDev *outputDev, int pageIndex, double x1, double y1, int width, GBool render, GBool crop, GBool rotate, int x2, int y2, int pageCount, int flags, DW_TAG_subroutine_type *subroutine, void *userData) {
   24|       |    // Function implementation (not provided)
   25|     15|}
LLVMFuzzerTestOneInput:
   27|     15|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   28|     15|auto start_target = std::chrono::high_resolution_clock::now();
   29|     15|    FuzzedDataProvider stream(data, size);
   30|       |
   31|       |    // Initialize parameters
   32|     15|    OutputDev outputDev; // Create an instance of OutputDev
   33|     15|    int pageIndex = stream.ConsumeIntegralInRange<int>(0, 100); // Page index between 0 and 100
   34|     15|    double x1 = stream.ConsumeFloatingPoint<double>(); // x1 coordinate
   35|     15|    double y1 = stream.ConsumeFloatingPoint<double>(); // y1 coordinate
   36|     15|    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Width between 1 and 1000
   37|     15|    GBool render = stream.ConsumeBool(); // Render flag
   38|     15|    GBool crop = stream.ConsumeBool(); // Crop flag
   39|     15|    GBool rotate = stream.ConsumeBool(); // Rotate flag
   40|     15|    int x2 = stream.ConsumeIntegralInRange<int>(0, 1000); // x2 coordinate
   41|     15|    int y2 = stream.ConsumeIntegralInRange<int>(0, 1000); // y2 coordinate
   42|     15|    int pageCount = stream.ConsumeIntegralInRange<int>(1, 100); // Page count between 1 and 100
   43|     15|    int flags = stream.ConsumeIntegral<int>(); // Flags
   44|     15|    DW_TAG_subroutine_type *subroutine = new DW_TAG_subroutine_type(); // Create an instance of DW_TAG_subroutine_type
   45|       |
   46|       |    // Correctly consume remaining bytes and cast to void*
   47|     15|    std::vector<uint8_t> remainingBytes = stream.ConsumeRemainingBytes<uint8_t>();
   48|     15|    void *userData = static_cast<void*>(remainingBytes.data()); // User data from remaining bytes
   49|       |
   50|       |    // Call the function under test
   51|     15|    PDFDoc pdfDoc; // Create an instance of PDFDoc
   52|     15|	auto start_func = std::chrono::high_resolution_clock::now();
   53|     15|    pdfDoc.displayPageSlice(&outputDev, pageIndex, x1, y1, width, render, crop, rotate, x2, y2, pageCount, flags, subroutine, userData);
   54|     15|	auto end_func = std::chrono::high_resolution_clock::now();
   55|       |
   56|     15|auto end_target = std::chrono::high_resolution_clock::now();
   57|     15|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   58|     15|    delete subroutine; // Clean up allocated memory for subroutine
   59|     15|    return 0;
   60|     15|}

