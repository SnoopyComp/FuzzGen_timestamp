LLVMFuzzerTestOneInput:
   32|      3|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   33|      3|auto start_target = std::chrono::high_resolution_clock::now();
   34|       |    // Create a FuzzedDataProvider to manage the fuzzing input.
   35|      3|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Generate fuzzed values for GfxState.
   38|      3|    int someValue = stream.ConsumeIntegral<int>(); // Consume an integer for someValue
   39|      3|    std::vector<uint8_t> buffer = stream.ConsumeBytes<uint8_t>(stream.remaining_bytes()); // Consume remaining bytes for buffer
   40|       |
   41|       |    // Initialize GfxState object with fuzzed data.
   42|      3|    GfxState gfxState(someValue, buffer);
   43|       |
   44|       |    // Create an instance of SplashOutputDev.
   45|      3|    SplashOutputDev splashOutputDev;
   46|       |
   47|       |    // Call the function under test with the initialized GfxState.
   48|      3|	auto start_func = std::chrono::high_resolution_clock::now();
   49|      3|    splashOutputDev.doUpdateFont(&gfxState);
   50|      3|	auto end_func = std::chrono::high_resolution_clock::now();
   51|      3|auto end_target = std::chrono::high_resolution_clock::now();
   52|      3|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   53|       |
   54|      3|    return 0;
   55|      3|}
_ZN8GfxStateC2EiRKNSt3__16vectorIhNS0_9allocatorIhEEEE:
   17|      3|    GfxState(int value, const std::vector<uint8_t>& buf) : someValue(value), buffer(buf) {
   18|       |        // Initialize GfxState members with provided values.
   19|      3|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   25|      3|    void doUpdateFont(GfxState *gfxState) {
   26|       |        // Implementation of the method.
   27|       |        // For example, we could use gfxState's members here.
   28|       |        // This is a placeholder for actual functionality.
   29|      3|    }

