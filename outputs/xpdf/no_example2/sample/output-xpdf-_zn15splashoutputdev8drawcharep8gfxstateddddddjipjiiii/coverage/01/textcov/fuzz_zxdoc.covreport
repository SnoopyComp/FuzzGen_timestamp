LLVMFuzzerTestOneInput:
   26|     47|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   27|     47|auto start_target = std::chrono::high_resolution_clock::now();
   28|     47|    FuzzedDataProvider stream(data, size);
   29|       |
   30|       |    // Initialize the GfxState pointer
   31|     47|    GfxState gfxStateInstance; // Create an instance of GfxState
   32|     47|    GfxState *gfxStatePtr = &gfxStateInstance; // Pointer to the instance
   33|       |
   34|       |    // Consume doubles for the coordinates
   35|     47|    double x = stream.ConsumeFloatingPoint<double>();
   36|     47|    double y = stream.ConsumeFloatingPoint<double>();
   37|     47|    double width = stream.ConsumeFloatingPoint<double>();
   38|     47|    double height = stream.ConsumeFloatingPoint<double>();
   39|     47|    double xOffset = stream.ConsumeFloatingPoint<double>();
   40|     47|    double yOffset = stream.ConsumeFloatingPoint<double>();
   41|       |
   42|       |    // Consume CharCode
   43|     47|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   44|       |
   45|       |    // Consume an integer
   46|     47|    int intValue = stream.ConsumeIntegral<int>();
   47|       |
   48|       |    // Consume Unicode pointer using ConsumeRandomLengthString
   49|     47|    std::string unicodeString = stream.ConsumeRandomLengthString(10); // Example size
   50|     47|    std::vector<Unicode> unicodeVec(unicodeString.begin(), unicodeString.end());
   51|     47|    Unicode *unicodePtr = unicodeVec.empty() ? nullptr : unicodeVec.data(); // Ensure it's not NULL
  ------------------
  |  Branch (51:27): [True: 32, False: 15]
  ------------------
   52|       |
   53|       |    // Consume another integer
   54|     47|    int anotherIntValue = stream.ConsumeIntegral<int>();
   55|       |
   56|       |    // Consume GBool values
   57|     47|    GBool bool1 = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool
  ------------------
  |  Branch (57:19): [True: 1, False: 46]
  ------------------
   58|     47|    GBool bool2 = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool
  ------------------
  |  Branch (58:19): [True: 1, False: 46]
  ------------------
   59|     47|    GBool bool3 = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool
  ------------------
  |  Branch (59:19): [True: 1, False: 46]
  ------------------
   60|       |
   61|       |    // Call the function under test
   62|     47|    SplashOutputDev splashOutputDev;
   63|     47|	auto start_func = std::chrono::high_resolution_clock::now();
   64|     47|    splashOutputDev.drawChar(gfxStatePtr, x, y, width, height, xOffset, yOffset, charCode, intValue, unicodePtr, anotherIntValue, bool1, bool2, bool3);
   65|     47|	auto end_func = std::chrono::high_resolution_clock::now();
   66|     47|auto end_target = std::chrono::high_resolution_clock::now();
   67|     47|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   68|       |
   69|     47|    return 0;
   70|     47|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjiiii:
   20|     47|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   21|       |        // Function implementation (not provided)
   22|     47|    }

