{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "51.52",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include <cstddef> // Include for size_t\\n#include <cstdint> // Include for uint8_t\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, replace with actual type\\nusing Unicode = uint32_t;   // Example definition, replace with actual type\\nusing GBool = int;          // Example definition, replace with actual type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation (not provided)\\n    }\\n};\\n\\n// The function must be defined as per the fuzzer's requirements\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize the GfxState pointer\\n    GfxState gfxStateInstance; // Create an instance of GfxState\\n    GfxState *gfxStatePtr = &gfxStateInstance; // Pointer to the instance\\n\\n    // Consume doubles for the coordinates\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double xOffset = stream.ConsumeFloatingPoint<double>();\\n    double yOffset = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n\\n    // Consume an integer\\n    int intValue = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode pointer using ConsumeRandomLengthString\\n    std::string unicodeString = stream.ConsumeRandomLengthString(10); // Example size\\n    std::vector<Unicode> unicodeVec(unicodeString.begin(), unicodeString.end());\\n    Unicode *unicodePtr = unicodeVec.empty() ? nullptr : unicodeVec.data(); // Ensure it's not NULL\\n\\n    // Consume another integer\\n    int anotherIntValue = stream.ConsumeIntegral<int>();\\n\\n    // Consume GBool values\\n    GBool bool1 = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool\\n    GBool bool2 = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool\\n    GBool bool3 = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(gfxStatePtr, x, y, width, height, xOffset, yOffset, charCode, intValue, unicodePtr, anotherIntValue, bool1, bool2, bool3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // For std::memcpy\\n#include <string>  // For std::string\\n\\n// Include project-specific headers that define SplashOutputDev, GfxState, and Unicode\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Assuming this header contains the definition for SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"        // Assuming this header contains the definition for GfxState\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\" // Assuming this header contains the definition for CharCode\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"     // Including a valid Unicode header\\n\\nvoid SplashOutputDev::drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Validate the size of the data for GfxState\\n    if (size < sizeof(GfxState)) {\\n        return 0; // Not enough data\\n    }\\n\\n    std::vector<uint8_t> gfxStateData = stream.ConsumeBytes<uint8_t>(sizeof(GfxState));\\n    if (gfxStateData.size() != sizeof(GfxState)) {\\n        return 0; // Not enough data for GfxState\\n    }\\n    GfxState* gfxState = reinterpret_cast<GfxState*>(gfxStateData.data());\\n\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    \\n    // CharCode is assumed to be an integer type\\n    int charCode = stream.ConsumeIntegral<int>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Unicode pointer; assuming Unicode is a struct and we need to allocate some space\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // allocate space for 1 to 10 Unicode elements\\n    std::vector<Unicode> unicodeVec(unicodeCount); // allocate space for Unicode elements\\n    Unicode* unicodePtr = unicodeVec.data();\\n    \\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = static_cast<GBool>(stream.ConsumeBool());\\n    GBool boolParam2 = static_cast<GBool>(stream.ConsumeBool());\\n    GBool boolParam3 = static_cast<GBool>(stream.ConsumeBool());\\n\\n    // Call the function under test\\n    SplashOutputDev::drawChar(gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}