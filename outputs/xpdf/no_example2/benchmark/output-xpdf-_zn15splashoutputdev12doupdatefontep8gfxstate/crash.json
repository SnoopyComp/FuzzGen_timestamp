{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "35.04",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n\\n// Assuming GfxState is defined elsewhere in your codebase\\nclass GfxState {\\npublic:\\n    // Example member variables\\n    int someInt;\\n    float someFloat;\\n    std::vector<uint8_t> someData;\\n\\n    GfxState() : someInt(0), someFloat(0.0f) {}\\n};\\n\\n// Assuming SplashOutputDev is defined elsewhere in your codebase\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Implementation of the function (not provided)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider object\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize GfxState object\\n    GfxState gfxState;\\n\\n    // Consume data for GfxState's members\\n    gfxState.someInt = fuzzed_data.ConsumeIntegral<int>();\\n    gfxState.someFloat = fuzzed_data.ConsumeFloatingPoint<float>();\\n\\n    // Consume a random length for someData\\n    size_t data_length = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 256); // Ensure at least 1 byte\\n    gfxState.someData = fuzzed_data.ConsumeBytes<uint8_t>(data_length);\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "31.21",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n\\n// Assuming GfxState is a class that has a proper constructor or initialization method.\\nclass GfxState {\\npublic:\\n    // Example member variables\\n    int someValue;\\n    std::vector<uint8_t> buffer;\\n\\n    // Constructor that initializes GfxState with dummy values.\\n    GfxState(int value, const std::vector<uint8_t>& buf) : someValue(value), buffer(buf) {\\n        // Initialize GfxState members with provided values.\\n    }\\n};\\n\\n// Assuming SplashOutputDev is a class that contains the doUpdateFont method.\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Implementation of the method.\\n        // For example, we could use gfxState's members here.\\n        // This is a placeholder for actual functionality.\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider to manage the fuzzing input.\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate fuzzed values for GfxState.\\n    int someValue = stream.ConsumeIntegral<int>(); // Consume an integer for someValue\\n    std::vector<uint8_t> buffer = stream.ConsumeBytes<uint8_t>(stream.remaining_bytes()); // Consume remaining bytes for buffer\\n\\n    // Initialize GfxState object with fuzzed data.\\n    GfxState gfxState(someValue, buffer);\\n\\n    // Create an instance of SplashOutputDev.\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test with the initialized GfxState.\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}