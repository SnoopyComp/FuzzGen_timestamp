LLVMFuzzerTestOneInput:
   24|     37|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     37|auto start_target = std::chrono::high_resolution_clock::now();
   26|     37|    FuzzedDataProvider stream(data, size);
   27|       |
   28|       |    // Initialize parameters for the function under test
   29|     37|    OutputDev outputDev; // Assuming default constructor is sufficient
   30|     37|    int pageNumber = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming valid page numbers are 1 to 100
   31|     37|    double x1 = stream.ConsumeFloatingPoint<double>();
   32|     37|    double y1 = stream.ConsumeFloatingPoint<double>();
   33|     37|    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Assuming width is in reasonable range
   34|     37|    GBool isPrint = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool
  ------------------
  |  Branch (34:21): [True: 10, False: 27]
  ------------------
   35|     37|    GBool isScreen = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool
  ------------------
  |  Branch (35:22): [True: 9, False: 28]
  ------------------
   36|     37|    GBool isThumbnail = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool
  ------------------
  |  Branch (36:25): [True: 11, False: 26]
  ------------------
   37|     37|    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees
   38|     37|    int cropX = stream.ConsumeIntegral<int>();
   39|     37|    int cropY = stream.ConsumeIntegral<int>();
   40|     37|    int cropWidth = stream.ConsumeIntegral<int>();
   41|       |    
   42|       |    // Assuming DW_TAG_subroutine_typeInfinite loop is a pointer type
   43|       |    // Use ConsumeRandomLengthString to create a buffer for subroutineType
   44|     37|    std::string subroutineTypeBuffer = stream.ConsumeRandomLengthString(sizeof(void*)); // Allocate size of pointer
   45|     37|    void *subroutineType = nullptr;
   46|       |    
   47|     37|    if (subroutineTypeBuffer.size() == sizeof(void*)) {
  ------------------
  |  Branch (47:9): [True: 3, False: 34]
  ------------------
   48|      3|        std::memcpy(&subroutineType, subroutineTypeBuffer.data(), sizeof(void*));
   49|     34|    } else {
   50|     34|        std::cerr << "Invalid size for subroutineType" << std::endl;
   51|     34|        return 0; // Exit if the size is not valid
   52|     34|    }
   53|       |    
   54|       |    // User data can be a pointer to any data type, here we just use nullptr for simplicity
   55|      3|    void *userData = nullptr;
   56|       |
   57|       |    // Call the function under test
   58|      3|    PDFDoc pdfDoc; // Assuming an instance of PDFDoc is needed
   59|      3|	auto start_func = std::chrono::high_resolution_clock::now();
   60|      3|    pdfDoc.displayPageSlice(&outputDev, pageNumber, x1, y1, width, isPrint, isScreen, isThumbnail, rotation, cropX, cropY, cropWidth, subroutineType, userData);
   61|      3|	auto end_func = std::chrono::high_resolution_clock::now();
   62|      3|auto end_target = std::chrono::high_resolution_clock::now();
   63|      3|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   64|       |
   65|      3|    return 0;
   66|     37|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddiiiiiiiiPvS2_:
   18|      3|    void displayPageSlice(OutputDev *outputDev, int pageNumber, double x1, double y1, int width, GBool isPrint, GBool isScreen, GBool isThumbnail, int rotation, int cropX, int cropY, int cropWidth, void *subroutineType, void *userData) {
   19|       |        // Function implementation
   20|      3|    }

