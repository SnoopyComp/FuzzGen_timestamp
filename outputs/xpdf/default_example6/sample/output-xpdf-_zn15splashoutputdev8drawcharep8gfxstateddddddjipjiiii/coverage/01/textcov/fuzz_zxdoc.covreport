LLVMFuzzerTestOneInput:
   26|     34|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   27|     34|auto start_target = std::chrono::high_resolution_clock::now();
   28|     34|    FuzzedDataProvider fuzzed_data(data, size);
   29|       |
   30|       |    // Create a GfxState instance
   31|     34|    GfxState gfxState;
   32|       |
   33|       |    // Consume double values for the coordinates
   34|     34|    double x1 = fuzzed_data.ConsumeFloatingPoint<double>();
   35|     34|    double y1 = fuzzed_data.ConsumeFloatingPoint<double>();
   36|     34|    double x2 = fuzzed_data.ConsumeFloatingPoint<double>();
   37|     34|    double y2 = fuzzed_data.ConsumeFloatingPoint<double>();
   38|     34|    double x3 = fuzzed_data.ConsumeFloatingPoint<double>();
   39|     34|    double y3 = fuzzed_data.ConsumeFloatingPoint<double>();
   40|       |
   41|       |    // Consume a CharCode
   42|     34|    CharCode charCode = fuzzed_data.ConsumeIntegral<CharCode>();
   43|       |
   44|       |    // Consume an integer parameter
   45|     34|    int intParam = fuzzed_data.ConsumeIntegral<int>();
   46|       |
   47|       |    // Create a Unicode pointer
   48|     34|    std::vector<Unicode> unicodeData(fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10)); // Allocate some Unicode data
   49|     34|    Unicode *unicodePtr = unicodeData.data(); // Get pointer to the data
   50|       |
   51|       |    // Consume another integer parameter
   52|     34|    int intParam2 = fuzzed_data.ConsumeIntegral<int>();
   53|       |
   54|       |    // Consume boolean parameters
   55|     34|    GBool boolParam1 = fuzzed_data.ConsumeBool();
   56|     34|    GBool boolParam2 = fuzzed_data.ConsumeBool();
   57|     34|    GBool boolParam3 = fuzzed_data.ConsumeBool();
   58|       |
   59|       |    // Call the function under test
   60|     34|	auto start_func = std::chrono::high_resolution_clock::now();
   61|     34|    SplashOutputDev::drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);
   62|     34|	auto end_func = std::chrono::high_resolution_clock::now();
   63|     34|auto end_target = std::chrono::high_resolution_clock::now();
   64|     34|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   65|       |
   66|     34|    return 0;
   67|     34|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiP7Unicodeibbb:
   18|     34|    static void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intParam, Unicode *unicodePtr, int intParam2, GBool boolParam1, GBool boolParam2, GBool boolParam3) {
   19|       |        // Implementation of drawChar (for the sake of fuzzing, we can leave it empty)
   20|     34|    }

