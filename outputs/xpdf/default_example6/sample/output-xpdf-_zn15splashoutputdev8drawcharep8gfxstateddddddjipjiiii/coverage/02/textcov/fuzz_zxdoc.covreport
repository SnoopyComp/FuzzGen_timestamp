LLVMFuzzerTestOneInput:
   23|     52|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|     52|auto start_target = std::chrono::high_resolution_clock::now();
   25|     52|    FuzzedDataProvider stream(data, size);
   26|       |
   27|       |    // Initialize parameters for the function
   28|     52|    GfxState gfxState; // Create an instance of GfxState
   29|     52|    double param1 = stream.ConsumeFloatingPoint<double>(); // First double parameter
   30|     52|    double param2 = stream.ConsumeFloatingPoint<double>(); // Second double parameter
   31|     52|    double param3 = stream.ConsumeFloatingPoint<double>(); // Third double parameter
   32|     52|    double param4 = stream.ConsumeFloatingPoint<double>(); // Fourth double parameter
   33|     52|    double param5 = stream.ConsumeFloatingPoint<double>(); // Fifth double parameter
   34|     52|    double param6 = stream.ConsumeFloatingPoint<double>(); // Sixth double parameter
   35|     52|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   36|     52|    int intParam = stream.ConsumeIntegral<int>(); // Integer parameter
   37|     52|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   38|     52|    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeSize); // Unicode string
   39|     52|    std::vector<Unicode> unicodeArray(unicodeString.begin(), unicodeString.end()); // Convert string to Unicode array
   40|     52|    int intParam2 = stream.ConsumeIntegral<int>(); // Second integer parameter
   41|     52|    GBool boolParam1 = stream.ConsumeBool(); // First boolean parameter
   42|     52|    GBool boolParam2 = stream.ConsumeBool(); // Second boolean parameter
   43|     52|    GBool boolParam3 = stream.ConsumeBool(); // Third boolean parameter
   44|       |
   45|       |    // Call the function under test
   46|     52|    SplashOutputDev splashOutputDev;
   47|     52|	auto start_func = std::chrono::high_resolution_clock::now();
   48|     52|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);
   49|     52|	auto end_func = std::chrono::high_resolution_clock::now();
   50|     52|auto end_target = std::chrono::high_resolution_clock::now();
   51|     52|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   52|       |
   53|     52|    return 0;
   54|     52|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   18|     52|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   19|       |        // Implementation of drawChar (omitted for brevity)
   20|     52|    }

