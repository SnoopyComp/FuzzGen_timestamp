LLVMFuzzerTestOneInput:
   40|     11|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   41|     11|auto start_target = std::chrono::high_resolution_clock::now();
   42|     11|    FuzzedDataProvider stream(data, size);
   43|       |
   44|       |    // Create an instance of SplashOutputDev.
   45|     11|    SplashOutputDev splashOutputDev;
   46|       |
   47|       |    // Initialize GfxState. It should not be null.
   48|     11|    GfxState gfxState;
   49|       |
   50|       |    // Use fuzzed input to set font name and size
   51|     11|    std::string fontName = stream.ConsumeRandomLengthString(10); // Random string of length up to 10
   52|     11|    int fontSize = stream.ConsumeIntegralInRange<int>(8, 72); // Random font size between 8 and 72
   53|       |
   54|     11|    gfxState.setFont(fontName, fontSize);
   55|       |
   56|       |    // Call the function under test.
   57|     11|	auto start_func = std::chrono::high_resolution_clock::now();
   58|     11|    splashOutputDev.doUpdateFont(&gfxState);
   59|     11|	auto end_func = std::chrono::high_resolution_clock::now();
   60|     11|auto end_target = std::chrono::high_resolution_clock::now();
   61|     11|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   62|       |
   63|     11|    return 0;
   64|     11|}
_ZN8GfxStateC2Ev:
   17|     11|    GfxState() : fontSize(12) { // Initialize with a default font size
   18|       |        // Initialize GfxState members as needed.
   19|     11|    }
_ZN8GfxState7setFontERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi:
   21|     11|    void setFont(const std::string &name, int size) {
   22|     11|        fontName = name;
   23|     11|        fontSize = size;
   24|     11|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   29|     11|    void doUpdateFont(GfxState *gfxState) {
   30|       |        // Implementation of doUpdateFont.
   31|       |        // For example, just printing the font name and size.
   32|       |        // In a real implementation, this would do something meaningful.
   33|     11|        if (gfxState) {
  ------------------
  |  Branch (33:13): [True: 11, False: 0]
  ------------------
   34|       |            // Simulate some processing with the font state
   35|     11|            printf("Updating font: %s, size: %d\n", gfxState->fontName.c_str(), gfxState->fontSize);
   36|     11|        }
   37|     11|    }

