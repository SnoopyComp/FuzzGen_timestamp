{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "55.19",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <iostream> // For std::cerr\\n#include <cstring>  // For std::memcpy\\n\\n// Assume OutputDev and DW_TAG_subroutine_typeInfinite are defined elsewhere\\nclass OutputDev {};\\ntypedef int GBool; // Assuming GBool is defined as an integer type\\n\\n// Assume PDFDoc is defined elsewhere\\nclass PDFDoc {\\npublic:\\n    void displayPageSlice(OutputDev *outputDev, int pageNumber, double x1, double y1, int width, GBool isPrint, GBool isScreen, GBool isThumbnail, int rotation, int cropX, int cropY, int cropWidth, void *subroutineType, void *userData) {\\n        // Function implementation\\n    }\\n};\\n\\n// Function under test\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function under test\\n    OutputDev outputDev; // Assuming default constructor is sufficient\\n    int pageNumber = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming valid page numbers are 1 to 100\\n    double x1 = stream.ConsumeFloatingPoint<double>();\\n    double y1 = stream.ConsumeFloatingPoint<double>();\\n    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Assuming width is in reasonable range\\n    GBool isPrint = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool\\n    GBool isScreen = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool\\n    GBool isThumbnail = stream.ConsumeBool() ? 1 : 0; // Convert bool to GBool\\n    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees\\n    int cropX = stream.ConsumeIntegral<int>();\\n    int cropY = stream.ConsumeIntegral<int>();\\n    int cropWidth = stream.ConsumeIntegral<int>();\\n    \\n    // Assuming DW_TAG_subroutine_typeInfinite loop is a pointer type\\n    // Use ConsumeRandomLengthString to create a buffer for subroutineType\\n    std::string subroutineTypeBuffer = stream.ConsumeRandomLengthString(sizeof(void*)); // Allocate size of pointer\\n    void *subroutineType = nullptr;\\n    \\n    if (subroutineTypeBuffer.size() == sizeof(void*)) {\\n        std::memcpy(&subroutineType, subroutineTypeBuffer.data(), sizeof(void*));\\n    } else {\\n        std::cerr << \"Invalid size for subroutineType\" << std::endl;\\n        return 0; // Exit if the size is not valid\\n    }\\n    \\n    // User data can be a pointer to any data type, here we just use nullptr for simplicity\\n    void *userData = nullptr;\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc; // Assuming an instance of PDFDoc is needed\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdfDoc.displayPageSlice(&outputDev, pageNumber, x1, y1, width, isPrint, isScreen, isThumbnail, rotation, cropX, cropY, cropWidth, subroutineType, userData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "56.96",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming the necessary includes for OutputDev, GBool, and DW_TAG_subroutine_typeInfinite_loop are available\\nclass OutputDev {\\n    // Implementation details for OutputDev\\n};\\n\\nenum class GBool {\\n    gFalse = 0,\\n    gTrue = 1\\n};\\n\\n// Placeholder for DW_TAG_subroutine_typeInfinite_loop\\nstruct DW_TAG_subroutine_typeInfinite_loop {\\n    // Implementation details for DW_TAG_subroutine_typeInfinite_loop\\n};\\n\\n// Definition of PDFDoc class with the displayPageSlice method\\nclass PDFDoc {\\npublic:\\n    static void displayPageSlice(OutputDev *, int, double, double, int, GBool, GBool, GBool, int, int, int, int, DW_TAG_subroutine_typeInfinite_loop *, void *);\\n};\\n\\nvoid PDFDoc::displayPageSlice(OutputDev *, int, double, double, int, GBool, GBool, GBool, int, int, int, int, DW_TAG_subroutine_typeInfinite_loop *, void *) {\\n    // Implementation details for displayPageSlice\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    OutputDev outputDev; // Non-null instance of OutputDev\\n    int intParam1 = stream.ConsumeIntegral<int>();\\n    double doubleParam1 = stream.ConsumeFloatingPoint<double>();\\n    double doubleParam2 = stream.ConsumeFloatingPoint<double>();\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse;\\n    GBool boolParam2 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse;\\n    GBool boolParam3 = stream.ConsumeBool() ? GBool::gTrue : GBool::gFalse;\\n    int intParam3 = stream.ConsumeIntegral<int>();\\n    int intParam4 = stream.ConsumeIntegral<int>();\\n    int intParam5 = stream.ConsumeIntegral<int>();\\n    int intParam6 = stream.ConsumeIntegral<int>();\\n\\n    // Create an instance of DW_TAG_subroutine_typeInfinite_loop\\n    DW_TAG_subroutine_typeInfinite_loop subroutineType; // Non-null instance\\n\\n    // Pointer to void, can be initialized to nullptr or some valid data\\n    void *voidPtr = nullptr; // Assuming this can be null for the test\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    PDFDoc::displayPageSlice(&outputDev, intParam1, doubleParam1, doubleParam2, intParam2, boolParam1, boolParam2, boolParam3, intParam3, intParam4, intParam5, intParam6, &subroutineType, voidPtr);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}