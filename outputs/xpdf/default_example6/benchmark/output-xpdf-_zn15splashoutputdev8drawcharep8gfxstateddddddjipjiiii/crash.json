{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "54.69",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition for CharCode\\nclass Unicode {}; // Example definition for Unicode\\nusing GBool = bool; // Example definition for GBool\\n\\n// Definition of SplashOutputDev class\\nclass SplashOutputDev {\\npublic:\\n    static void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intParam, Unicode *unicodePtr, int intParam2, GBool boolParam1, GBool boolParam2, GBool boolParam3) {\\n        // Implementation of drawChar (for the sake of fuzzing, we can leave it empty)\\n    }\\n};\\n\\n// Function signature provided\\n// void SplashOutputDev::drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intParam, Unicode *unicodePtr, int intParam2, GBool boolParam1, GBool boolParam2, GBool boolParam3);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a GfxState instance\\n    GfxState gfxState;\\n\\n    // Consume double values for the coordinates\\n    double x1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double x2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double x3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n\\n    // Consume a CharCode\\n    CharCode charCode = fuzzed_data.ConsumeIntegral<CharCode>();\\n\\n    // Consume an integer parameter\\n    int intParam = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Create a Unicode pointer\\n    std::vector<Unicode> unicodeData(fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10)); // Allocate some Unicode data\\n    Unicode *unicodePtr = unicodeData.data(); // Get pointer to the data\\n\\n    // Consume another integer parameter\\n    int intParam2 = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume boolean parameters\\n    GBool boolParam1 = fuzzed_data.ConsumeBool();\\n    GBool boolParam2 = fuzzed_data.ConsumeBool();\\n    GBool boolParam3 = fuzzed_data.ConsumeBool();\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    SplashOutputDev::drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "61.88",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint> // For uint32_t\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>  // For std::vector\\n#include <string>  // For std::string\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition\\nusing Unicode = uint32_t;   // Example definition\\nusing GBool = bool;         // Example definition\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Implementation of drawChar (omitted for brevity)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    GfxState gfxState; // Create an instance of GfxState\\n    double param1 = stream.ConsumeFloatingPoint<double>(); // First double parameter\\n    double param2 = stream.ConsumeFloatingPoint<double>(); // Second double parameter\\n    double param3 = stream.ConsumeFloatingPoint<double>(); // Third double parameter\\n    double param4 = stream.ConsumeFloatingPoint<double>(); // Fourth double parameter\\n    double param5 = stream.ConsumeFloatingPoint<double>(); // Fifth double parameter\\n    double param6 = stream.ConsumeFloatingPoint<double>(); // Sixth double parameter\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode\\n    int intParam = stream.ConsumeIntegral<int>(); // Integer parameter\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeSize); // Unicode string\\n    std::vector<Unicode> unicodeArray(unicodeString.begin(), unicodeString.end()); // Convert string to Unicode array\\n    int intParam2 = stream.ConsumeIntegral<int>(); // Second integer parameter\\n    GBool boolParam1 = stream.ConsumeBool(); // First boolean parameter\\n    GBool boolParam2 = stream.ConsumeBool(); // Second boolean parameter\\n    GBool boolParam3 = stream.ConsumeBool(); // Third boolean parameter\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}