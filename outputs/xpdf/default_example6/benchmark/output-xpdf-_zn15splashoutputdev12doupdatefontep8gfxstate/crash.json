{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "33.33",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n#include <string>\\n\\n// Assuming GfxState is a defined class. You would need to include the appropriate header.\\nclass GfxState {\\npublic:\\n    // Example members for GfxState that can be influenced by fuzzing input.\\n    std::string fontName;\\n    int fontSize;\\n\\n    GfxState() : fontSize(12) { // Initialize with a default font size\\n        // Initialize GfxState members as needed.\\n    }\\n\\n    void setFont(const std::string &name, int size) {\\n        fontName = name;\\n        fontSize = size;\\n    }\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Implementation of doUpdateFont.\\n        // For example, just printing the font name and size.\\n        // In a real implementation, this would do something meaningful.\\n        if (gfxState) {\\n            // Simulate some processing with the font state\\n            printf(\"Updating font: %s, size: %d\\\n\", gfxState->fontName.c_str(), gfxState->fontSize);\\n        }\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of SplashOutputDev.\\n    SplashOutputDev splashOutputDev;\\n\\n    // Initialize GfxState. It should not be null.\\n    GfxState gfxState;\\n\\n    // Use fuzzed input to set font name and size\\n    std::string fontName = stream.ConsumeRandomLengthString(10); // Random string of length up to 10\\n    int fontSize = stream.ConsumeIntegralInRange<int>(8, 72); // Random font size between 8 and 72\\n\\n    gfxState.setFont(fontName, fontSize);\\n\\n    // Call the function under test.\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "34.23",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming GfxState is a class defined somewhere in the codebase\\nclass GfxState {\\npublic:\\n    // Example member variables and constructor for GfxState\\n    int some_value;\\n    std::vector<uint8_t> buffer;\\n\\n    GfxState(int value, const std::vector<uint8_t>& buf) : some_value(value), buffer(buf) {}\\n};\\n\\n// Assuming SplashOutputDev is a class defined somewhere in the codebase\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Function implementation (not provided)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n    \\n    // Initialize GfxState parameters\\n    int value = stream.ConsumeIntegral<int>();\\n    size_t buffer_size = stream.ConsumeIntegralInRange<size_t>(1, 1024); // Ensure non-zero size\\n    std::vector<uint8_t> buffer = stream.ConsumeBytes<uint8_t>(buffer_size);\\n\\n    // Validate that the size of the buffer is as expected\\n    if (buffer.size() != buffer_size) {\\n        return 0; // Invalid size, exit early\\n    }\\n\\n    // Create GfxState instance\\n    GfxState gfx_state(value, buffer);\\n\\n    // Create SplashOutputDev instance\\n    SplashOutputDev splash_output_dev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splash_output_dev.doUpdateFont(&gfx_state);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}