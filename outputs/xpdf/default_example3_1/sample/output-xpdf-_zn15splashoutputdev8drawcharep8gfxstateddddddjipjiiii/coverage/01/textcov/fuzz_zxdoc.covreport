LLVMFuzzerTestOneInput:
   24|     53|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     53|auto start_target = std::chrono::high_resolution_clock::now();
   26|     53|    FuzzedDataProvider stream(data, size);
   27|       |
   28|       |    // Initialize parameters
   29|     53|    GfxState gstate; // Ensure this is not NULL
   30|     53|    double x = stream.ConsumeFloatingPoint<double>();
   31|     53|    double y = stream.ConsumeFloatingPoint<double>();
   32|     53|    double width = stream.ConsumeFloatingPoint<double>();
   33|     53|    double height = stream.ConsumeFloatingPoint<double>();
   34|     53|    double dx = stream.ConsumeFloatingPoint<double>();
   35|     53|    double dy = stream.ConsumeFloatingPoint<double>();
   36|     53|    CharCode code = stream.ConsumeIntegral<CharCode>();
   37|     53|    int fontSize = stream.ConsumeIntegral<int>();
   38|       |    
   39|       |    // Handle Unicode array
   40|     53|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character
   41|     53|    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode)); // Use ConsumeRandomLengthString
   42|     53|    std::vector<Unicode> unicodeArray(unicodeString.begin(), unicodeString.end()); // Convert string to Unicode vector
   43|     53|    Unicode *unicodePtr = unicodeArray.data(); // Pointer to the Unicode array
   44|       |
   45|       |    // Validate the size of the unicodeArray
   46|     53|    if (unicodeArray.size() != unicodeCount) {
  ------------------
  |  Branch (46:9): [True: 50, False: 3]
  ------------------
   47|     50|        return 0; // Do not proceed if sizes do not match
   48|     50|    }
   49|       |
   50|       |    // Boolean flags
   51|      3|    GBool flag1 = stream.ConsumeBool();
   52|      3|    GBool flag2 = stream.ConsumeBool();
   53|      3|    GBool flag3 = stream.ConsumeBool();
   54|       |
   55|       |    // Call the function under test
   56|      3|    SplashOutputDev dev;
   57|      3|	auto start_func = std::chrono::high_resolution_clock::now();
   58|      3|    dev.drawChar(&gstate, x, y, width, height, dx, dy, code, fontSize, unicodePtr, static_cast<int>(unicodeCount), flag1, flag2, flag3);
   59|      3|	auto end_func = std::chrono::high_resolution_clock::now();
   60|      3|auto end_target = std::chrono::high_resolution_clock::now();
   61|      3|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   62|       |
   63|      3|    return 0;
   64|     53|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddiiPiibbb:
   18|      3|    void drawChar(GfxState *gstate, double x, double y, double width, double height, double dx, double dy, CharCode code, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   19|       |        // Function implementation
   20|      3|    }

