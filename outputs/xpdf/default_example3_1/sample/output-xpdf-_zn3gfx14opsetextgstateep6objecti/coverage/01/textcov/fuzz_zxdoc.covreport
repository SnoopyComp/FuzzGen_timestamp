_ZN3Gfx14opSetExtGStateEP6Objecti:
   26|      3|    void opSetExtGState(Object *obj, int state) {
   27|       |        // Function implementation that modifies the object
   28|      3|        if (obj) {
  ------------------
  |  Branch (28:13): [True: 3, False: 0]
  ------------------
   29|      3|            obj->setState(state); // Modify the object based on the state
   30|      3|        }
   31|      3|    }
LLVMFuzzerTestOneInput:
   34|      3|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   35|      3|auto start_target = std::chrono::high_resolution_clock::now();
   36|       |    // Create a FuzzedDataProvider instance
   37|      3|    FuzzedDataProvider fuzzed_data(data, size);
   38|       |
   39|       |    // Initialize the Object pointer
   40|      3|    Object obj; // Assuming Object can be default constructed
   41|      3|    Object *obj_ptr = &obj; // Ensure the pointer is not NULL
   42|       |
   43|       |    // Consume an integer value for the state
   44|       |    // Use a wider range of integers to ensure more coverage
   45|      3|    int state = fuzzed_data.ConsumeIntegralInRange<int>(std::numeric_limits<int>::min(), std::numeric_limits<int>::max());
   46|       |
   47|       |    // Call the function under test
   48|      3|	auto start_func = std::chrono::high_resolution_clock::now();
   49|      3|    Gfx::opSetExtGState(obj_ptr, state);
   50|      3|	auto end_func = std::chrono::high_resolution_clock::now();
   51|       |
   52|       |    // Optionally, check the state to ensure it was modified as expected
   53|       |    // This can help in validating that the function was invoked correctly
   54|      3|    if (obj.someProperty != state) {
  ------------------
  |  Branch (54:9): [True: 0, False: 3]
  ------------------
   55|       |        // This can be used for debugging purposes or further fuzzing
   56|       |        // You can log or assert here if needed
   57|      0|    }
   58|       |
   59|       |    // Additionally, consume more data to increase coverage
   60|       |    // For example, consume a boolean to decide whether to modify the state further
   61|      3|    bool modifyState = fuzzed_data.ConsumeBool();
   62|      3|    if (modifyState) {
  ------------------
  |  Branch (62:9): [True: 0, False: 3]
  ------------------
   63|       |        // Consume another integer and modify the state again
   64|      0|        int additionalState = fuzzed_data.ConsumeIntegralInRange<int>(std::numeric_limits<int>::min(), std::numeric_limits<int>::max());
   65|      0|        Gfx::opSetExtGState(obj_ptr, additionalState);
   66|      0|    }
   67|      3|auto end_target = std::chrono::high_resolution_clock::now();
   68|      3|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   69|       |
   70|      3|    return 0;
   71|      3|}
_ZN6Object8setStateEi:
   20|      3|    void setState(int state) {
   21|      3|        someProperty = state;
   22|      3|    }
_ZN6ObjectC2Ev:
   17|      3|    Object() : someProperty(0) {}

