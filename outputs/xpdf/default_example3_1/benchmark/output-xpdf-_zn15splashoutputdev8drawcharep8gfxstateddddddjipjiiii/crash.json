{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "63.18",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <string>\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined elsewhere\\nclass GfxState {}; // Placeholder definition\\nusing CharCode = int; // Placeholder definition\\nusing Unicode = int; // Placeholder definition\\nusing GBool = bool; // Placeholder definition\\n\\n// Definition for SplashOutputDev class\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *gstate, double x, double y, double width, double height, double dx, double dy, CharCode code, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation\\n    }\\n};\\n\\n// Function under test\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gstate; // Ensure this is not NULL\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Handle Unicode array\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode)); // Use ConsumeRandomLengthString\\n    std::vector<Unicode> unicodeArray(unicodeString.begin(), unicodeString.end()); // Convert string to Unicode vector\\n    Unicode *unicodePtr = unicodeArray.data(); // Pointer to the Unicode array\\n\\n    // Validate the size of the unicodeArray\\n    if (unicodeArray.size() != unicodeCount) {\\n        return 0; // Do not proceed if sizes do not match\\n    }\\n\\n    // Boolean flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev dev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    dev.drawChar(&gstate, x, y, width, height, dx, dy, code, fontSize, unicodePtr, static_cast<int>(unicodeCount), flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming the required types are defined somewhere\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, adjust as needed\\nclass Unicode {}; // Example definition, adjust as needed\\nusing GBool = bool; // Example definition, adjust as needed\\n\\n// Placeholder for SplashOutputDev class\\nclass SplashOutputDev {\\npublic:\\n    static void drawChar(GfxState *state, double x, double y, double width, double height, \\n                         double ascent, double descent, CharCode charCode, int fontSize, \\n                         Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n        // Implementation of drawChar (not provided in the original code)\\n    }\\n};\\n\\n// Function signature to be fuzzed\\nvoid SplashOutputDev::drawChar(GfxState *state, double x, double y, double width, double height, \\n                                double ascent, double descent, CharCode charCode, int fontSize, \\n                                Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    GfxState gfxState; // Create a GfxState object\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double ascent = stream.ConsumeFloatingPoint<double>();\\n    double descent = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Consume Unicode data\\n    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Ensure at least 1 Unicode character\\n    std::vector<Unicode> unicodeData(unicodeCount);\\n    \\n    // Validate the size of the unicodeData\\n    if (unicodeCount > 0) {\\n        // Fill the Unicode array with random length strings\\n        std::string unicodeString = stream.ConsumeRandomLengthString();\\n        size_t dataSize = std::min(unicodeCount * sizeof(Unicode), unicodeString.size());\\n        std::memcpy(unicodeData.data(), unicodeString.data(), dataSize); // Fill the Unicode array\\n    }\\n\\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function to fuzz\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    SplashOutputDev::drawChar(&gfxState, x, y, width, height, ascent, descent, charCode, fontSize, \\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                              unicodeData.data(), unicodeCount, flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n    \\n    return 0;\\n}",
        "model": ""
    }

    ]
}