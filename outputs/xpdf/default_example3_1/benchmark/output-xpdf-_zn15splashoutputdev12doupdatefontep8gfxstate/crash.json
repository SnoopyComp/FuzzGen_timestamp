{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "50.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <cstring>\\n\\n// Assuming GfxState is a defined class somewhere in the codebase.\\nclass GfxState {\\npublic:\\n    // Example member variables\\n    int fontSize;\\n    char fontName[50]; // Assuming a max font name length\\n\\n    // Constructor and other members of GfxState\\n    GfxState() : fontSize(12) { // Default font size\\n        std::memset(fontName, 0, sizeof(fontName)); // Initialize fontName\\n    }\\n\\n    // Method to set font properties from fuzzed data\\n    void setFontProperties(int size, const char* name) {\\n        fontSize = size;\\n        std::strncpy(fontName, name, sizeof(fontName) - 1);\\n        fontName[sizeof(fontName) - 1] = '\\0'; // Ensure null termination\\n    }\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Implementation of the function\\n        // For demonstration, we can just print the font size and name\\n        // In a real scenario, this would update the font in some way\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a GfxState instance\\n    GfxState gfxState;\\n\\n    // Use fuzzed data to initialize gfxState\\n    int fontSize = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Example range for font size\\n    std::string fontName = fuzzed_data.ConsumeRandomLengthString(49); // Max length is 49 to fit in fontName\\n    gfxState.setFontProperties(fontSize, fontName.c_str());\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // For memcpy\\n\\nclass GfxState {\\n    // Assuming GfxState has some internal state that we need to initialize.\\npublic:\\n    GfxState() {\\n        // Initialize GfxState with default values.\\n    }\\n\\n    // Example member to hold some state, assuming it's a byte array for demonstration\\n    uint8_t fontData[256]; // Example size\\n\\n    void setFontData(const uint8_t* data, size_t size) {\\n        // Ensure we don't exceed the buffer size\\n        size_t copySize = size < sizeof(fontData) ? size : sizeof(fontData);\\n        memcpy(fontData, data, copySize);\\n    }\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Function implementation (not provided).\\n        // Here we can assume it does something with state->fontData\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider to extract inputs from the fuzz data.\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize GfxState object.\\n    GfxState gfx_state;\\n\\n    // Extract a portion of fuzzed data to set the font data\\n    std::string font_data_str = fuzzed_data.ConsumeRandomLengthString();\\n    size_t font_data_size = font_data_str.size();\\n\\n    // Validate the size before proceeding\\n    if (font_data_size > 0) {\\n        // Set the font data in GfxState\\n        gfx_state.setFontData(reinterpret_cast<const uint8_t*>(font_data_str.data()), font_data_size);\\n\\n        // Create an instance of SplashOutputDev.\\n        SplashOutputDev splash_output_dev;\\n\\n        // Call the function under test.\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n        splash_output_dev.doUpdateFont(&gfx_state);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n    }\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}