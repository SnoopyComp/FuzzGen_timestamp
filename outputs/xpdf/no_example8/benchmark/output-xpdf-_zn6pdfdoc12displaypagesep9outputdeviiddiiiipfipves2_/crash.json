{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "58.70",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string> // Include string for ConsumeRandomLengthString\\n#include <cstring> // Include for std::memcpy\\n\\n// Assuming these types are defined somewhere in the project\\nclass OutputDev {};\\nclass PDFDoc { // Added definition for PDFDoc\\npublic:\\n    void displayPages(OutputDev *output_dev, int page_start, int page_end, double x, double y, int zoom, bool rotate, bool crop, bool display, int *loop, void *user_data) {\\n        // Function implementation...\\n    }\\n};\\nusing GBool = bool; // Ensure GBool is defined\\nusing DW_TAG_subroutine_typeInfiniteLoop = int; // Placeholder type\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    OutputDev output_dev; // Assuming a default constructor is available\\n    int page_start = stream.ConsumeIntegralInRange<int>(1, 100); // Example range for page numbers\\n    int page_end = stream.ConsumeIntegralInRange<int>(page_start, 100); // Ensure page_end is >= page_start\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Example zoom level\\n    GBool rotate = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool display = stream.ConsumeBool();\\n    \\n    // Consume a pointer for DW_TAG_subroutine_typeInfiniteLoop\\n    auto loop_data = stream.ConsumeRandomLengthString(sizeof(DW_TAG_subroutine_typeInfiniteLoop));\\n    DW_TAG_subroutine_typeInfiniteLoop *loop = reinterpret_cast<DW_TAG_subroutine_typeInfiniteLoop*>(loop_data.data());\\n    \\n    // Consume user data pointer\\n    void *user_data = stream.ConsumeRandomLengthString(size).data(); // Changed to ConsumeRandomLengthString for user data\\n\\n    // Call the function under test\\n    PDFDoc pdf_doc; // Assuming a default constructor is available\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdf_doc.displayPages(&output_dev, page_start, page_end, x, y, zoom, rotate, crop, display, loop, user_data);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // For memcpy\\n#include <string>  // Include string for std::string\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include project-specific libraries\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/goo/gmem.h\" // Replacing GBool.h with an appropriate header\\n#include \"/src/xpdf-4.05/goo/GString.h\" // Include GString for PDFDoc constructor\\n#include \"/src/xpdf-4.05/goo/Trace.h\" // Include Trace.h as a replacement for DW_TAG.h\\n\\n// A simple abort check callback function\\nGBool abortCheckCallback(void *data) {\\n    // For fuzzing purposes, we can just return false to indicate no abort\\n    return 0; // GBool is typically defined as an int, where 0 is false\\n}\\n\\n// Fuzzing harness for the PDFDoc::displayPages function\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Prepare the parameters for the function call\\n    std::string outputDevString = stream.ConsumeRandomLengthString(100); // Using a reasonable length for outputDevString\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(const_cast<char*>(outputDevString.c_str()));\\n\\n    int pageStart = stream.ConsumeIntegral<int>();\\n    int pageEnd = stream.ConsumeIntegral<int>();\\n    double xPos = stream.ConsumeFloatingPoint<double>();\\n    double yPos = stream.ConsumeFloatingPoint<double>();\\n    int someInt = stream.ConsumeIntegral<int>();\\n    GBool bool1 = stream.ConsumeBool() ? 1 : 0; // Assuming GBool is a typedef for an integer type\\n    GBool bool2 = stream.ConsumeBool() ? 1 : 0;\\n    GBool bool3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Use the abort check callback function\\n    GBool (*abortCheckCbk)(void *) = abortCheckCallback;\\n\\n    // Consume a random length string for userData\\n    std::string userDataString = stream.ConsumeRandomLengthString(100); // Assuming a max length of 100\\n    void* userData = reinterpret_cast<void*>(const_cast<char*>(userDataString.c_str())); // Cast to void*\\n\\n    // Create a GString for the PDFDoc constructor\\n    GString *fileNameA = new GString(\"dummy.pdf\"); // Provide a dummy filename for testing\\n    PDFDoc pdfDoc(fileNameA); // Use the constructor that requires a GString\\n\\n    // Call the function under test\\n    pdfDoc.displayPages(outputDev, pageStart, pageEnd, xPos, yPos, someInt, bool1, bool2, bool3, abortCheckCbk, userData);\\n\\n    // Clean up\\n    delete fileNameA; // Clean up dynamically allocated GString\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}