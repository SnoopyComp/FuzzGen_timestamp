{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "35.04",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n\\n// Assuming GfxState is defined somewhere in the codebase\\nclass GfxState {\\npublic:\\n    // Example members for GfxState, adjust according to the actual definition\\n    int fontID;\\n    float fontSize;\\n    std::vector<uint8_t> fontData;\\n\\n    GfxState() : fontID(0), fontSize(0.0f) {}\\n};\\n\\n// Assuming SplashOutputDev is defined somewhere in the codebase\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Consume data for GfxState members\\n    gfxState.fontID = fuzzed_data.ConsumeIntegral<int>();\\n    gfxState.fontSize = fuzzed_data.ConsumeFloatingPoint<float>();\\n\\n    // Consume random length for fontData\\n    size_t fontDataSize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 1024); // Ensure non-zero size\\n    gfxState.fontData = fuzzed_data.ConsumeBytes<uint8_t>(fontDataSize);\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "37.50",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n#include <string>\\n\\n// Assuming GfxState is defined somewhere in the codebase\\nclass GfxState {\\npublic:\\n    // Define members and methods as needed for testing\\n    int some_member; // Example member\\n    std::string font_name; // Example font name\\n    float font_size; // Example font size\\n\\n    // Constructor to initialize GfxState\\n    GfxState() : some_member(0), font_size(12.0f) {}\\n};\\n\\n// Assuming SplashOutputDev is defined somewhere in the codebase\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Implementation of the function (not provided)\\n        // Example logic that might use gfxState->font_name and gfxState->font_size\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider to consume the fuzzing input\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of GfxState\\n    GfxState gfxState;\\n\\n    // Initialize the GfxState object with fuzzed data\\n    gfxState.some_member = fuzzed_data.ConsumeIntegral<int>();\\n    gfxState.font_name = fuzzed_data.ConsumeRandomLengthString(10); // Random font name of up to 10 characters\\n    gfxState.font_size = fuzzed_data.ConsumeFloatingPoint<float>(); // Random font size\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}