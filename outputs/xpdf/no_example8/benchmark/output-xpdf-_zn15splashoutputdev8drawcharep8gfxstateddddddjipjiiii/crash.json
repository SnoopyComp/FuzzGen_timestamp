{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "62.19",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // Include for std::memcpy\\n\\n// Assuming the definitions of GfxState, CharCode, Unicode, and GBool are available in the included headers\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, adjust as needed\\nusing GBool = bool; // Example definition, adjust as needed\\nusing Unicode = uint32_t; // Example definition, adjust as needed\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation\\n    }\\n};\\n\\n// Ensure the function is properly defined for the fuzzer\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of the class\\n    SplashOutputDev splashOutputDev;\\n\\n    // Initialize parameters for the function call\\n    GfxState gfxState; // Ensure this is not NULL\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate Unicode array\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element\\n    std::vector<Unicode> unicodeArray(unicodeSize);\\n    \\n    // Allocate a buffer for unicode data\\n    std::string unicodeDataString = stream.ConsumeRandomLengthString(unicodeSize * sizeof(Unicode));\\n    \\n    // Validate that we received the expected size\\n    if (unicodeDataString.size() != unicodeSize * sizeof(Unicode)) {\\n        return 0; // Exit if the sizes do not match\\n    }\\n    \\n    // Copy data into the unicodeArray\\n    std::memcpy(unicodeArray.data(), unicodeDataString.data(), unicodeSize * sizeof(Unicode));\\n    \\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Include the necessary headers for GfxState, CharCode, and GBool\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\" // This includes the definition for CharCode\\n#include \"UnicodeMap.h\" // Replaced Unicode.h with UnicodeMap.h\\n\\n// Ensure that GBool is defined\\ntypedef int GBool; // Assuming GBool is defined as an integer type\\nconst GBool gTrue = 1;\\nconst GBool gFalse = 0;\\n\\n// Correctly define the drawChar function\\nvoid drawChar(GfxState *gfxState, double param1, double param2, double param3, double param4, double param5, double param6, CharCode charCode, int intParam, Unicode *unicodePtr, int unicodeSize, GBool boolParam1, GBool boolParam2, GBool boolParam3);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a GfxState pointer with the required parameters\\n    double hDPI = 72.0; // Example DPI value\\n    double vDPI = 72.0; // Example DPI value\\n    PDFRectangle *pageBox = nullptr; // Assuming a null page box for simplicity\\n    int rotate = 0; // Example rotation value\\n    GBool upsideDown = gFalse; // Example upside down value\\n\\n    GfxState gfxState(hDPI, vDPI, pageBox, rotate, upsideDown); // Initialize GfxState with parameters\\n    GfxState *gfxStatePtr = &gfxState;\\n\\n    // Consume doubles for the first six parameters\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode (assuming it can be represented as an integral type)\\n    CharCode charCode = static_cast<CharCode>(stream.ConsumeIntegral<int>());\\n\\n    // Consume an integer for the eighth parameter\\n    int intParam = stream.ConsumeIntegral<int>();\\n\\n    // Consume a Unicode string\\n    std::string unicodeString = stream.ConsumeRandomLengthString(); // Ensure non-null\\n    Unicode *unicodePtr = reinterpret_cast<Unicode*>(const_cast<char*>(unicodeString.data())); // Cast to Unicode*\\n\\n    // Consume the last three GBool parameters\\n    GBool boolParam1 = stream.ConsumeBool() ? gTrue : gFalse; // Assuming gTrue and gFalse are valid GBool values\\n    GBool boolParam2 = stream.ConsumeBool() ? gTrue : gFalse;\\n    GBool boolParam3 = stream.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Call the function under test\\n    drawChar(gfxStatePtr, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, unicodeString.size(), boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}