LLVMFuzzerTestOneInput:
   24|     53|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     53|auto start_target = std::chrono::high_resolution_clock::now();
   26|     53|    FuzzedDataProvider stream(data, size);
   27|       |
   28|       |    // Create an instance of the class
   29|     53|    SplashOutputDev splashOutputDev;
   30|       |
   31|       |    // Initialize parameters for the function call
   32|     53|    GfxState gfxState; // Ensure this is not NULL
   33|     53|    double param1 = stream.ConsumeFloatingPoint<double>();
   34|     53|    double param2 = stream.ConsumeFloatingPoint<double>();
   35|     53|    double param3 = stream.ConsumeFloatingPoint<double>();
   36|     53|    double param4 = stream.ConsumeFloatingPoint<double>();
   37|     53|    double param5 = stream.ConsumeFloatingPoint<double>();
   38|     53|    double param6 = stream.ConsumeFloatingPoint<double>();
   39|     53|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   40|     53|    int intParam = stream.ConsumeIntegral<int>();
   41|       |    
   42|       |    // Allocate Unicode array
   43|     53|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element
   44|     53|    std::vector<Unicode> unicodeArray(unicodeSize);
   45|       |    
   46|       |    // Allocate a buffer for unicode data
   47|     53|    std::string unicodeDataString = stream.ConsumeRandomLengthString(unicodeSize * sizeof(Unicode));
   48|       |    
   49|       |    // Validate that we received the expected size
   50|     53|    if (unicodeDataString.size() != unicodeSize * sizeof(Unicode)) {
  ------------------
  |  Branch (50:9): [True: 47, False: 6]
  ------------------
   51|     47|        return 0; // Exit if the sizes do not match
   52|     47|    }
   53|       |    
   54|       |    // Copy data into the unicodeArray
   55|      6|    std::memcpy(unicodeArray.data(), unicodeDataString.data(), unicodeSize * sizeof(Unicode));
   56|       |    
   57|      6|    int intParam2 = stream.ConsumeIntegral<int>();
   58|      6|    GBool boolParam1 = stream.ConsumeBool();
   59|      6|    GBool boolParam2 = stream.ConsumeBool();
   60|      6|    GBool boolParam3 = stream.ConsumeBool();
   61|       |
   62|       |    // Call the function under test
   63|      6|	auto start_func = std::chrono::high_resolution_clock::now();
   64|      6|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);
   65|      6|	auto end_func = std::chrono::high_resolution_clock::now();
   66|      6|auto end_target = std::chrono::high_resolution_clock::now();
   67|      6|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   68|       |
   69|      6|    return 0;
   70|     53|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   18|      6|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   19|       |        // Function implementation
   20|      6|    }

