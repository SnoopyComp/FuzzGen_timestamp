{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "35.04",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n\\n// Assuming GfxState is defined somewhere in your codebase\\nclass GfxState {\\npublic:\\n    // Example members, modify according to the actual GfxState definition\\n    int someInt;\\n    float someFloat;\\n    std::vector<uint8_t> dataBuffer;\\n\\n    GfxState() : someInt(0), someFloat(0.0f) {}\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Function implementation (for demonstration purposes)\\n        if (gfxState) {\\n            // Simulated operation on GfxState\\n            gfxState->someInt += 1;\\n            gfxState->someFloat += 0.1f;\\n        }\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Consume data for GfxState members\\n    gfxState.someInt = stream.ConsumeIntegral<int>();\\n    gfxState.someFloat = stream.ConsumeFloatingPoint<float>();\\n\\n    // Consume a vector of bytes for dataBuffer\\n    size_t bufferSize = stream.ConsumeIntegralInRange<size_t>(1, 1024); // Ensure non-zero size\\n    gfxState.dataBuffer = stream.ConsumeBytes<uint8_t>(bufferSize);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <vector>\\n#include <cstring> // Include for memcpy\\n#include <string> // Include for std::string\\n\\n// Assuming GfxState is defined somewhere in the included headers\\nclass GfxState {\\npublic:\\n    // Define necessary members and methods for GfxState\\n    // For example, you might need to set up some buffers or states\\n    std::vector<uint8_t> buffer; // Example member\\n\\n    GfxState() {\\n        // Initialize members\\n    }\\n\\n    void setBuffer(const uint8_t* data, size_t size) {\\n        buffer.assign(data, data + size); // Set buffer with provided data\\n    }\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Implementation of the function\\n        // Example: Just for demonstration, we can print the buffer size\\n        if (!gfxState->buffer.empty()) {\\n            // Process the buffer (dummy implementation)\\n        }\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Ensure we consume a non-zero size that does not exceed the input data size\\n    size_t buffer_size = fuzzed_data.ConsumeIntegralInRange<size_t>(1, size); // Ensure non-zero size\\n\\n    // Consume a random length string based on the buffer size\\n    std::string buffer_data = fuzzed_data.ConsumeRandomLengthString(buffer_size); // Use ConsumeRandomLengthString\\n    \\n    // Fill in the GfxState object with the consumed data\\n    if (buffer_data.size() > 0) { // Ensure we only set buffer if we have data\\n        gfxState.setBuffer(reinterpret_cast<const uint8_t*>(buffer_data.data()), buffer_data.size());\\n    }\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}