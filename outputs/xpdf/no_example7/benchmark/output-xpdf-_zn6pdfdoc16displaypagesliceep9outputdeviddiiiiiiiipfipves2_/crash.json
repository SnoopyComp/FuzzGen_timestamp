{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef> // For size_t\\n#include \"PDFDoc.h\" // Include the header for PDFDoc class\\n#include \"OutputDev.h\" // Include the header for OutputDev class\\n#include \"GString.h\" // Include the header for GString class\\n#include \"GBool.h\" // Include the header for GBool type\\n\\n// Implement a concrete subclass of OutputDev to fulfill the pure virtual methods\\nclass ConcreteOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override {\\n        return false; // Provide a default implementation\\n    }\\n\\n    GBool useDrawChar() override {\\n        return true; // Provide a default implementation\\n    }\\n\\n    GBool interpretType3Chars() override {\\n        return true; // Provide a default implementation\\n    }\\n\\n    // You may add other necessary methods or members here\\n};\\n\\n// Placeholder for the actual type\\nusing DW_TAG_subroutine_typeInfinite = int; // Placeholder for the actual type\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of ConcreteOutputDev\\n    ConcreteOutputDev outputDev;\\n\\n    // Extract parameters from the fuzz input\\n    int param1 = stream.ConsumeIntegral<int>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    int param4 = stream.ConsumeIntegral<int>();\\n    GBool param5 = stream.ConsumeBool();\\n    GBool param6 = stream.ConsumeBool();\\n    GBool param7 = stream.ConsumeBool();\\n    int param8 = stream.ConsumeIntegral<int>();\\n    int param9 = stream.ConsumeIntegral<int>();\\n    int param10 = stream.ConsumeIntegral<int>();\\n    int param11 = stream.ConsumeIntegral<int>();\\n    \\n    // Assuming DW_TAG_subroutine_typeInfinite is an integer type for this example\\n    DW_TAG_subroutine_typeInfinite param12 = stream.ConsumeIntegral<DW_TAG_subroutine_typeInfinite>();\\n    \\n    // Use ConsumeRemainingBytes to get a non-null pointer\\n    size_t remainingBytes = stream.remaining_bytes();\\n    std::vector<uint8_t> remainingData = stream.ConsumeRemainingBytes<uint8_t>();\\n    void* param13 = remainingData.data(); // Now this pointer is valid for the lifetime of remainingData\\n\\n    // Create a valid PDFDoc instance using a dummy string for testing\\n    GString dummyFileName(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&dummyFileName); // Assuming the constructor requires a GString pointer\\n\\n    // Ensure that the parameters passed to displayPageSlice are valid\\n    // Adjust the parameters as necessary to avoid out-of-bounds access\\n    int pageCount = pdfDoc.getPageCount(); // Assuming this method exists\\n    if (param1 < 0 || param1 >= pageCount) {\\n        param1 = 0; // Default to the first page if out of bounds\\n    }\\n\\n    // Pass nullptr for the abortCheckCbk parameter\\n    pdfDoc.displayPageSlice(&outputDev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, nullptr, param13);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/goo/gmem.h\"\\n\\n// Derived class to implement the pure virtual functions from OutputDev\\nclass TestOutputDev : public OutputDev {\\npublic:\\n    // Implement the pure virtual functions\\n    virtual GBool upsideDown() override {\\n        return gFalse; // or gTrue based on your needs\\n    }\\n    \\n    virtual GBool useDrawChar() override {\\n        return gFalse; // or gTrue based on your needs\\n    }\\n\\n    virtual GBool interpretType3Chars() override {\\n        return gFalse; // or gTrue based on your needs\\n    }\\n\\n    // You can add other necessary methods or overrides here\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an OutputDev object using the derived class\\n    TestOutputDev output_dev;\\n\\n    // Consume parameters for the function\\n    int param1 = fuzzed_data.ConsumeIntegral<int>(); // int\\n    double param2 = fuzzed_data.ConsumeFloatingPoint<double>(); // double\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>(); // double\\n    int param4 = fuzzed_data.ConsumeIntegral<int>(); // int\\n    GBool param5 = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // GBool\\n    GBool param6 = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // GBool\\n    GBool param7 = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // GBool\\n    int param8 = fuzzed_data.ConsumeIntegral<int>(); // int\\n    int param9 = fuzzed_data.ConsumeIntegral<int>(); // int\\n    int param10 = fuzzed_data.ConsumeIntegral<int>(); // int\\n    int param11 = fuzzed_data.ConsumeIntegral<int>(); // int\\n\\n    // Create a valid GString for PDFDoc constructor\\n    GString fileNameA(\"dummy.pdf\"); // Replace with a valid filename as needed\\n    PDFDoc pdf_doc_instance(&fileNameA); // Use the appropriate constructor\\n\\n    // Check if the PDF document is valid and has pages\\n    if (pdf_doc_instance.isOk() && pdf_doc_instance.getNumPages() > 0) {\\n        // Ensure param1 is a valid page number\\n        param1 = std::max(1, std::min(param1, pdf_doc_instance.getNumPages())); // Clamp to valid page range\\n\\n        // Create a valid parameter for the function call\\n        void *param12 = reinterpret_cast<void*>(0x1); // Use a non-null pointer\\n\\n        // Call the function under test\\n        pdf_doc_instance.displayPageSlice(&output_dev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, nullptr, param12);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}