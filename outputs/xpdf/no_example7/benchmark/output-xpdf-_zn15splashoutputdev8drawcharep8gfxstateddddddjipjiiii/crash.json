{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "61.81",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming the necessary includes and definitions for GfxState, CharCode, Unicode, and GBool are available\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example type, adjust as necessary\\nusing Unicode = uint32_t;   // Example type, adjust as necessary\\nusing GBool = bool;         // Example type, adjust as necessary\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height, double xOffset, double yOffset, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Assuming default constructor is sufficient\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double xOffset = stream.ConsumeFloatingPoint<double>();\\n    double yOffset = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Unicode array\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure non-zero count\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));\\n    \\n    // Ensure the size of the string is appropriate\\n    if (unicodeString.size() != unicodeCount * sizeof(Unicode)) {\\n        return 0; // Skip this iteration if sizes don't match\\n    }\\n\\n    // Convert string data to Unicode array\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    std::memcpy(unicodeArray.data(), unicodeString.data(), unicodeString.size());\\n    Unicode *unicodePtr = unicodeArray.data();\\n\\n    // Boolean flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, xOffset, yOffset, charCode, fontSize, unicodePtr, static_cast<int>(unicodeCount), flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // For memcpy\\n#include <string>  // For std::string\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Include the correct header file\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\" // Including a relevant header for Unicode\\n#include \"/src/xpdf-4.05/goo/gfile.h\" // Including the necessary header for GBool\\n#include \"/src/xpdf-4.05/goo/gmem.h\" // Including the necessary header for memory management\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, int, int, Unicode *, int, GBool, GBool, GBool);\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar\\n    GfxState* gfxState = nullptr;\\n    if (size >= sizeof(GfxState)) {\\n        gfxState = new GfxState();\\n        auto bytes = stream.ConsumeBytes<uint8_t>(sizeof(GfxState));\\n        if (bytes.size() == sizeof(GfxState)) {\\n            memcpy(gfxState, bytes.data(), sizeof(GfxState));\\n        } else {\\n            delete gfxState;\\n            return 0; // Invalid size, exit early\\n        }\\n    }\\n\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    int charCode = stream.ConsumeIntegral<int>(); // Changed to int, since CharCode is not defined\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    Unicode* unicodePtr = nullptr;\\n    if (size >= sizeof(Unicode)) {\\n        unicodePtr = new Unicode();\\n        auto bytes = stream.ConsumeBytes<uint8_t>(sizeof(Unicode));\\n        if (bytes.size() == sizeof(Unicode)) {\\n            memcpy(unicodePtr, bytes.data(), sizeof(Unicode));\\n        } else {\\n            delete unicodePtr;\\n            return 0; // Invalid size, exit early\\n        }\\n    }\\n\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool() ? 1 : 0; // Assuming GBool is an integer type\\n    GBool boolParam2 = stream.ConsumeBool() ? 1 : 0;\\n    GBool boolParam3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n    if (gfxState && unicodePtr) { // Ensure pointers are not null before calling\\n        splashOutputDev.drawChar(gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n    }\\n\\n    // Clean up\\n    delete gfxState;\\n    delete unicodePtr;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}