LLVMFuzzerTestOneInput:
   23|     48|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|     48|auto start_target = std::chrono::high_resolution_clock::now();
   25|     48|    FuzzedDataProvider stream(data, size);
   26|       |
   27|       |    // Initialize parameters
   28|     48|    GfxState gfxState; // Assuming default constructor is sufficient
   29|     48|    double x = stream.ConsumeFloatingPoint<double>();
   30|     48|    double y = stream.ConsumeFloatingPoint<double>();
   31|     48|    double width = stream.ConsumeFloatingPoint<double>();
   32|     48|    double height = stream.ConsumeFloatingPoint<double>();
   33|     48|    double xOffset = stream.ConsumeFloatingPoint<double>();
   34|     48|    double yOffset = stream.ConsumeFloatingPoint<double>();
   35|     48|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   36|     48|    int fontSize = stream.ConsumeIntegral<int>();
   37|       |
   38|       |    // Unicode array
   39|     48|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure non-zero count
   40|     48|    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));
   41|       |    
   42|       |    // Ensure the size of the string is appropriate
   43|     48|    if (unicodeString.size() != unicodeCount * sizeof(Unicode)) {
  ------------------
  |  Branch (43:9): [True: 46, False: 2]
  ------------------
   44|     46|        return 0; // Skip this iteration if sizes don't match
   45|     46|    }
   46|       |
   47|       |    // Convert string data to Unicode array
   48|      2|    std::vector<Unicode> unicodeArray(unicodeCount);
   49|      2|    std::memcpy(unicodeArray.data(), unicodeString.data(), unicodeString.size());
   50|      2|    Unicode *unicodePtr = unicodeArray.data();
   51|       |
   52|       |    // Boolean flags
   53|      2|    GBool flag1 = stream.ConsumeBool();
   54|      2|    GBool flag2 = stream.ConsumeBool();
   55|      2|    GBool flag3 = stream.ConsumeBool();
   56|       |
   57|       |    // Call the function under test
   58|      2|    SplashOutputDev splashOutputDev;
   59|      2|	auto start_func = std::chrono::high_resolution_clock::now();
   60|      2|    splashOutputDev.drawChar(&gfxState, x, y, width, height, xOffset, yOffset, charCode, fontSize, unicodePtr, static_cast<int>(unicodeCount), flag1, flag2, flag3);
   61|      2|	auto end_func = std::chrono::high_resolution_clock::now();
   62|      2|auto end_target = std::chrono::high_resolution_clock::now();
   63|      2|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   64|       |
   65|      2|    return 0;
   66|     48|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   18|      2|    void drawChar(GfxState *state, double x, double y, double width, double height, double xOffset, double yOffset, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   19|       |        // Function implementation
   20|      2|    }

