{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <vector>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n// Include the necessary headers for PDFDoc and OutputDev\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include the header for PDFDoc\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include the header for OutputDev\\n\\n// Concrete implementation of OutputDev\\nclass ConcreteOutputDev : public OutputDev {\\npublic:\\n    // Implement the pure virtual methods\\n    virtual GBool upsideDown() override {\\n        return gFalse; // or gTrue based on your requirement\\n    }\\n\\n    virtual GBool useDrawChar() override {\\n        return gFalse; // or gTrue based on your requirement\\n    }\\n\\n    virtual GBool interpretType3Chars() override {\\n        return gFalse; // or gTrue based on your requirement\\n    }\\n\\n    // You may need to implement other methods from OutputDev if required\\n};\\n\\n// Callback function that matches the expected signature\\nGBool abortCheckCallback(void *data) {\\n    // Implement your logic here; for now, we just return gFalse\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for the function\\n    // Create a valid GString to pass to PDFDoc constructor\\n    std::string fileName = fuzzed_data.ConsumeRandomLengthString(); // Random file name\\n    GString *gStringFileName = new GString(fileName.c_str()); // Create GString from file name\\n\\n    // Create an instance of PDFDoc with a valid constructor\\n    PDFDoc pdfDoc(gStringFileName); // Use the constructor that requires a GString\\n\\n    ConcreteOutputDev outputDev; // Use the concrete implementation\\n    int pageStart = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Example range for pages\\n    int pageEnd = fuzzed_data.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double zoom = fuzzed_data.ConsumeFloatingPoint<double>(); // Any double value\\n    double rotation = fuzzed_data.ConsumeFloatingPointInRange<double>(0.0, 360.0); // Rotation between 0 and 360\\n    int flags = fuzzed_data.ConsumeIntegral<int>(); // Any integer flags\\n    GBool isPrint = fuzzed_data.ConsumeBool(); // Boolean value for printing\\n    GBool isDisplay = fuzzed_data.ConsumeBool(); // Boolean value for display\\n    GBool isEmbed = fuzzed_data.ConsumeBool(); // Boolean value for embedding\\n\\n    // Use ConsumeRandomLengthString for creating a non-null pointer\\n    std::string subroutineData = fuzzed_data.ConsumeRandomLengthString(); // Get random length string\\n    void *subroutine = reinterpret_cast<void*>(const_cast<char*>(subroutineData.data())); // Non-null pointer\\n\\n    // Validate userData size using ConsumeRandomLengthString\\n    std::string userDataString = fuzzed_data.ConsumeRandomLengthString(); // Get random length string for userData\\n    void *userData = reinterpret_cast<void*>(const_cast<char*>(userDataString.data())); // Non-null pointer\\n\\n    // Call the function under test\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoom, rotation, flags, isPrint, isDisplay, isEmbed, abortCheckCallback, userData);\\n\\n    // Clean up\\n    delete gStringFileName; // Free the allocated GString\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "41.09",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string> // Include string for ConsumeRandomLengthString\\n\\n// Forward declaration of PDFDoc class\\nclass PDFDoc;\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass OutputDev {};\\nusing GBool = bool;\\nusing DW_TAG_subroutine_typeInfiniteLoop = int; // Placeholder type\\n\\n// Function under test\\nvoid displayPages(PDFDoc* pdfDoc, OutputDev *outputDev, int pageStart, int pageEnd, double zoomX, double zoomY, int rotation, GBool print, GBool annotate, GBool render, DW_TAG_subroutine_typeInfiniteLoop *loop, void *userData) {\\n    // Function implementation\\n}\\n\\n// Define the PDFDoc class\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double zoomX, double zoomY, int rotation, GBool print, GBool annotate, GBool render, DW_TAG_subroutine_typeInfiniteLoop *loop, void *userData) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    OutputDev outputDev; // Create an instance of OutputDev\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming valid page range\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double zoomX = stream.ConsumeFloatingPoint<double>();\\n    double zoomY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees\\n    GBool print = stream.ConsumeBool();\\n    GBool annotate = stream.ConsumeBool();\\n    GBool render = stream.ConsumeBool();\\n    \\n    // Create a pointer for DW_TAG_subroutine_typeInfiniteLoop\\n    auto loopBytes = stream.ConsumeRandomLengthString(sizeof(DW_TAG_subroutine_typeInfiniteLoop));\\n    if (loopBytes.size() != sizeof(DW_TAG_subroutine_typeInfiniteLoop)) {\\n        return 0; // Invalid size, do not proceed\\n    }\\n    DW_TAG_subroutine_typeInfiniteLoop *loop = reinterpret_cast<DW_TAG_subroutine_typeInfiniteLoop*>(const_cast<char*>(loopBytes.data()));\\n\\n    // Create a user data pointer\\n    auto userDataBytes = stream.ConsumeRemainingBytes<uint8_t>();\\n    void *userData = userDataBytes.data();\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc; // Create an instance of PDFDoc\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoomX, zoomY, rotation, print, annotate, render, loop, userData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}