{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include \"gtypes.h\" // Include the header file for GBool\\n#include \"Object.h\" // Include the header file for Object type\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Include the header file for SplashOutputDev\\n\\n// Function under test\\n// Note: The function definition should be provided in the corresponding source file.\\n// void SplashOutputDev::drawChar(GfxState *state, double x, double y, double width, double height, double scaleX, double scaleY, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool isBold, GBool isItalic, GBool isUnderlined);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function call\\n    GfxState gfxState(72.0, 72.0, nullptr, 0, false); // Assuming a constructor that requires these parameters\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Prepare Unicode array\\n    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Ensure at least 1 Unicode character\\n    std::vector<Unicode> unicode(unicodeCount);\\n    for (int i = 0; i < unicodeCount; ++i) {\\n        unicode[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n\\n    // Consume boolean values\\n    GBool isBold = stream.ConsumeBool();\\n    GBool isItalic = stream.ConsumeBool();\\n    GBool isUnderlined = stream.ConsumeBool();\\n\\n    // Create an instance of SplashOutputDev with appropriate parameters\\n    SplashColorMode colorMode = splashModeRGB; // Assuming splashModeRGB is a valid value\\n    int bitmapRowPad = 4; // Example padding value\\n    GBool reverseVideo = gFalse; // Example value\\n    SplashColorPtr paperColor = nullptr; // Assuming we can pass nullptr for paper color\\n\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor);\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, scaleX, scaleY, charCode, fontSize, unicode.data(), unicodeCount, isBold, isItalic, isUnderlined);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <stdexcept> // For std::runtime_error\\n#include \"GfxState.h\" // Assuming this file defines GfxState\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Updated to include the correct path for SplashOutputDev\\n#include \"/src/xpdf-4.05/splash/SplashTypes.h\" // Corrected path for SplashTypes.h\\n#include \"/src/xpdf-4.05/xpdf/CharTypes.h\" // Include the header for Unicode\\n\\n// Assuming these types are defined in the included headers\\nusing GBool = int; // Define GBool if not defined\\n// SplashColorMode, SplashColorPtr, and Unicode are now properly included from their respective headers\\nusing CharCode = uint32_t; // Define CharCode if not defined\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for the drawChar function\\n    std::vector<uint8_t> gfx_state_data = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(GfxState));\\n    if (gfx_state_data.size() != sizeof(GfxState)) {\\n        throw std::runtime_error(\"Invalid size for GfxState\");\\n    }\\n    GfxState* gfx_state = reinterpret_cast<GfxState*>(gfx_state_data.data());\\n    \\n    double param1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param4 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param5 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param6 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    \\n    uint32_t char_code_value = fuzzed_data.ConsumeIntegral<uint32_t>();\\n    CharCode char_code = static_cast<CharCode>(char_code_value);\\n    \\n    int int_param = fuzzed_data.ConsumeIntegral<int>();\\n    \\n    size_t unicode_length = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 byte\\n    std::string unicode_data = fuzzed_data.ConsumeRandomLengthString(); // Changed to ConsumeRandomLengthString\\n    if (unicode_data.size() < unicode_length) {\\n        throw std::runtime_error(\"Invalid size for Unicode data\");\\n    }\\n    Unicode* unicode_ptr = reinterpret_cast<Unicode*>(unicode_data.data());\\n\\n    int int_param2 = fuzzed_data.ConsumeIntegral<int>();\\n    GBool bool_param1 = static_cast<GBool>(fuzzed_data.ConsumeIntegral<uint8_t>() % 2); // Randomly 0 or 1\\n    GBool bool_param2 = static_cast<GBool>(fuzzed_data.ConsumeIntegral<uint8_t>() % 2);\\n    GBool bool_param3 = static_cast<GBool>(fuzzed_data.ConsumeIntegral<uint8_t>() % 2);\\n\\n    // Initialize SplashOutputDev with appropriate parameters\\n    SplashColorMode colorMode = splashModeRGB; // Use a valid SplashColorMode\\n    int bitmapRowPad = 0; // Replace with valid bitmap row padding\\n    GBool reverseVideo = gFalse; // Replace with valid GBool value\\n    SplashColorPtr paperColor = nullptr; // Replace with valid paper color pointer\\n\\n    // Create the SplashOutputDev object using the constructor\\n    SplashOutputDev splash_output_dev(colorMode, bitmapRowPad, reverseVideo, paperColor);\\n\\n    // Call the function under test\\n    splash_output_dev.drawChar(gfx_state, param1, param2, param3, param4, param5, param6, char_code, int_param, unicode_ptr, int_param2, bool_param1, bool_param2, bool_param3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}