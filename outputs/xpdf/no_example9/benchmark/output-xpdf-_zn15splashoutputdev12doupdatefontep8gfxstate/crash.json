{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "33.99",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming GfxState is defined somewhere in the codebase.\\nclass GfxState {\\npublic:\\n    // Example members for the sake of illustration. Adjust according to the actual GfxState definition.\\n    int width;\\n    int height;\\n    std::vector<uint8_t> data;\\n\\n    GfxState(int w, int h, const std::vector<uint8_t>& d) : width(w), height(h), data(d) {}\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Function implementation (not provided, just a placeholder).\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create parameters for the function under test\\n    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Width should not be zero\\n    int height = stream.ConsumeIntegralInRange<int>(1, 1000); // Height should not be zero\\n    size_t data_size = stream.ConsumeIntegralInRange<size_t>(1, 1024); // Data size should not be zero\\n    std::vector<uint8_t> gfx_data = stream.ConsumeBytes<uint8_t>(data_size);\\n\\n    // Initialize GfxState with the consumed parameters\\n    GfxState gfx_state(width, height, gfx_data);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splash_output_dev;\\n\\n    // Call the function to fuzz\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splash_output_dev.doUpdateFont(&gfx_state);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "33.33",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming GfxState is a defined class in your project\\nclass GfxState {\\npublic:\\n    // Example member variables\\n    int fontSize;\\n    std::string fontName;\\n\\n    // Constructor and other member functions\\n    GfxState() : fontSize(12), fontName(\"default\") {\\n        // Initialize with default values\\n    }\\n\\n    // Method to set font size and name\\n    void setFont(int size, const std::string& name) {\\n        fontSize = size;\\n        fontName = name;\\n    }\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Function implementation\\n        // For example, we can print the state to see if it's being updated correctly\\n        // In a real scenario, this would be where the font update logic is implemented\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Consume data to modify gfxState\\n    int fontSize = stream.ConsumeIntegral<int>() % 100; // Example: font size between 0 and 99\\n    std::string fontName = stream.ConsumeRandomLengthString(10); // Example: random font name up to 10 characters\\n\\n    gfxState.setFont(fontSize, fontName);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}