{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <vector>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"gtypes.h\"          // Include the header for GBool\\n#include \"CharTypes.h\"      // Include the header for Unicode\\n#include \"GfxState.h\"       // Include the header for GfxState\\n#include \"OutputDev.h\"      // Include the header for OutputDev\\n#include \"SplashOutputDev.h\" // Include the header file for SplashOutputDev\\n\\n// Additional includes to resolve undefined reference errors\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState with required parameters (example values)\\n    double hDPIA = stream.ConsumeFloatingPoint<double>();\\n    double vDPIA = stream.ConsumeFloatingPoint<double>();\\n    PDFRectangle *pageBox = nullptr; // Assuming a valid pointer or use a mock\\n    int rotateA = stream.ConsumeIntegral<int>();\\n    GBool upsideDown = stream.ConsumeBool();\\n\\n    GfxState gfxState(hDPIA, vDPIA, pageBox, rotateA, upsideDown);\\n\\n    // Consume doubles for the double parameters\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n\\n    // Consume int parameters\\n    int intParam1 = stream.ConsumeIntegral<int>();\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n\\n    // Initialize Unicode\\n    Unicode unicodeObj; // Assuming a default constructor is available\\n\\n    // Consume GBool parameters\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Create an instance of SplashOutputDev with required parameters\\n    SplashColorMode colorMode = static_cast<SplashColorMode>(stream.ConsumeIntegral<int>() % 3); // Example mode\\n    int bitmapRowPad = stream.ConsumeIntegral<int>() % 32; // Example padding\\n    GBool reverseVideo = stream.ConsumeBool();\\n    SplashColorPtr paperColor = nullptr; // Assuming a valid pointer or use a mock\\n\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor);\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam1, &unicodeObj, intParam2, boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <iostream> // Include for potential debugging or logging\\n#include <cstddef> // Include for size_t\\n#include <cstdbool> // Include for bool type\\n#include <string> // Include for std::string if needed\\n#include \"/src/xpdf-4.05/xpdf/Unicode.h\" // Include the header for Unicode\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Include the header for SplashOutputDev\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, replace with actual type\\nusing GBool = bool; // Example definition, replace with actual type\\n\\n// Function under test\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double xOffset, double yOffset, CharCode charCode, int fontSize,\\n                  Unicode *unicode, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {\\n        // Implementation of drawChar\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function call\\n    GfxState gfxState; // Create an instance of GfxState\\n    GfxState *gfxStatePtr = &gfxState; // Pointer to GfxState\\n\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double xOffset = stream.ConsumeFloatingPoint<double>();\\n    double yOffset = stream.ConsumeFloatingPoint<double>();\\n    \\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Create a Unicode object and set its size\\n    Unicode unicodeArray[10]; // Example fixed size, adjust as necessary\\n    int unicodeSize = stream.ConsumeIntegralInRange<int>(1, 10); // Ensure non-zero size\\n    Unicode *unicodePtr = unicodeArray; // Pointer to Unicode array\\n\\n    // Fill the Unicode array with data\\n    for (int i = 0; i < unicodeSize; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<CharCode>(); // Replace with actual initialization\\n    }\\n\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n    splashOutputDev.drawChar(gfxStatePtr, x, y, width, height, xOffset, yOffset, charCode, fontSize, unicodePtr, unicodeSize, flag1, flag2, flag3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}