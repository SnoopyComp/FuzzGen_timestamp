{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "58.52",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <cstdlib> // For size_t\\n#include <string>  // For std::string\\n\\n// Assuming the necessary includes for PDFDoc, OutputDev, GBool, and DW_TAG_subroutine_typeInfinite loop are available\\n// For demonstration purposes, we will define dummy classes and types here\\nclass OutputDev {};\\nusing GBool = bool;\\nusing DW_TAG_subroutine_typeInfinite = int; // Placeholder type\\n\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double zoomX, double zoomY,\\n                      int rotation, GBool renderAnnotations, GBool renderForms, GBool renderImages,\\n                      DW_TAG_subroutine_typeInfinite *subroutine, void *userData) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    OutputDev *outputDev = new OutputDev(); // Ensure this is not NULL\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Example range for pages\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd >= pageStart\\n    double zoomX = stream.ConsumeFloatingPoint<double>();\\n    double zoomY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees\\n    GBool renderAnnotations = stream.ConsumeBool();\\n    GBool renderForms = stream.ConsumeBool();\\n    GBool renderImages = stream.ConsumeBool();\\n    \\n    // Use ConsumeRandomLengthString for userData\\n    std::string userDataStr = stream.ConsumeRandomLengthString();\\n    void *userData = reinterpret_cast<void*>(const_cast<char*>(userDataStr.data())); // Non-NULL userData\\n\\n    // Allocate subroutine and ensure it's not NULL\\n    DW_TAG_subroutine_typeInfinite *subroutine = new DW_TAG_subroutine_typeInfinite(); // Ensure this is not NULL\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdfDoc.displayPages(outputDev, pageStart, pageEnd, zoomX, zoomY, rotation, renderAnnotations, renderForms, renderImages, subroutine, userData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n\\n    // Clean up allocated memory\\n    delete outputDev;\\n    delete subroutine;\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include PDFDoc header instead of GBool.h\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include OutputDev header\\n#include \"/src/xpdf-4.05/xpdf/Outline.h\" // Include Outline header as an alternative\\n#include \"/src/xpdf-4.05/goo/gfile.h\" // Include gfile.h for Ref and Object types\\n#include \"/src/xpdf-4.05/goo/gmem.h\"  // Include gmem.h for memory management types\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\" // Include GlobalParams for additional dependencies\\n\\n// Create a derived class from OutputDev to implement the pure virtual methods\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    virtual GBool upsideDown() override {\\n        return GBool(false); // Implement as needed\\n    }\\n    virtual GBool useDrawChar() override {\\n        return GBool(true); // Implement as needed\\n    }\\n    virtual GBool interpretType3Chars() override {\\n        return GBool(false); // Implement as needed\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function call\\n    MyOutputDev outputDev; // Use the derived class\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming valid page range\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // pageEnd should be >= pageStart\\n    double zoomX = stream.ConsumeFloatingPoint<double>();\\n    double zoomY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // rotation in degrees\\n    GBool renderAnnotations = stream.ConsumeBool() ? GBool(true) : GBool(false);\\n    GBool renderForms = stream.ConsumeBool() ? GBool(true) : GBool(false);\\n    GBool renderLinks = stream.ConsumeBool() ? GBool(true) : GBool(false);\\n    \\n    // Use a valid constructor for PDFDoc\\n    GString *fileNameA = new GString(\"dummy.pdf\"); // Use a dummy filename\\n    PDFDoc pdfDoc(fileNameA); // Initialize PDFDoc with a valid constructor\\n\\n    // Call the function under test\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoomX, zoomY, rotation, renderAnnotations, renderForms, renderLinks, nullptr);\\n\\n    // Clean up\\n    delete fileNameA;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}