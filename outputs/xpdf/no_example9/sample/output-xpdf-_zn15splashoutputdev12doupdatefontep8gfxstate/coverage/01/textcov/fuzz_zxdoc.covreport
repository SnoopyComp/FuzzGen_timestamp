LLVMFuzzerTestOneInput:
   27|      5|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   28|      5|auto start_target = std::chrono::high_resolution_clock::now();
   29|      5|    FuzzedDataProvider stream(data, size);
   30|       |
   31|       |    // Create parameters for the function under test
   32|      5|    int width = stream.ConsumeIntegralInRange<int>(1, 1000); // Width should not be zero
   33|      5|    int height = stream.ConsumeIntegralInRange<int>(1, 1000); // Height should not be zero
   34|      5|    size_t data_size = stream.ConsumeIntegralInRange<size_t>(1, 1024); // Data size should not be zero
   35|      5|    std::vector<uint8_t> gfx_data = stream.ConsumeBytes<uint8_t>(data_size);
   36|       |
   37|       |    // Initialize GfxState with the consumed parameters
   38|      5|    GfxState gfx_state(width, height, gfx_data);
   39|       |
   40|       |    // Create an instance of SplashOutputDev
   41|      5|    SplashOutputDev splash_output_dev;
   42|       |
   43|       |    // Call the function to fuzz
   44|      5|	auto start_func = std::chrono::high_resolution_clock::now();
   45|      5|    splash_output_dev.doUpdateFont(&gfx_state);
   46|      5|	auto end_func = std::chrono::high_resolution_clock::now();
   47|      5|auto end_target = std::chrono::high_resolution_clock::now();
   48|      5|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   49|       |
   50|      5|    return 0;
   51|      5|}
_ZN8GfxStateC2EiiRKNSt3__16vectorIhNS0_9allocatorIhEEEE:
   17|      5|    GfxState(int w, int h, const std::vector<uint8_t>& d) : width(w), height(h), data(d) {}
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   22|      5|    void doUpdateFont(GfxState *state) {
   23|       |        // Function implementation (not provided, just a placeholder).
   24|      5|    }

