LLVMFuzzerTestOneInput:
   38|     15|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   39|     15|auto start_target = std::chrono::high_resolution_clock::now();
   40|       |    // Create a FuzzedDataProvider instance
   41|     15|    FuzzedDataProvider stream(data, size);
   42|       |
   43|       |    // Initialize GfxState
   44|     15|    GfxState gfxState;
   45|       |
   46|       |    // Consume data to modify gfxState
   47|     15|    int fontSize = stream.ConsumeIntegral<int>() % 100; // Example: font size between 0 and 99
   48|     15|    std::string fontName = stream.ConsumeRandomLengthString(10); // Example: random font name up to 10 characters
   49|       |
   50|     15|    gfxState.setFont(fontSize, fontName);
   51|       |
   52|       |    // Create an instance of SplashOutputDev
   53|     15|    SplashOutputDev splashOutputDev;
   54|       |
   55|       |    // Call the function under test
   56|     15|	auto start_func = std::chrono::high_resolution_clock::now();
   57|     15|    splashOutputDev.doUpdateFont(&gfxState);
   58|     15|	auto end_func = std::chrono::high_resolution_clock::now();
   59|     15|auto end_target = std::chrono::high_resolution_clock::now();
   60|     15|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   61|       |
   62|     15|    return 0;
   63|     15|}
_ZN8GfxStateC2Ev:
   18|     15|    GfxState() : fontSize(12), fontName("default") {
   19|       |        // Initialize with default values
   20|     15|    }
_ZN8GfxState7setFontEiRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE:
   23|     15|    void setFont(int size, const std::string& name) {
   24|     15|        fontSize = size;
   25|     15|        fontName = name;
   26|     15|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   31|     15|    void doUpdateFont(GfxState *state) {
   32|       |        // Function implementation
   33|       |        // For example, we can print the state to see if it's being updated correctly
   34|       |        // In a real scenario, this would be where the font update logic is implemented
   35|     15|    }

