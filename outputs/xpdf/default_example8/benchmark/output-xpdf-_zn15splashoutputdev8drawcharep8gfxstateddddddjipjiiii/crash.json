{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "56.03",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint> // Include for uint32_t\\n\\n// Assuming the necessary includes for SplashOutputDev, GfxState, CharCode, Unicode, and GBool are present\\n// This is a placeholder for the actual class and types\\nclass GfxState {};\\nusing CharCode = uint32_t; // Assuming CharCode is a uint32_t type\\nusing Unicode = uint32_t;   // Assuming Unicode is a uint32_t type\\nusing GBool = bool;         // Assuming GBool is a boolean type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Assuming GfxState can be default constructed\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate Unicode array\\n    size_t unicodeArraySize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure non-null\\n    std::vector<Unicode> unicodeArray(unicodeArraySize);\\n    for (size_t i = 0; i < unicodeArraySize; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n\\n    // Prepare parameters for drawChar\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "55.07",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined elsewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, adjust according to actual definition\\nusing Unicode = uint32_t; // Example definition, adjust according to actual definition\\nusing GBool = bool; // Example definition, adjust according to actual definition\\n\\n// Dummy definition of SplashOutputDev to resolve the undeclared identifier error\\nclass SplashOutputDev {\\npublic:\\n    static void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode code, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n        // Implementation of drawChar (dummy for this example)\\n    }\\n}; // Fixed missing semicolon here\\n\\n// Function under test\\n// Removed out-of-line declaration since it's already defined in the class\\n// void SplashOutputDev::drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode code, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Consume double values for x, y, width, height, dx, dy\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n\\n    // Consume fontSize\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode array\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    for (size_t i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n    Unicode *unicodePtr = unicodeArray.data();\\n\\n    // Consume GBool flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    SplashOutputDev::drawChar(&gfxState, x, y, width, height, dx, dy, code, fontSize, unicodePtr, static_cast<int>(unicodeCount), flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}