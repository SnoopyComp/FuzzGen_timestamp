LLVMFuzzerTestOneInput:
   28|     47|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   29|     47|auto start_target = std::chrono::high_resolution_clock::now();
   30|     47|    FuzzedDataProvider stream(data, size);
   31|       |
   32|       |    // Initialize GfxState
   33|     47|    GfxState gfxState;
   34|       |
   35|       |    // Consume double values for x, y, width, height, dx, dy
   36|     47|    double x = stream.ConsumeFloatingPoint<double>();
   37|     47|    double y = stream.ConsumeFloatingPoint<double>();
   38|     47|    double width = stream.ConsumeFloatingPoint<double>();
   39|     47|    double height = stream.ConsumeFloatingPoint<double>();
   40|     47|    double dx = stream.ConsumeFloatingPoint<double>();
   41|     47|    double dy = stream.ConsumeFloatingPoint<double>();
   42|       |
   43|       |    // Consume CharCode
   44|     47|    CharCode code = stream.ConsumeIntegral<CharCode>();
   45|       |
   46|       |    // Consume fontSize
   47|     47|    int fontSize = stream.ConsumeIntegral<int>();
   48|       |
   49|       |    // Consume Unicode array
   50|     47|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character
   51|     47|    std::vector<Unicode> unicodeArray(unicodeCount);
   52|    543|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (52:24): [True: 496, False: 47]
  ------------------
   53|    496|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();
   54|    496|    }
   55|     47|    Unicode *unicodePtr = unicodeArray.data();
   56|       |
   57|       |    // Consume GBool flags
   58|     47|    GBool flag1 = stream.ConsumeBool();
   59|     47|    GBool flag2 = stream.ConsumeBool();
   60|     47|    GBool flag3 = stream.ConsumeBool();
   61|       |
   62|       |    // Call the function under test
   63|     47|	auto start_func = std::chrono::high_resolution_clock::now();
   64|     47|    SplashOutputDev::drawChar(&gfxState, x, y, width, height, dx, dy, code, fontSize, unicodePtr, static_cast<int>(unicodeCount), flag1, flag2, flag3);
   65|     47|	auto end_func = std::chrono::high_resolution_clock::now();
   66|     47|auto end_target = std::chrono::high_resolution_clock::now();
   67|     47|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   68|       |
   69|     47|    return 0;
   70|     47|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   19|     47|    static void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode code, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   20|       |        // Implementation of drawChar (dummy for this example)
   21|     47|    }

