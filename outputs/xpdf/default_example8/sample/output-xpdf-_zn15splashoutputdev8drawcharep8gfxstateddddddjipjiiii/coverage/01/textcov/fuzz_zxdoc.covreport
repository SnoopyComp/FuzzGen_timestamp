LLVMFuzzerTestOneInput:
   23|     44|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|     44|auto start_target = std::chrono::high_resolution_clock::now();
   25|     44|    FuzzedDataProvider stream(data, size);
   26|       |
   27|       |    // Initialize parameters
   28|     44|    GfxState gfxState; // Assuming GfxState can be default constructed
   29|     44|    double param1 = stream.ConsumeFloatingPoint<double>();
   30|     44|    double param2 = stream.ConsumeFloatingPoint<double>();
   31|     44|    double param3 = stream.ConsumeFloatingPoint<double>();
   32|     44|    double param4 = stream.ConsumeFloatingPoint<double>();
   33|     44|    double param5 = stream.ConsumeFloatingPoint<double>();
   34|     44|    double param6 = stream.ConsumeFloatingPoint<double>();
   35|     44|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   36|     44|    int intParam = stream.ConsumeIntegral<int>();
   37|       |    
   38|       |    // Allocate Unicode array
   39|     44|    size_t unicodeArraySize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure non-null
   40|     44|    std::vector<Unicode> unicodeArray(unicodeArraySize);
   41|    123|    for (size_t i = 0; i < unicodeArraySize; ++i) {
  ------------------
  |  Branch (41:24): [True: 79, False: 44]
  ------------------
   42|     79|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();
   43|     79|    }
   44|       |
   45|       |    // Prepare parameters for drawChar
   46|     44|    int intParam2 = stream.ConsumeIntegral<int>();
   47|     44|    GBool boolParam1 = stream.ConsumeBool();
   48|     44|    GBool boolParam2 = stream.ConsumeBool();
   49|     44|    GBool boolParam3 = stream.ConsumeBool();
   50|       |
   51|       |    // Create an instance of SplashOutputDev
   52|     44|    SplashOutputDev splashOutputDev;
   53|       |
   54|       |    // Call the function under test
   55|     44|	auto start_func = std::chrono::high_resolution_clock::now();
   56|     44|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);
   57|     44|	auto end_func = std::chrono::high_resolution_clock::now();
   58|     44|auto end_target = std::chrono::high_resolution_clock::now();
   59|     44|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   60|       |
   61|     44|    return 0;
   62|     44|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   18|     44|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   19|       |        // Function implementation
   20|     44|    }

