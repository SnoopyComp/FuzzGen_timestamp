LLVMFuzzerTestOneInput:
   41|      9|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   42|      9|auto start_target = std::chrono::high_resolution_clock::now();
   43|       |    // Create a fuzzed data provider
   44|      9|    FuzzedDataProvider stream(data, size);
   45|       |
   46|       |    // Create an instance of GfxState
   47|      9|    GfxState gfxState;
   48|       |
   49|       |    // Consume data to initialize GfxState
   50|       |    // Here we use ConsumeRandomLengthString to get a valid string length
   51|      9|    std::string consumedData = stream.ConsumeRandomLengthString(4); // 4 bytes for an int
   52|      9|    if (consumedData.size() == sizeof(int)) {
  ------------------
  |  Branch (52:9): [True: 2, False: 7]
  ------------------
   53|      2|        gfxState.setParameters(reinterpret_cast<const uint8_t*>(consumedData.data()), consumedData.size());
   54|      2|    }
   55|       |
   56|       |    // Create an instance of SplashOutputDev
   57|      9|    SplashOutputDev splashOutputDev;
   58|       |
   59|       |    // Call the function under test
   60|      9|	auto start_func = std::chrono::high_resolution_clock::now();
   61|      9|    splashOutputDev.doUpdateFont(&gfxState);
   62|      9|	auto end_func = std::chrono::high_resolution_clock::now();
   63|      9|auto end_target = std::chrono::high_resolution_clock::now();
   64|      9|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   65|       |
   66|      9|    return 0; // Return success
   67|      9|}
_ZN8GfxStateC2Ev:
   17|      9|    GfxState() : someParameter(0) {
   18|       |        // Initialize members if necessary
   19|      9|    }
_ZN8GfxState13setParametersEPKhm:
   22|      2|    void setParameters(const uint8_t *data, size_t size) {
   23|      2|        if (size >= sizeof(someParameter)) {
  ------------------
  |  Branch (23:13): [True: 2, False: 0]
  ------------------
   24|      2|            std::memcpy(&someParameter, data, sizeof(someParameter));
   25|      2|        }
   26|      2|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   33|      9|    void doUpdateFont(GfxState *gstate) {
   34|       |        // Implementation of the function...
   35|       |        // For example, we can print or log the state
   36|       |        // This is just a placeholder for demonstration
   37|       |        // Actual implementation would depend on the logic of the application
   38|      9|    }

