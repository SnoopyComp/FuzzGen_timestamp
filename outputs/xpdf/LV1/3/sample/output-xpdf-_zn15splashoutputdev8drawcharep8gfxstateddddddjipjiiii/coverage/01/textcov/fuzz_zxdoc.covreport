LLVMFuzzerTestOneInput:
   21|     34|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   22|     34|auto start_target = std::chrono::high_resolution_clock::now();//erase
   23|     34|    FuzzedDataProvider stream(data, size);
   24|       |
   25|       |    // Initialize parameters
   26|     34|    GfxState gfxState; // Assuming default constructor is available and valid
   27|     34|    double param1 = stream.ConsumeFloatingPoint<double>();
   28|     34|    double param2 = stream.ConsumeFloatingPoint<double>();
   29|     34|    double param3 = stream.ConsumeFloatingPoint<double>();
   30|     34|    double param4 = stream.ConsumeFloatingPoint<double>();
   31|     34|    double param5 = stream.ConsumeFloatingPoint<double>();
   32|     34|    double param6 = stream.ConsumeFloatingPoint<double>();
   33|     34|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   34|     34|    int intParam = stream.ConsumeIntegral<int>();
   35|       |    
   36|       |    // Allocate Unicode array
   37|     34|    size_t unicodeArraySize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element
   38|     34|    std::vector<Unicode> unicodeArray(unicodeArraySize);
   39|     34|    stream.ConsumeData(unicodeArray.data(), unicodeArraySize * sizeof(Unicode));
   40|       |
   41|     34|    int intParam2 = stream.ConsumeIntegral<int>();
   42|     34|    GBool boolParam1 = stream.ConsumeBool();
   43|     34|    GBool boolParam2 = stream.ConsumeBool();
   44|     34|    GBool boolParam3 = stream.ConsumeBool();
   45|       |
   46|       |    // Call the function under test
   47|     34|    SplashOutputDev splashOutputDev;
   48|     34|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   49|     34|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);
   50|     34|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   51|     34|auto end_target = std::chrono::high_resolution_clock::now();//erase
   52|     34|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   53|       |
   54|     34|    return 0;
   55|     34|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddiiPiibbb:
   16|     34|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   17|       |        // Function implementation
   18|     34|    }

