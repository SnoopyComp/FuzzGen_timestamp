{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "55.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <vector>\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined elsewhere in your codebase\\nclass GfxState {};\\nusing CharCode = int; // Example definition, replace with actual type\\nusing Unicode = int;   // Example definition, replace with actual type\\nusing GBool = bool;    // Example definition, replace with actual type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Assuming default constructor is available and valid\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate Unicode array\\n    size_t unicodeArraySize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element\\n    std::vector<Unicode> unicodeArray(unicodeArraySize);\\n    stream.ConsumeData(unicodeArray.data(), unicodeArraySize * sizeof(Unicode));\\n\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint> // For uint32_t\\n\\n// Include standard libraries before project-specific libraries\\n#include \"Object.h\"  // Assuming Object is defined here\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Updated to include the correct path for SplashOutputDev\\n#include \"Dict.h\"    // Assuming Dict is defined here\\n#include \"Stream.h\"  // Assuming Stream is defined here\\n#include \"GfxState.h\" // Include GfxState before SplashOutputDev\\n\\n// Assuming these types are defined somewhere in the codebase\\n// The GfxState class is now included from the project header\\nusing CharCode = uint32_t; // Assuming CharCode is a 32-bit unsigned integer\\nusing Unicode = uint32_t;   // Assuming Unicode is also a 32-bit unsigned integer\\nusing GBool = int;          // Assuming GBool is an integer (0 or 1)\\n\\n// The function under test\\nvoid SplashOutputDev::drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n    // Function implementation\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate a Unicode array with a size defined by the input\\n    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 100); // Ensure at least 1 Unicode character\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    for (int i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n\\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool() ? 1 : 0;\\n    GBool flag2 = stream.ConsumeBool() ? 1 : 0;\\n    GBool flag3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Create an instance of GfxState with appropriate parameters\\n    // Assuming some default values for the constructor parameters\\n    double hDPI = 72.0;\\n    double vDPI = 72.0;\\n    PDFRectangle* pageBox = nullptr; // Assuming a nullptr is acceptable\\n    int rotate = 0; // Assuming no rotation\\n    GfxState gfxState(hDPI, vDPI, pageBox, rotate, gFalse); // Adjust parameters as necessary\\n\\n    // Create an instance of SplashOutputDev with appropriate parameters\\n    SplashColorMode colorMode = splashModeRGB8; // Changed to a valid color mode\\n    int bitmapRowPad = 4; // Assuming a default row padding\\n    GBool reverseVideo = gFalse; // Assuming no reverse video\\n    SplashColorPtr paperColor = nullptr; // Assuming a nullptr is acceptable\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor); // Adjust parameters as necessary\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeCount, flag1, flag2, flag3);\\n\\n    return 0; // Indicate successful execution\\n}",
        "model": ""
    }

    ]
}