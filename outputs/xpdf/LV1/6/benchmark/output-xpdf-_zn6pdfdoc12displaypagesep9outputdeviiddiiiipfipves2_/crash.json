{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Include the actual header file for PDFDoc and related headers\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Actual header for PDFDoc\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Actual header for OutputDev\\n#include \"/src/xpdf-4.05/goo/gfile.h\" // Example alternative for GBool\\n#include \"/src/xpdf-4.05/goo/gmem.h\" // Example alternative for GBool\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\" // Example alternative for GBool\\n#include \"/src/xpdf-4.05/goo/Trace.h\" // Example alternative for GBool\\n#include \"/src/xpdf-4.05/xpdf/Zoox.h\" // Example alternative for GBool\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\" // Including Gfx.h as a potential alternative for DW_TAG_subroutine_type\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function call\\n    std::string fileName = stream.ConsumeRandomLengthString(100); // Random filename string\\n    GString *gFileName = new GString(fileName.c_str());\\n\\n    // Create OutputDev instance using ConsumeRandomLengthString to ensure valid input\\n    std::string outputDevData = stream.ConsumeRandomLengthString(sizeof(OutputDev));\\n    OutputDev* outputDev = new OutputDev(); // Allocate OutputDev properly\\n    if (outputDev == nullptr || outputDevData.size() != sizeof(OutputDev)) {\\n        delete gFileName; // Clean up allocated memory for GString\\n        return 0; // Not enough data, exit\\n    }\\n    std::memcpy(outputDev, outputDevData.data(), sizeof(OutputDev));\\n\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming 1-100 pages\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming 1-100 pages\\n    double zoomX = stream.ConsumeFloatingPoint<double>();\\n    double zoomY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees\\n    GBool gBool1 = static_cast<GBool>(stream.ConsumeIntegral<uint8_t>() % 2); // Random GBool\\n    GBool gBool2 = static_cast<GBool>(stream.ConsumeIntegral<uint8_t>() % 2); // Random GBool\\n    GBool gBool3 = static_cast<GBool>(stream.ConsumeIntegral<uint8_t>() % 2); // Random GBool\\n\\n    // Validate size before consuming bytes for infiniteLoop\\n    std::string infiniteLoopData = stream.ConsumeRandomLengthString(sizeof(void*));\\n    if (infiniteLoopData.size() != sizeof(void*)) {\\n        delete outputDev; // Clean up allocated memory for OutputDev\\n        delete gFileName; // Clean up allocated memory for GString\\n        return 0; // Not enough data, exit\\n    }\\n    void* infiniteLoop = reinterpret_cast<void*>(const_cast<char*>(infiniteLoopData.data()));\\n\\n    // Validate size for userData\\n    std::string userDataData = stream.ConsumeRandomLengthString(sizeof(void*));\\n    if (userDataData.size() != sizeof(void*)) {\\n        delete outputDev; // Clean up allocated memory for OutputDev\\n        delete gFileName; // Clean up allocated memory for GString\\n        return 0; // Not enough data, exit\\n    }\\n    void* userData = reinterpret_cast<void*>(const_cast<char*>(userDataData.data()));\\n\\n    // Create PDFDoc instance\\n    PDFDoc pdfDoc(gFileName); // Assuming PDFDoc constructor takes GString*\\n\\n    // Call the function under test\\n    pdfDoc.displayPages(outputDev, pageStart, pageEnd, zoomX, zoomY, rotation, gBool1, gBool2, gBool3, infiniteLoop, nullptr); // Pass nullptr for abortCheckCbk\\n\\n    delete outputDev; // Clean up allocated memory for OutputDev\\n    delete gFileName; // Clean up allocated memory for GString\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <vector>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\" // Include the header file for PDFDoc\\n#include \"OutputDev.h\" // Include the header file for OutputDev\\n#include \"gtypes.h\" // Include the header for GBool definition\\n#include \"GString.h\" // Include the header for GString\\n\\n// Removed the redefinition of OutputDev\\n// using GBool = bool; // Removed redefinition of GBool\\ntypedef int GBool; // Use the original typedef from gtypes.h\\n\\nstruct DW_TAG_subroutine_typeInfiniteLoop {};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider with the input data\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an OutputDev object\\n    // OutputDev output_dev; // This will not work since OutputDev is abstract\\n    // Instead, we need to create a derived class that implements the pure virtual methods\\n    class TestOutputDev : public OutputDev {\\n    public:\\n        GBool upsideDown() override { return false; }\\n        GBool useDrawChar() override { return false; }\\n        GBool interpretType3Chars() override { return false; }\\n    };\\n\\n    TestOutputDev output_dev; // Use the derived class\\n\\n    // Consume integers for the page range\\n    int start_page = stream.ConsumeIntegralInRange<int>(1, 1000); // Assuming page numbers start from 1\\n    int end_page = stream.ConsumeIntegralInRange<int>(start_page, 1000); // Ensure end_page >= start_page\\n\\n    // Consume doubles for the zoom level and other parameters\\n    double zoom_level = stream.ConsumeFloatingPoint<double>();\\n    double rotation = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume an integer for some parameter\\n    int some_param = stream.ConsumeIntegral<int>();\\n\\n    // Consume boolean values\\n    GBool bool_param1 = stream.ConsumeBool();\\n    GBool bool_param2 = stream.ConsumeBool();\\n    GBool bool_param3 = stream.ConsumeBool();\\n\\n    // Create a DW_TAG_subroutine_typeInfiniteLoop object\\n    DW_TAG_subroutine_typeInfiniteLoop infinite_loop;\\n\\n    // Create a vector for the remaining bytes and get its data pointer\\n    std::vector<uint8_t> remaining_bytes = stream.ConsumeRemainingBytes<uint8_t>();\\n    void *void_ptr = remaining_bytes.data(); // Ensure we have some data for the pointer\\n\\n    // Create a PDFDoc object with a valid constructor\\n    GString fileNameA(\"dummy.pdf\"); // Assuming a valid filename is needed\\n    PDFDoc pdf_doc(&fileNameA); // Use the constructor that takes a GString*\\n\\n    // Define a function pointer for abortCheckCbk\\n    GBool (*abortCheckCbk)(void *) = nullptr; // Assuming we can pass nullptr for this callback\\n\\n    // Call the function under test\\n    // Ensure that the parameters are valid and not null\\n    if (start_page > 0 && end_page >= start_page) {\\n        pdf_doc.displayPages(&output_dev, start_page, end_page, zoom_level, rotation, some_param, bool_param1, bool_param2, bool_param3, abortCheckCbk, void_ptr);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}