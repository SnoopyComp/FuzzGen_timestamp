LLVMFuzzerTestOneInput:
   44|     11|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   45|     11|auto start_target = std::chrono::high_resolution_clock::now();//erase
   46|     11|    FuzzedDataProvider fuzzed_data(data, size);
   47|       |
   48|       |    // Create an instance of SplashOutputDev
   49|     11|    SplashOutputDev splashOutputDev;
   50|       |
   51|       |    // Initialize GfxState
   52|     11|    GfxState gfxState;
   53|       |
   54|       |    // Generate a string for the font name from fuzzed data
   55|     11|    std::string fontName = fuzzed_data.ConsumeRandomLengthString(10); // Generate a random string of max length 10
   56|     11|    gfxState.setFontName(fontName);
   57|       |
   58|       |    // Call the function to fuzz
   59|     11|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   60|     11|    splashOutputDev.doUpdateFont(&gfxState);
   61|     11|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   62|     11|auto end_target = std::chrono::high_resolution_clock::now();//erase
   63|     11|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   64|       |
   65|     11|    return 0;
   66|     11|}
_ZN8GfxStateC2Ev:
   14|     11|    GfxState() : fontName("") {
   15|       |        // Initialize members as needed
   16|     11|    }
_ZN8GfxState11setFontNameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE:
   18|     11|    void setFontName(const std::string &name) {
   19|     11|        fontName = name;
   20|     11|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   32|     11|    void doUpdateFont(GfxState *state) {
   33|       |        // Implementation of doUpdateFont, now utilizing GfxState
   34|     11|        if (!state->getFontName().empty()) {
  ------------------
  |  Branch (34:13): [True: 10, False: 1]
  ------------------
   35|       |            // Example logic using the font name
   36|       |            // This simulates some processing with the font
   37|     10|            printf("Updating font to: %s\n", state->getFontName().c_str());
   38|     10|        } else {
   39|      1|            printf("No font name provided.\n");
   40|      1|        }
   41|     11|    }
_ZNK8GfxState11getFontNameEv:
   22|     21|    const std::string& getFontName() const {
   23|     21|        return fontName;
   24|     21|    }

