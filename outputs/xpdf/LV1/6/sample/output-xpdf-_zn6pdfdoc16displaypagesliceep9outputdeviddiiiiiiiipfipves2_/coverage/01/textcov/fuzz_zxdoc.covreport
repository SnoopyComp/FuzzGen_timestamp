_ZN6PDFDoc16displayPageSliceEP9OutputDeviddibbbiiiiP30DW_TAG_subroutine_typeInfinitePv:
   22|     43|void PDFDoc::displayPageSlice(OutputDev *outputDev, int pageNum, double x1, double y1, int width, GBool isPrint, GBool isRender, GBool isAnnotate, int rotate, int pageIndex, int scale, int offset, DW_TAG_subroutine_typeInfinite *subroutineType, void *userData) {
   23|       |    // Function implementation...
   24|     43|}
LLVMFuzzerTestOneInput:
   26|     43|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   27|     43|auto start_target = std::chrono::high_resolution_clock::now();//erase
   28|     43|    FuzzedDataProvider stream(data, size);
   29|       |
   30|       |    // Initialize parameters
   31|     43|    OutputDev *outputDev = new OutputDev(); // Ensure this is not NULL
   32|     43|    int pageNum = stream.ConsumeIntegral<int>();
   33|     43|    double x1 = stream.ConsumeFloatingPoint<double>();
   34|     43|    double y1 = stream.ConsumeFloatingPoint<double>();
   35|     43|    int width = stream.ConsumeIntegral<int>();
   36|     43|    GBool isPrint = stream.ConsumeBool();
   37|     43|    GBool isRender = stream.ConsumeBool();
   38|     43|    GBool isAnnotate = stream.ConsumeBool();
   39|     43|    int rotate = stream.ConsumeIntegral<int>();
   40|     43|    int pageIndex = stream.ConsumeIntegral<int>();
   41|     43|    int scale = stream.ConsumeIntegral<int>();
   42|     43|    int offset = stream.ConsumeIntegral<int>();
   43|       |    
   44|       |    // Create a subroutine type object (ensure it's not NULL)
   45|     43|    DW_TAG_subroutine_typeInfinite *subroutineType = new DW_TAG_subroutine_typeInfinite();
   46|       |    
   47|       |    // Create user data pointer using ConsumeRandomLengthString
   48|     43|    std::string userDataStr = stream.ConsumeRandomLengthString();
   49|     43|    void *userData = reinterpret_cast<void*>(userDataStr.data()); // Example user data
   50|       |    
   51|       |    // Call the function under test
   52|     43|    PDFDoc pdfDoc; // Assuming PDFDoc is defined somewhere
   53|     43|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   54|     43|    pdfDoc.displayPageSlice(outputDev, pageNum, x1, y1, width, isPrint, isRender, isAnnotate, rotate, pageIndex, scale, offset, subroutineType, userData);
   55|     43|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   56|       |    
   57|       |    // Clean up allocated resources
   58|     43|    delete outputDev;
   59|     43|    delete subroutineType;
   60|     43|auto end_target = std::chrono::high_resolution_clock::now();//erase
   61|     43|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   62|       |
   63|     43|    return 0;
   64|     43|}

