LLVMFuzzerTestOneInput:
   22|     35|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   23|     35|auto start_target = std::chrono::high_resolution_clock::now();//erase
   24|     35|    FuzzedDataProvider stream(data, size);
   25|       |
   26|       |    // Create an instance of SplashOutputDev
   27|     35|    SplashOutputDev splashOutputDev;
   28|       |
   29|       |    // Initialize parameters
   30|     35|    GfxState gfxState; // Assuming this can be default constructed
   31|     35|    double param1 = stream.ConsumeFloatingPoint<double>();
   32|     35|    double param2 = stream.ConsumeFloatingPoint<double>();
   33|     35|    double param3 = stream.ConsumeFloatingPoint<double>();
   34|     35|    double param4 = stream.ConsumeFloatingPoint<double>();
   35|     35|    double param5 = stream.ConsumeFloatingPoint<double>();
   36|     35|    double param6 = stream.ConsumeFloatingPoint<double>();
   37|     35|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   38|     35|    int intParam = stream.ConsumeIntegral<int>();
   39|       |    
   40|       |    // Consume a Unicode pointer
   41|     35|    size_t unicodeArraySize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure it's not zero
   42|     35|    std::vector<Unicode> unicodeArray(unicodeArraySize);
   43|     35|    stream.ConsumeData(unicodeArray.data(), unicodeArray.size() * sizeof(Unicode));
   44|     35|    Unicode *unicodePtr = unicodeArray.data();
   45|       |
   46|     35|    int intParam2 = stream.ConsumeIntegral<int>();
   47|     35|    GBool boolParam1 = stream.ConsumeBool();
   48|     35|    GBool boolParam2 = stream.ConsumeBool();
   49|     35|    GBool boolParam3 = stream.ConsumeBool();
   50|       |
   51|       |    // Call the function under test
   52|     35|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   53|     35|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);
   54|     35|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   55|     35|auto end_target = std::chrono::high_resolution_clock::now();//erase
   56|     35|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   57|       |
   58|     35|    return 0;
   59|     35|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   17|     35|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   18|       |        // Function implementation
   19|     35|    }

