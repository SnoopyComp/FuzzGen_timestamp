{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "55.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming these types are defined somewhere in your codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example type, adjust as necessary\\nusing Unicode = uint32_t; // Example type, adjust as necessary\\nusing GBool = bool; // Example type, adjust as necessary\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Assuming this can be default constructed\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Consume a Unicode pointer\\n    size_t unicodeArraySize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure it's not zero\\n    std::vector<Unicode> unicodeArray(unicodeArraySize);\\n    stream.ConsumeData(unicodeArray.data(), unicodeArray.size() * sizeof(Unicode));\\n    Unicode *unicodePtr = unicodeArray.data();\\n\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include <iostream> // Added to include standard I/O\\n#include \"/src/xpdf-4.05/goo/gtypes.h\" // Updated include for GBool, Ref, Object, Dict definitions\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Ensure this is included after standard libraries\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\" // Added include for Gfx if needed\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\" // Include GfxState.h to avoid redefinition error\\n\\n// No need to redefine GfxState since it's defined in GfxState.h\\n// class GfxState {}; // Removed this line\\n\\n// Using the types defined in gtypes.h\\n// using GBool = bool; // Removed this line as GBool is already defined\\n\\n// Forward declaration of SplashOutputDev class\\nclass SplashOutputDev {\\npublic:\\n    static void drawChar(GfxState *state, double x, double y, double width, double height, double angle,\\n                         double scale, CharCode charCode, int fontSize, Unicode *unicodeData,\\n                         int unicodeLength, GBool isBold, GBool isItalic, GBool isUnderlined);\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Ensure this is not NULL\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double angle = stream.ConsumeFloatingPoint<double>();\\n    double scale = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Handle Unicode data using ConsumeRandomLengthString\\n    size_t unicodeLength = stream.ConsumeIntegralInRange<size_t>(1, 100); // Avoid zero length\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeLength);\\n    std::vector<Unicode> unicodeData(unicodeString.begin(), unicodeString.end());\\n\\n    // Ensure unicodeData is not empty\\n    Unicode *unicodePtr = unicodeData.data();\\n    \\n    GBool isBold = stream.ConsumeBool();\\n    GBool isItalic = stream.ConsumeBool();\\n    GBool isUnderlined = stream.ConsumeBool();\\n\\n    // Call the function to fuzz\\n    SplashOutputDev::drawChar(&gfxState, x, y, width, height, angle, scale, charCode, fontSize, unicodePtr, unicodeLength, isBold, isItalic, isUnderlined);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}