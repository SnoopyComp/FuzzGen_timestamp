{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cassert> // For assert\\n#include \"PDFDoc.h\" // Include the header file where PDFDoc is defined\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass OutputDev {};\\nusing GBool = int; // Assuming GBool is defined as an int, replace with actual definition\\nusing DW_TAG_subroutine_typeInfinite = int; // Placeholder type, replace with actual definition\\n\\n// Function under test (no out-of-line declaration)\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    OutputDev outputDev; // Create an instance of OutputDev\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming valid page numbers are between 1 and 100\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double zoom = stream.ConsumeFloatingPoint<double>(); // Any double value\\n    double rotation = stream.ConsumeFloatingPointInRange<double>(0.0, 360.0); // Rotation between 0 and 360 degrees\\n    int flags = stream.ConsumeIntegral<int>(); // Any integer value for flags\\n    int isPrint = stream.ConsumeBool(); // Random boolean for print flag\\n    int isView = stream.ConsumeBool(); // Random boolean for view flag\\n    int isEmbed = stream.ConsumeBool(); // Random boolean for embed flag\\n\\n    // Using ConsumeRandomLengthString for subroutine\\n    std::string subroutineData = stream.ConsumeRandomLengthString(16); // Fixed length for subroutine data\\n    DW_TAG_subroutine_typeInfinite *subroutine = reinterpret_cast<DW_TAG_subroutine_typeInfinite*>(const_cast<char*>(subroutineData.data()));\\n\\n    // Use remaining bytes as user data, store the data in a vector to keep it alive\\n    std::vector<uint8_t> userDataVec = stream.ConsumeRemainingBytes<uint8_t>();\\n    void *userData = userDataVec.empty() ? nullptr : userDataVec.data(); // Use remaining bytes as user data, check for empty\\n\\n    // Create a valid instance of PDFDoc using a dummy GString pointer\\n    GString *dummyFileName = new GString(\"dummy.pdf\"); // Assuming GString is defined in PDFDoc.h\\n    PDFDoc pdfDoc(dummyFileName); // Create an instance of PDFDoc\\n\\n    // Call the function under test\\n    // Ensure that the parameters passed to displayPages are valid\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoom, rotation, flags, isPrint, isView, isEmbed, nullptr, userData);\\n\\n    delete dummyFileName; // Clean up the allocated GString\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <string> // Include for std::string\\n#include \"PDFDoc.h\" // Include the header for PDFDoc to resolve undeclared identifier\\n#include \"GString.h\" // Include the header for GString to resolve undeclared identifier\\n\\n// Assume these types are defined somewhere in the project\\nclass OutputDev {};\\ntypedef int GBool; // Fixed typedef to match the original definition\\nusing DW_TAG_subroutine_typeInfinite_loop = int; // Placeholder for the actual type\\n\\n// Function under test\\n// Removed the out-of-line declaration since it is not defined here\\n// void PDFDoc::displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool crop, GBool rotate, GBool render, GBool (*abortCheckCbk)(void*), void *userData);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize FuzzedDataProvider\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for the function call\\n    OutputDev outputDev; // Assuming default constructor is available\\n    int pageStart = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Page range\\n    int pageEnd = fuzzed_data.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>(); // Y coordinate\\n    int zoom = fuzzed_data.ConsumeIntegralInRange<int>(1, 10); // Zoom level\\n    GBool crop = fuzzed_data.ConsumeBool(); // Crop flag\\n    GBool rotate = fuzzed_data.ConsumeBool(); // Rotate flag\\n    GBool render = fuzzed_data.ConsumeBool(); // Render flag\\n    GBool (*loop)(void*) = nullptr; // Updated to match the expected function pointer type\\n\\n    // Use ConsumeRandomLengthString to create a valid GString input\\n    std::string fileNameString = fuzzed_data.ConsumeRandomLengthString(); // Non-null user data\\n    GString *fileNameA = new GString(fileNameString.c_str()); // Create a GString from the random string\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc(fileNameA); // Assuming we have an instance of PDFDoc with a valid constructor\\n\\n    // Ensure that we have a valid PDFDoc before calling displayPages\\n    if (pdfDoc.isValid()) { // Assuming isValid() checks the integrity of the PDFDoc\\n        pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, crop, rotate, render, loop, nullptr);\\n    }\\n\\n    // Clean up\\n    delete fileNameA; // Free the allocated GString\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}