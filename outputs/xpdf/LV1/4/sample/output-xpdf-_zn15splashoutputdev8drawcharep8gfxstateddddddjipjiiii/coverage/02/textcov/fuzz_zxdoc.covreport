LLVMFuzzerTestOneInput:
   22|     45|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   23|     45|auto start_target = std::chrono::high_resolution_clock::now();//erase
   24|     45|    FuzzedDataProvider stream(data, size);
   25|       |
   26|       |    // Initialize parameters for the function
   27|     45|    GfxState gfxState; // Assuming a default constructor is available
   28|     45|    double param1 = stream.ConsumeFloatingPoint<double>();
   29|     45|    double param2 = stream.ConsumeFloatingPoint<double>();
   30|     45|    double param3 = stream.ConsumeFloatingPoint<double>();
   31|     45|    double param4 = stream.ConsumeFloatingPoint<double>();
   32|     45|    double param5 = stream.ConsumeFloatingPoint<double>();
   33|     45|    double param6 = stream.ConsumeFloatingPoint<double>();
   34|     45|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   35|     45|    int intParam = stream.ConsumeIntegral<int>();
   36|       |    
   37|       |    // Consume a Unicode array
   38|     45|    size_t unicodeArraySize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Avoiding zero size
   39|     45|    std::vector<Unicode> unicodeArray(unicodeArraySize);
   40|    146|    for (size_t i = 0; i < unicodeArraySize; ++i) {
  ------------------
  |  Branch (40:24): [True: 101, False: 45]
  ------------------
   41|    101|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();
   42|    101|    }
   43|       |    
   44|     45|    int intParam2 = stream.ConsumeIntegral<int>();
   45|     45|    GBool boolParam1 = stream.ConsumeBool();
   46|     45|    GBool boolParam2 = stream.ConsumeBool();
   47|     45|    GBool boolParam3 = stream.ConsumeBool();
   48|       |
   49|       |    // Call the function under test
   50|     45|    SplashOutputDev splashOutputDev;
   51|     45|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   52|     45|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);
   53|     45|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   54|     45|auto end_target = std::chrono::high_resolution_clock::now();//erase
   55|     45|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   56|       |
   57|     45|    return 0;
   58|     45|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   17|     45|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   18|       |        // Function implementation
   19|     45|    }

