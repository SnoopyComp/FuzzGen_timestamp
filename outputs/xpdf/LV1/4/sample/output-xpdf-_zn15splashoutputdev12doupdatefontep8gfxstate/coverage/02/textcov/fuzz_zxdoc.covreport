LLVMFuzzerTestOneInput:
   29|     19|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   30|     19|auto start_target = std::chrono::high_resolution_clock::now();//erase
   31|       |    // Create a FuzzedDataProvider object
   32|     19|    FuzzedDataProvider stream(data, size);
   33|       |
   34|       |    // Create an instance of SplashOutputDev
   35|     19|    SplashOutputDev splashOutputDev;
   36|       |
   37|       |    // Initialize a GfxState object
   38|     19|    GfxState gfxState;
   39|       |
   40|       |    // Get a string input from the fuzzed data
   41|     19|    std::string fontData = stream.ConsumeRandomLengthString(100); // Consuming a random length string for testing
   42|       |
   43|       |    // Call the function to fuzz
   44|     19|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   45|     19|    splashOutputDev.doUpdateFont(&gfxState, fontData);
   46|     19|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   47|     19|auto end_target = std::chrono::high_resolution_clock::now();//erase
   48|     19|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   49|       |
   50|     19|    return 0;
   51|     19|}
_ZN8GfxStateC2Ev:
   14|     19|    GfxState() {
   15|       |        // Initialize with some default values
   16|     19|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxStateRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
   22|     19|    void doUpdateFont(GfxState *state, const std::string &fontData) {
   23|       |        // Implementation of the function
   24|       |        // Assuming it processes the fontData in some way
   25|     19|    }

