LLVMFuzzerTestOneInput:
   34|     27|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   35|     27|auto start_target = std::chrono::high_resolution_clock::now();//erase
   36|       |    // Create a FuzzedDataProvider instance
   37|     27|    FuzzedDataProvider fuzzed_data(data, size);
   38|       |
   39|       |    // Initialize GfxState
   40|     27|    GfxState gfxState;
   41|       |
   42|       |    // Consume some integer value for GfxState
   43|     27|    gfxState.someValue = fuzzed_data.ConsumeIntegral<int>();
   44|       |
   45|       |    // Consume a random length string for GfxState data
   46|     27|    std::string consumed_string = fuzzed_data.ConsumeRandomLengthString(256); // Ensure max length of 256
   47|     27|    gfxState.data = std::vector<uint8_t>(consumed_string.begin(), consumed_string.end());
   48|       |
   49|       |    // Validate the size of the vector
   50|     27|    if (gfxState.data.size() < 1 || gfxState.data.size() > 256) {
  ------------------
  |  Branch (50:9): [True: 3, False: 24]
  |  Branch (50:37): [True: 0, False: 24]
  ------------------
   51|      3|        return 0; // Invalid size, do not proceed
   52|      3|    }
   53|       |
   54|       |    // Create an instance of SplashOutputDev
   55|     24|    SplashOutputDev splashOutputDev;
   56|       |
   57|       |    // Call the function under test
   58|     24|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   59|     24|    splashOutputDev.doUpdateFont(&gfxState);
   60|     24|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   61|     24|auto end_target = std::chrono::high_resolution_clock::now();//erase
   62|     24|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   63|       |
   64|     24|    return 0;
   65|     27|}
_ZN8GfxStateC2Ev:
   18|     27|    GfxState() : someValue(0) {}
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   24|     24|    void doUpdateFont(GfxState *gfxState) {
   25|       |        // Placeholder for the actual implementation
   26|       |        // This function would normally update the font based on the GfxState
   27|     24|    }

