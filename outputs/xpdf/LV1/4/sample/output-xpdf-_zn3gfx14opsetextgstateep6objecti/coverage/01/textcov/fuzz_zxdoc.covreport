_ZN3Gfx14opSetExtGStateEPNS_6ObjectEi:
   25|     30|    void opSetExtGState(Object *obj, int state) {
   26|       |        // Function implementation: update the object's state
   27|     30|        if (obj) {
  ------------------
  |  Branch (27:13): [True: 30, False: 0]
  ------------------
   28|     30|            obj->setState(state);
   29|     30|        }
   30|     30|    }
LLVMFuzzerTestOneInput:
   33|      3|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|       |    // Create a FuzzedDataProvider instance
   35|      3|    FuzzedDataProvider fuzzed_data(data, size);
   36|       |
   37|       |    // Create multiple instances of Object to maximize coverage
   38|      3|    std::vector<Gfx::Object> objects;
   39|     33|    for (int i = 0; i < 10; ++i) { // Create 10 objects
  ------------------
  |  Branch (39:21): [True: 30, False: 3]
  ------------------
   40|     30|        objects.emplace_back();
   41|     30|    }
   42|       |
   43|       |    // Consume an integer for the state parameter
   44|      3|    int state = fuzzed_data.ConsumeIntegral<int>();
   45|       |
   46|       |    // Call the function under test on each object
   47|     30|    for (auto &obj : objects) {
  ------------------
  |  Branch (47:20): [True: 30, False: 3]
  ------------------
   48|     30|        Gfx::opSetExtGState(&obj, state);
   49|     30|    }
   50|       |
   51|       |    // Optionally verify the state change (not necessary for fuzzing, but useful for debugging)
   52|       |    // for (const auto &obj : objects) {
   53|       |    //     assert(obj.getState() == state); // Uncomment for testing purposes
   54|       |    // }
   55|       |
   56|      3|    return 0;
   57|      3|}
_ZN3Gfx6Object8setStateEi:
   15|     30|        void setState(int state) {
   16|     30|            someState = state;
   17|     30|        }
_ZN3Gfx6ObjectC2Ev:
   12|     30|        Object() : someState(0) {}

