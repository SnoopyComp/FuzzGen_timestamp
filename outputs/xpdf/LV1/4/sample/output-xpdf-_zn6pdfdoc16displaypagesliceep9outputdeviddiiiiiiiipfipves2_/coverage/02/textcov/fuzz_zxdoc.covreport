LLVMFuzzerTestOneInput:
   22|     43|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   23|     43|auto start_target = std::chrono::high_resolution_clock::now();//erase
   24|     43|    FuzzedDataProvider stream(data, size);
   25|       |
   26|       |    // Initialize parameters for the function call
   27|     43|    OutputDev outputDev; // Create an instance of OutputDev
   28|     43|    int pageIndex = stream.ConsumeIntegral<int>(); // Random integer for page index
   29|     43|    double x1 = stream.ConsumeFloatingPoint<double>(); // Random double for x1
   30|     43|    double y1 = stream.ConsumeFloatingPoint<double>(); // Random double for y1
   31|     43|    int width = stream.ConsumeIntegral<int>(); // Random integer for width
   32|     43|    GBool useCache = stream.ConsumeBool(); // Random boolean for useCache
   33|     43|    GBool renderAnnotations = stream.ConsumeBool(); // Random boolean for renderAnnotations
   34|     43|    GBool renderText = stream.ConsumeBool(); // Random boolean for renderText
   35|     43|    int rotate = stream.ConsumeIntegralInRange<int>(0, 360); // Random integer for rotation
   36|     43|    int pageNum = stream.ConsumeIntegral<int>(); // Random integer for page number
   37|     43|    int totalPages = stream.ConsumeIntegral<int>(); // Random integer for total pages
   38|     43|    int flags = stream.ConsumeIntegral<int>(); // Random integer for flags
   39|     43|    DW_TAG_subroutine_typeInfiniteLoop loop; // Create an instance of the loop type
   40|       |
   41|       |    // Use ConsumeRandomLengthString instead of ConsumeBytes for userData
   42|     43|    std::string userDataString = stream.ConsumeRandomLengthString(); 
   43|     43|    void *userData = static_cast<void*>(const_cast<char*>(userDataString.data())); // Convert to void*
   44|       |
   45|       |    // Call the function under test
   46|     43|    PDFDoc pdfDoc; // Create an instance of PDFDoc
   47|     43|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   48|     43|    pdfDoc.displayPageSlice(&outputDev, pageIndex, x1, y1, width, useCache, renderAnnotations, renderText, rotate, pageNum, totalPages, flags, &loop, userData);
   49|     43|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   50|     43|auto end_target = std::chrono::high_resolution_clock::now();//erase
   51|     43|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   52|       |
   53|     43|    return 0;
   54|     43|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddibbbiiiiP34DW_TAG_subroutine_typeInfiniteLoopPv:
   17|     43|    void displayPageSlice(OutputDev *outputDev, int pageIndex, double x1, double y1, int width, GBool useCache, GBool renderAnnotations, GBool renderText, int rotate, int pageNum, int totalPages, int flags, DW_TAG_subroutine_typeInfiniteLoop *loop, void *userData) {
   18|       |        // Implementation of the function (mocked for example purposes)
   19|     43|    }

