_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbPiPv:
   20|     10|void PDFDoc::displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int rotation, GBool crop, GBool print, GBool embed, DW_TAG_subroutine_typeInfinite *loop, void *userData) {
   21|       |    // Implementation of the function
   22|     10|}
LLVMFuzzerTestOneInput:
   24|     10|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     10|auto start_target = std::chrono::high_resolution_clock::now();//erase
   26|     10|    FuzzedDataProvider stream(data, size);
   27|       |
   28|       |    // Initialize parameters
   29|     10|    OutputDev outputDev; // Assuming default constructor is fine
   30|     10|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming page numbers are between 1 and 100
   31|     10|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100);
   32|     10|    double x = stream.ConsumeFloatingPoint<double>();
   33|     10|    double y = stream.ConsumeFloatingPoint<double>();
   34|     10|    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees
   35|     10|    GBool crop = stream.ConsumeBool();
   36|     10|    GBool print = stream.ConsumeBool();
   37|     10|    GBool embed = stream.ConsumeBool();
   38|       |    
   39|       |    // Create a loop pointer, assuming it should not be NULL
   40|     10|    DW_TAG_subroutine_typeInfinite *loop = new DW_TAG_subroutine_typeInfinite(0); // Placeholder initialization
   41|     10|    std::vector<uint8_t> userDataVec = stream.ConsumeRemainingBytes<uint8_t>(); // Correctly consume remaining bytes
   42|     10|    void *userData = userDataVec.data(); // Use remaining bytes as user data
   43|       |
   44|       |    // Call the function under test
   45|     10|    PDFDoc doc; // Creating an instance of PDFDoc
   46|     10|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   47|     10|    doc.displayPages(&outputDev, pageStart, pageEnd, x, y, rotation, crop, print, embed, loop, userData);
   48|     10|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   49|       |
   50|       |    // Clean up if necessary
   51|     10|    delete loop;
   52|     10|auto end_target = std::chrono::high_resolution_clock::now();//erase
   53|     10|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   54|       |
   55|     10|    return 0;
   56|     10|}

