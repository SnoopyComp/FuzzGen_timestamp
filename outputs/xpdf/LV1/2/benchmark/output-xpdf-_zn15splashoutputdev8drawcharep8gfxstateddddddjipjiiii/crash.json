{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstddef>\\n\\n// Include the necessary headers for the xpdf types\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"         // Assuming this header defines GfxState\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"  // Correctly including the actual header\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"       // Including a relevant header for Unicode\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"          // Including GfxFont for GBool type\\n\\n// Create an instance of SplashOutputDev to call the method on\\nSplashOutputDev splashOutputDev;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize the GfxState pointer with required parameters\\n    double hDPI = 72.0; // Example DPI value\\n    double vDPI = 72.0; // Example DPI value\\n    PDFRectangle *pageBox = nullptr; // Assuming a null page box for simplicity\\n    int rotate = 0; // Example rotation value\\n    GBool upsideDown = gFalse; // Example upside down value\\n\\n    GfxState* gfx_state = new GfxState(hDPI, vDPI, pageBox, rotate, upsideDown);\\n\\n    // Consume doubles for the parameters\\n    double param1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param4 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param5 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param6 = fuzzed_data.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and int\\n    int char_code = fuzzed_data.ConsumeIntegral<int>(); // Changed to int\\n    int int_param = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Initialize Unicode pointer\\n    size_t unicode_length = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100); // Ensure non-null\\n    Unicode* unicode_array = new Unicode[unicode_length];\\n    for (size_t i = 0; i < unicode_length; ++i) {\\n        unicode_array[i] = static_cast<Unicode>(fuzzed_data.ConsumeIntegral<int>());\\n    }\\n\\n    // Consume GBool values\\n    GBool bool_param1 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n    GBool bool_param2 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n    GBool bool_param3 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(gfx_state, param1, param2, param3, param4, param5, param6, char_code, int_param, unicode_array, unicode_length, bool_param1, bool_param2, bool_param3);\\n\\n    // Clean up\\n    delete[] unicode_array;\\n    delete gfx_state;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <string> // Include for std::string\\n#include <stdbool.h> // For bool\\n\\n// Assuming the following types are defined somewhere in the codebase\\nclass GfxState {};\\n\\n// Include necessary headers for CharCode, Unicode, and GBool\\nusing CharCode = uint32_t; // Example definition\\nusing Unicode = uint32_t; // Example definition\\nusing GBool = int; // Fix for redefinition error, using int as per xpdf's definition\\n\\n// Include the header for SplashOutputDev\\n#include \"/src/xpdf-4.05/goo/gtypes.h\" // Updated to the correct path for gtypes.h\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Fix for undefined reference error\\n\\n// Forward declaration of SplashOutputDev class\\nclass SplashOutputDev {\\npublic:\\n    static void drawChar(GfxState *gfxState, double x1, double y1, double x2, double y2, double x3, double y3, CharCode charCode, int intValue, Unicode *unicodePtr, int intValue2, GBool bool1, GBool bool2, GBool bool3);\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function call\\n    GfxState gfxState; // Create an instance of GfxState\\n    double x1 = stream.ConsumeFloatingPoint<double>();\\n    double y1 = stream.ConsumeFloatingPoint<double>();\\n    double x2 = stream.ConsumeFloatingPoint<double>();\\n    double y2 = stream.ConsumeFloatingPoint<double>();\\n    double x3 = stream.ConsumeFloatingPoint<double>();\\n    double y3 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intValue = stream.ConsumeIntegral<int>();\\n    \\n    // Use ConsumeRandomLengthString to create a Unicode buffer\\n    std::string unicodeString = stream.ConsumeRandomLengthString(10); // Limit length to 10\\n    std::vector<Unicode> unicodeData(unicodeString.begin(), unicodeString.end()); // Convert to Unicode vector\\n    Unicode *unicodePtr = unicodeData.data(); // Use the data as pointer\\n\\n    int intValue2 = stream.ConsumeIntegral<int>();\\n    GBool bool1 = stream.ConsumeBool();\\n    GBool bool2 = stream.ConsumeBool();\\n    GBool bool3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev::drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, intValue, unicodePtr, intValue2, bool1, bool2, bool3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}