{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"PDFDoc.h\" // Include the header file that defines PDFDoc\\n#include \"../goo/gtypes.h\" // Include the header file that defines GBool\\n\\n// Assume these types are defined somewhere in the codebase\\nclass OutputDev {};\\n\\n// Remove the redefinition of GBool\\n// using GBool = bool; // This line is removed as GBool is already defined in gtypes.h\\n\\nstruct DW_TAG_subroutine_typeInfiniteLoop {}; // Placeholder for the actual structure\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an OutputDev object\\n    OutputDev output_dev;\\n\\n    // Consume parameters\\n    int param1 = fuzzed_data.ConsumeIntegral<int>(); // integer parameter\\n    double param2 = fuzzed_data.ConsumeFloatingPoint<double>(); // first double parameter\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>(); // second double parameter\\n    int param4 = fuzzed_data.ConsumeIntegral<int>(); // second integer parameter\\n    GBool param5 = fuzzed_data.ConsumeBool(); // first GBool parameter\\n    GBool param6 = fuzzed_data.ConsumeBool(); // second GBool parameter\\n    GBool param7 = fuzzed_data.ConsumeBool(); // third GBool parameter\\n    int param8 = fuzzed_data.ConsumeIntegral<int>(); // third integer parameter\\n    int param9 = fuzzed_data.ConsumeIntegral<int>(); // fourth integer parameter\\n    int param10 = fuzzed_data.ConsumeIntegral<int>(); // fifth integer parameter\\n    int param11 = fuzzed_data.ConsumeIntegral<int>(); // sixth integer parameter\\n\\n    // Create a DW_TAG_subroutine_typeInfiniteLoop object\\n    DW_TAG_subroutine_typeInfiniteLoop infinite_loop;\\n\\n    // Pointer for the last parameter\\n    void* param12 = nullptr; // Initialize to nullptr, can be set to a valid pointer if needed\\n\\n    // Create a valid GString pointer for the PDFDoc constructor\\n    GString *fileNameA = new GString(\"test.pdf\"); // Replace with a valid file name as needed\\n\\n    // Create an instance of PDFDoc with the required parameters\\n    PDFDoc pdfDocInstance(fileNameA); // Call the constructor with a valid GString\\n\\n    // Ensure that the parameters for displayPageSlice are valid\\n    // Assuming that the number of pages in the PDF is obtained from the PDFDoc\\n    int numPages = pdfDocInstance.getNumPages(); // Assuming this function exists\\n    if (numPages <= 0) {\\n        delete fileNameA; // Clean up before returning\\n        return 0; // No valid pages to display\\n    }\\n\\n    // Clamp param1 to be within the valid range of page numbers\\n    param1 = std::max(1, std::min(param1, numPages)); // Assuming pages are 1-indexed\\n\\n    // Call the function to fuzz\\n    pdfDocInstance.displayPageSlice(&output_dev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, nullptr, param12);\\n\\n    // Clean up\\n    delete fileNameA; // Clean up the dynamically allocated GString\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"  // Include the header for PDFDoc class\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"  // Include the header for OutputDev class\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"  // Include Gfx for potential type definitions\\n#include \"/src/xpdf-4.05/xpdf/GString.h\"  // Include GString for string handling\\n\\n// Remove the redefinition of OutputDev\\n// class OutputDev {}; // This was causing a redefinition error\\n\\n// Use the correct definition of GBool from the included header\\n// using GBool = bool;  // This was causing a typedef redefinition error\\n\\n// The function-under-test\\n// Ensure that the function signature matches the declaration in PDFDoc.h\\nvoid displayPageSlice(OutputDev *outputDev, int pageIndex, double x1, double y1, int width, GBool needToRender, GBool needToDisplay, GBool needToUpdate, int rotation, int pageCount, int scaleX, int scaleY, void *tag, void *userData);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    // Use a pointer to OutputDev to handle the abstract class issue\\n    OutputDev *outputDev = nullptr; // Initialize OutputDev pointer\\n    // You may need to create a derived class from OutputDev to instantiate it correctly\\n\\n    int pageIndex = stream.ConsumeIntegral<int>();\\n    double x1 = stream.ConsumeFloatingPoint<double>();\\n    double y1 = stream.ConsumeFloatingPoint<double>();\\n    int width = stream.ConsumeIntegral<int>();\\n    GBool needToRender = stream.ConsumeBool();\\n    GBool needToDisplay = stream.ConsumeBool();\\n    GBool needToUpdate = stream.ConsumeBool();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    int pageCount = stream.ConsumeIntegral<int>();\\n    int scaleX = stream.ConsumeIntegral<int>();\\n    int scaleY = stream.ConsumeIntegral<int>();\\n    \\n    // Create a tag object (replace with appropriate type if necessary)\\n    void *tag = nullptr; // Initialize tag as void pointer\\n\\n    // Create a user data pointer\\n    std::vector<uint8_t> userDataVec = stream.ConsumeRemainingBytes<uint8_t>(); // Use ConsumeRemainingBytes correctly\\n    void *userData = userDataVec.data();\\n\\n    // Call the function under test\\n    // You need to create an instance of PDFDoc with appropriate constructor arguments\\n    // For this example, we will assume a valid GString* is available\\n    GString *fileName = new GString(\"dummy.pdf\"); // Create a dummy GString for the constructor\\n    PDFDoc pdfDoc(fileName); // Assuming you have an instance of PDFDoc with a valid constructor\\n\\n    // Create a dummy abort check callback function\\n    GBool abortCheckCallback(void *data) {\\n        return 0; // Dummy implementation\\n    }\\n\\n    pdfDoc.displayPageSlice(outputDev, pageIndex, x1, y1, width, needToRender, needToDisplay, needToUpdate, rotation, pageCount, scaleX, scaleY, tag, userData, abortCheckCallback); // Pass the callback\\n\\n    delete fileName; // Clean up the created GString\\n    return 0;\\n}",
        "model": ""
    }

    ]
}