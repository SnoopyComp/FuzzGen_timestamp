LLVMFuzzerTestOneInput:
   43|     17|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   44|     17|auto start_target = std::chrono::high_resolution_clock::now();//erase
   45|       |    // Initialize FuzzedDataProvider with the provided data and size
   46|     17|    FuzzedDataProvider fuzzed_data(data, size);
   47|       |
   48|       |    // Create an instance of SplashOutputDev
   49|     17|    SplashOutputDev splashOutputDev;
   50|       |
   51|       |    // Initialize GfxState
   52|     17|    GfxState gfxState;
   53|       |
   54|       |    // Consume data to initialize GfxState
   55|     17|    gfxState.some_member = fuzzed_data.ConsumeIntegral<int>();
   56|       |    
   57|       |    // Ensure we have a non-zero size for additional data
   58|     17|    int additional_data_size = fuzzed_data.ConsumeIntegralInRange<int>(1, 10); // Size between 1 and 10
   59|     17|    gfxState.initializeAdditionalData(additional_data_size, fuzzed_data);
   60|       |
   61|       |    // Call the function under test
   62|     17|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   63|     17|    splashOutputDev.doUpdateFont(&gfxState);
   64|     17|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   65|     17|auto end_target = std::chrono::high_resolution_clock::now();//erase
   66|     17|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   67|       |
   68|     17|    return 0;
   69|     17|}
_ZN8GfxStateC2Ev:
   15|     17|    GfxState() : some_member(0) {}
_ZN8GfxState24initializeAdditionalDataEiR18FuzzedDataProvider:
   18|     17|    void initializeAdditionalData(int size, FuzzedDataProvider &fuzzed_data) {
   19|     17|        additional_data.resize(size);
   20|     97|        for (int i = 0; i < size; ++i) {
  ------------------
  |  Branch (20:25): [True: 80, False: 17]
  ------------------
   21|     80|            additional_data[i] = fuzzed_data.ConsumeIntegral<int>();
   22|     80|        }
   23|     17|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   29|     17|    void doUpdateFont(GfxState *gfxState) {
   30|       |        // Function implementation (not provided)
   31|       |        // For example, we could log or process the state
   32|       |        // This is just a placeholder for the actual implementation
   33|     17|        if (gfxState->some_member > 0) {
  ------------------
  |  Branch (33:13): [True: 0, False: 17]
  ------------------
   34|       |            // Simulate some processing based on some_member
   35|      0|            for (int value : gfxState->additional_data) {
  ------------------
  |  Branch (35:28): [True: 0, False: 0]
  ------------------
   36|       |                // Simulate some operation with additional_data
   37|      0|                (void)value; // Prevent unused variable warning
   38|      0|            }
   39|      0|        }
   40|     17|    }

