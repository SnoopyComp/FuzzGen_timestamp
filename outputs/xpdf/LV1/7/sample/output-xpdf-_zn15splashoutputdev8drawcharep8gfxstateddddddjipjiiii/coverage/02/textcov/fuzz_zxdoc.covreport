LLVMFuzzerTestOneInput:
   24|     55|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     55|auto start_target = std::chrono::high_resolution_clock::now();//erase
   26|     55|    FuzzedDataProvider stream(data, size);
   27|       |
   28|       |    // Initialize parameters for the function call
   29|     55|    GfxState gfxState; // Create an instance of GfxState
   30|     55|    double param1 = stream.ConsumeFloatingPoint<double>();
   31|     55|    double param2 = stream.ConsumeFloatingPoint<double>();
   32|     55|    double param3 = stream.ConsumeFloatingPoint<double>();
   33|     55|    double param4 = stream.ConsumeFloatingPoint<double>();
   34|     55|    double param5 = stream.ConsumeFloatingPoint<double>();
   35|     55|    double param6 = stream.ConsumeFloatingPoint<double>();
   36|     55|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   37|     55|    int intParam = stream.ConsumeIntegral<int>();
   38|       |    
   39|       |    // Allocate memory for Unicode pointer
   40|     55|    size_t unicodeArraySize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element
   41|     55|    std::vector<Unicode> unicodeArray(unicodeArraySize);
   42|       |    
   43|       |    // Validate the size of the data consumed
   44|     55|    auto unicodeData = stream.ConsumeRandomLengthString(unicodeArraySize * sizeof(Unicode));
   45|     55|    if (unicodeData.size() != unicodeArraySize * sizeof(Unicode)) {
  ------------------
  |  Branch (45:9): [True: 47, False: 8]
  ------------------
   46|     47|        return 0; // Exit if the size does not match
   47|     47|    }
   48|       |    
   49|      8|    std::memcpy(unicodeArray.data(), unicodeData.data(), unicodeArraySize * sizeof(Unicode));
   50|       |    
   51|      8|    int intParam2 = stream.ConsumeIntegral<int>();
   52|      8|    GBool boolParam1 = stream.ConsumeBool();
   53|      8|    GBool boolParam2 = stream.ConsumeBool();
   54|      8|    GBool boolParam3 = stream.ConsumeBool();
   55|       |
   56|       |    // Call the function under test
   57|      8|    SplashOutputDev splashOutputDev;
   58|      8|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   59|      8|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);
   60|      8|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   61|      8|auto end_target = std::chrono::high_resolution_clock::now();//erase
   62|      8|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   63|       |
   64|      8|    return 0;
   65|     55|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   18|      8|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   19|       |        // Function implementation
   20|      8|    }

