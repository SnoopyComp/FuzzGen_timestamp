{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint> // For uint8_t\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\" // Assuming GfxState is defined here\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Replaced CharCode.h with OutputDev.h\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\" // Replaced Unicode.h with UnicodeMap.h\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Assuming SplashOutputDev is defined here\\n\\nvoid LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer with required parameters\\n    double hDPI = 72.0; // Example DPI\\n    double vDPI = 72.0; // Example DPI\\n    PDFRectangle pageBox = {0, 0, 100, 100}; // Example page box\\n    int rotate = 0; // Example rotation\\n    GBool upsideDown = gFalse; // Example upside down flag\\n\\n    GfxState gfx_state(hDPI, vDPI, &pageBox, rotate, upsideDown); // Using the constructor with parameters\\n    GfxState *gfx_state_ptr = &gfx_state;\\n\\n    // Consume doubles for the position and dimensions\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double x_offset = stream.ConsumeFloatingPoint<double>();\\n    double y_offset = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and integer values\\n    int char_code = stream.ConsumeIntegral<int>(); // Changed to int\\n    int int_param = stream.ConsumeIntegral<int>();\\n\\n    // Initialize Unicode pointer (assuming it cannot be NULL)\\n    std::vector<Unicode> unicode_vector; // Changed to Unicode type\\n    size_t unicode_length = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure non-zero size\\n    for (size_t i = 0; i < unicode_length; ++i) {\\n        unicode_vector.push_back(static_cast<Unicode>(stream.ConsumeIntegral<int>())); // Cast to Unicode\\n    }\\n    Unicode *unicode_ptr = unicode_vector.data(); // Pointer to the first element\\n\\n    // Consume additional integer and boolean parameters\\n    int int_param2 = stream.ConsumeIntegral<int>();\\n    int bool_param1 = stream.ConsumeBool() ? 1 : 0; // Assuming 1 for true, 0 for false\\n    int bool_param2 = stream.ConsumeBool() ? 1 : 0;\\n    int bool_param3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Call the function under test\\n    SplashColorMode colorMode = splashColorModeRGB; // Example color mode\\n    int bitmapRowPad = 4; // Example row padding\\n    SplashColorPtr paperColor = nullptr; // Example paper color\\n    SplashOutputDev splash_output_dev(colorMode, bitmapRowPad, gFalse, paperColor); // Using constructor with parameters\\n    splash_output_dev.drawChar(gfx_state_ptr, x, y, width, height, x_offset, y_offset, char_code, int_param, unicode_ptr, unicode_length, int_param2, bool_param1, bool_param2, bool_param3);\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "62.19",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // Include for std::memcpy\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, replace with actual type\\nusing Unicode = uint32_t;   // Example definition, replace with actual type\\nusing GBool = bool;         // Example definition, replace with actual type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation\\n    }\\n};\\n\\n// The entry point for the fuzzer\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function call\\n    GfxState gfxState; // Create an instance of GfxState\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate memory for Unicode pointer\\n    size_t unicodeArraySize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Ensure at least 1 element\\n    std::vector<Unicode> unicodeArray(unicodeArraySize);\\n    \\n    // Validate the size of the data consumed\\n    auto unicodeData = stream.ConsumeRandomLengthString(unicodeArraySize * sizeof(Unicode));\\n    if (unicodeData.size() != unicodeArraySize * sizeof(Unicode)) {\\n        return 0; // Exit if the size does not match\\n    }\\n    \\n    std::memcpy(unicodeArray.data(), unicodeData.data(), unicodeArraySize * sizeof(Unicode));\\n    \\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}