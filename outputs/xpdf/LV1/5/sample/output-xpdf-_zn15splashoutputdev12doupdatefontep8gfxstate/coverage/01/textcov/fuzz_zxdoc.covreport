LLVMFuzzerTestOneInput:
   31|      7|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   32|      7|auto start_target = std::chrono::high_resolution_clock::now();//erase
   33|      7|    FuzzedDataProvider stream(data, size);
   34|       |    
   35|       |    // Create an instance of GfxState
   36|      7|    GfxState gfxState;
   37|       |
   38|       |    // Populate gfxState with fuzzed data
   39|      7|    gfxState.someInt = stream.ConsumeIntegral<int>();
   40|      7|    gfxState.someFloat = stream.ConsumeFloatingPoint<float>();
   41|       |
   42|       |    // Consume bytes for someData, ensuring it fits the buffer
   43|      7|    size_t dataSize = std::min(stream.remaining_bytes(), sizeof(gfxState.someData) - 1);
   44|      7|    std::vector<uint8_t> dataBuffer = stream.ConsumeBytes<uint8_t>(dataSize);
   45|      7|    memcpy(gfxState.someData, dataBuffer.data(), dataSize);
   46|      7|    gfxState.someData[dataSize] = '\0'; // Null-terminate if needed
   47|       |
   48|       |    // Call the function under test
   49|      7|    SplashOutputDev splashOutputDev;
   50|      7|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   51|      7|    splashOutputDev.doUpdateFont(&gfxState);
   52|      7|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   53|      7|auto end_target = std::chrono::high_resolution_clock::now();//erase
   54|      7|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   55|       |
   56|      7|    return 0;
   57|      7|}
_ZN8GfxStateC2Ev:
   18|      7|    GfxState() : someInt(0), someFloat(0.0f) {
   19|      7|        memset(someData, 0, sizeof(someData));
   20|      7|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   25|      7|    void doUpdateFont(GfxState *gfxState) {
   26|       |        // Function implementation goes here.
   27|       |        // This is where the actual logic of the function will be executed.
   28|      7|    }

