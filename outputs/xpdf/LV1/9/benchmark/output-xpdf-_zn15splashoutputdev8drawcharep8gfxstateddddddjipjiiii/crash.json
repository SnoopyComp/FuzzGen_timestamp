{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <vector>\\n\\n// Assuming necessary includes and definitions for GfxState, CharCode, Unicode, and GBool\\nclass GfxState {}; // Placeholder for the actual GfxState class\\nusing CharCode = uint32_t; // Assuming CharCode is a 32-bit unsigned integer\\nusing GBool = bool; // Assuming GBool is a boolean type\\nusing Unicode = uint32_t; // Assuming Unicode is represented as a 32-bit unsigned integer\\n\\n// Define SplashOutputDev class\\nclass SplashOutputDev {\\npublic:\\n    // The function-under-test\\n    static void drawChar(GfxState *state, double x, double y, double width, double height, \\n                         double xScale, double yScale, CharCode charCode, int fontSize, \\n                         Unicode *unicode, int unicodeCount, GBool isUnderlined, \\n                         GBool isBold, GBool isItalic) {\\n        // Function implementation...\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Consume doubles for the x, y, width, height, xScale, yScale parameters\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double xScale = stream.ConsumeFloatingPoint<double>();\\n    double yScale = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and fontSize\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Initialize Unicode array\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // At least 1 Unicode character\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    for (size_t i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n    \\n    // Consume GBool values\\n    GBool isUnderlined = stream.ConsumeBool();\\n    GBool isBold = stream.ConsumeBool();\\n    GBool isItalic = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    SplashOutputDev::drawChar(&gfxState, x, y, width, height, xScale, yScale, \\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\n                               charCode, fontSize, unicodeArray.data(), \\n                               static_cast<int>(unicodeCount), isUnderlined, \\n                               isBold, isItalic);\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // For std::memcpy\\n#include \"GfxState.h\"   // Include the header for GfxState\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Correctly include the OutputDev header\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3,\\n                  int charCode, int fontSize, Unicode *unicode, int unicodeSize,\\n                  GBool flag1, GBool flag2, GBool flag3) { // Change CharCode to int\\n        // Function implementation\\n    }\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar\\n    // Consume random length string for GfxState pointer\\n    std::vector<uint8_t> gfxStateData = stream.ConsumeBytes<uint8_t>(sizeof(GfxState));\\n    if (gfxStateData.size() != sizeof(GfxState)) return 0; // Validate size of gfxStateData\\n\\n    GfxState *gfxState = reinterpret_cast<GfxState*>(gfxStateData.data());\\n    if (gfxState == nullptr) return 0; // Validate that gfxState is not null\\n\\n    double x1 = stream.ConsumeFloatingPoint<double>();\\n    double y1 = stream.ConsumeFloatingPoint<double>();\\n    double x2 = stream.ConsumeFloatingPoint<double>();\\n    double y2 = stream.ConsumeFloatingPoint<double>();\\n    double x3 = stream.ConsumeFloatingPoint<double>();\\n    double y3 = stream.ConsumeFloatingPoint<double>();\\n    int charCode = stream.ConsumeIntegral<int>(); // Change CharCode to int\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate memory for Unicode and initialize using ConsumeRandomLengthString\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Avoid zero-length\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeSize); // Use ConsumeRandomLengthString\\n    std::vector<Unicode> unicodeData(unicodeString.begin(), unicodeString.end()); // Convert string to Unicode vector\\n    if (unicodeData.size() != unicodeSize) return 0; // Validate size of unicodeData\\n\\n    Unicode *unicodePtr = unicodeData.data();\\n\\n    // GBool flags\\n    GBool flag1 = stream.ConsumeBool() ? 1 : 0; // Assuming GBool is an integer type\\n    GBool flag2 = stream.ConsumeBool() ? 1 : 0;\\n    GBool flag3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n    splashOutputDev.drawChar(gfxState, x1, y1, x2, y2, x3, y3, charCode, fontSize, unicodePtr, unicodeSize, flag1, flag2, flag3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}