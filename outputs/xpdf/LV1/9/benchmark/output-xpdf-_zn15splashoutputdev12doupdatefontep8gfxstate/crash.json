{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "49.71",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint>\\n#include <vector>\\n#include <string> // Include for std::string\\n\\n// Assuming GfxState is a defined class in the context.\\nclass GfxState {\\npublic:\\n    // Example members for GfxState to ensure it's not NULL.\\n    int some_integer;\\n    float some_float;\\n    std::vector<uint8_t> data;\\n\\n    GfxState() : some_integer(0), some_float(0.0f), data(10, 0) {} // Default constructor\\n};\\n\\n// Assuming SplashOutputDev is a defined class in the context.\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Implementation of the function (not provided)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Fill GfxState members with fuzzed data\\n    gfxState.some_integer = fuzzed_data.ConsumeIntegral<int>();\\n    gfxState.some_float = fuzzed_data.ConsumeFloatingPoint<float>();\\n\\n    // Consume a random length string for GfxState data\\n    std::string consumed_string = fuzzed_data.ConsumeRandomLengthString(100); // Ensure non-zero size\\n    gfxState.data = std::vector<uint8_t>(consumed_string.begin(), consumed_string.end());\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "40.91",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint>\\n#include <vector>\\n#include <cstring>\\n\\n// Assuming GfxState is defined somewhere in your codebase\\nclass GfxState {\\npublic:\\n    // Example members for GfxState, adjust as necessary\\n    int fontSize;\\n    char fontName[32];\\n\\n    GfxState() : fontSize(0) {\\n        std::memset(fontName, 0, sizeof(fontName));\\n    }\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Function implementation (not provided)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of GfxState\\n    GfxState gfxState;\\n\\n    // Consume data to initialize gfxState members\\n    gfxState.fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Consume a string for fontName, ensuring it fits the buffer\\n    std::string fontName = stream.ConsumeBytesAsString(sizeof(gfxState.fontName) - 1);\\n    std::strncpy(gfxState.fontName, fontName.c_str(), sizeof(gfxState.fontName) - 1);\\n    gfxState.fontName[sizeof(gfxState.fontName) - 1] = '\\0'; // Ensure null-termination\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}