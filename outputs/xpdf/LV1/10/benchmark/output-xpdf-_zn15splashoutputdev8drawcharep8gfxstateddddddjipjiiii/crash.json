{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <vector>\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined elsewhere\\nclass GfxState {};\\nusing CharCode = int; // Placeholder type\\nusing Unicode = int; // Placeholder type\\nusing GBool = bool; // Placeholder type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double ascent, double descent, CharCode charCode, int fontSize,\\n                  Unicode *unicode, int unicodeLength, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function call\\n    GfxState gfxState; // Assuming GfxState can be default constructed\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double ascent = stream.ConsumeFloatingPoint<double>();\\n    double descent = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Prepare Unicode array\\n    size_t unicodeLength = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 element\\n    std::vector<Unicode> unicodeArray(unicodeLength);\\n    for (size_t i = 0; i < unicodeLength; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n\\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, ascent, descent,\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\n                              charCode, fontSize, unicodeArray.data(), \\n                              static_cast<int>(unicodeLength), flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include <cstring> // Include for std::memcpy\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, adjust as needed\\nusing Unicode = uint32_t;   // Example definition, adjust as needed\\nusing GBool = int;          // Example definition, adjust as needed\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double ascent, double descent, CharCode charCode, int fontSize,\\n                  Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation (not shown)\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Initialize parameters for the function call\\n    GfxState gfx_state; // Ensure this is a valid object\\n    double x = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double width = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double height = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double ascent = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double descent = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    CharCode charCode = fuzzed_data_provider.ConsumeIntegral<CharCode>();\\n    int fontSize = fuzzed_data_provider.ConsumeIntegral<int>();\\n    \\n    // Ensure Unicode array is not NULL and has a reasonable size\\n    size_t unicodeCount = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 100); // At least 1 Unicode character\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    \\n    // Use ConsumeRandomLengthString to get a valid Unicode buffer\\n    std::string unicodeString = fuzzed_data_provider.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));\\n    \\n    // Fill the unicodeArray with the appropriate values\\n    if (unicodeString.size() >= unicodeCount * sizeof(Unicode)) {\\n        std::memcpy(unicodeArray.data(), unicodeString.data(), unicodeCount * sizeof(Unicode));\\n    } else {\\n        return 0; // If the size is not valid, don't proceed\\n    }\\n    \\n    // Ensure boolean flags are initialized\\n    GBool flag1 = fuzzed_data_provider.ConsumeBool() ? 1 : 0;\\n    GBool flag2 = fuzzed_data_provider.ConsumeBool() ? 1 : 0;\\n    GBool flag3 = fuzzed_data_provider.ConsumeBool() ? 1 : 0;\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfx_state, x, y, width, height, ascent, descent,\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\n                              charCode, fontSize, unicodeArray.data(), \\n                              static_cast<int>(unicodeCount), flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}