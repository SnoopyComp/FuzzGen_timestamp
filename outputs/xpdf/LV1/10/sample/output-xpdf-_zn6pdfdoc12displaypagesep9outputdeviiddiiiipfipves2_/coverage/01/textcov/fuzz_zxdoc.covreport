LLVMFuzzerTestOneInput:
   23|     15|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|     15|auto start_target = std::chrono::high_resolution_clock::now();//erase
   25|     15|    FuzzedDataProvider stream(data, size);
   26|       |
   27|       |    // Initialize parameters for the function
   28|     15|    OutputDev outputDev; // Create an instance of OutputDev
   29|     15|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Start page (1 to 100)
   30|     15|    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // End page (pageStart to 100)
   31|     15|    double zoom = stream.ConsumeFloatingPoint<double>(); // Zoom factor
   32|     15|    double rotation = stream.ConsumeFloatingPoint<double>(); // Rotation angle
   33|     15|    int flags = stream.ConsumeIntegral<int>(); // Flags
   34|     15|    GBool isPrint = stream.ConsumeBool(); // Print flag
   35|     15|    GBool isView = stream.ConsumeBool(); // View flag
   36|     15|    GBool isAnnotate = stream.ConsumeBool(); // Annotate flag
   37|       |
   38|       |    // Create a subroutine pointer
   39|     15|    DW_TAG_subroutine_typeInfinite *subroutine = nullptr; // Assuming it can be null
   40|     15|    if (stream.remaining_bytes() > 0) {
  ------------------
  |  Branch (40:9): [True: 1, False: 14]
  ------------------
   41|      1|        subroutine = new DW_TAG_subroutine_typeInfinite(); // Allocate memory for the subroutine
   42|      1|    }
   43|       |
   44|       |    // Correctly consume remaining bytes as user data
   45|     15|    void *userData = nullptr;
   46|     15|    if (stream.remaining_bytes() > 0) {
  ------------------
  |  Branch (46:9): [True: 1, False: 14]
  ------------------
   47|      1|        std::vector<uint8_t> remainingBytes = stream.ConsumeRemainingBytes<uint8_t>(); // Specify template argument
   48|      1|        userData = remainingBytes.data(); // User data pointer
   49|      1|    }
   50|       |
   51|       |    // Call the function under test
   52|     15|    PDFDoc pdfDoc; // Create an instance of PDFDoc
   53|     15|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   54|     15|    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoom, rotation, flags, isPrint, isView, isAnnotate, subroutine, userData);
   55|     15|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   56|       |
   57|       |    // Clean up if subroutine was allocated
   58|     15|    if (subroutine) {
  ------------------
  |  Branch (58:9): [True: 1, False: 14]
  ------------------
   59|      1|        delete subroutine;
   60|      1|    }
   61|     15|auto end_target = std::chrono::high_resolution_clock::now();//erase
   62|     15|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   63|       |
   64|     15|    return 0;
   65|     15|}
_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbP30DW_TAG_subroutine_typeInfinitePv:
   18|     15|    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double zoom, double rotation, int flags, GBool isPrint, GBool isView, GBool isAnnotate, DW_TAG_subroutine_typeInfinite *subroutine, void *userData) {
   19|       |        // Function implementation
   20|     15|    }

