LLVMFuzzerTestOneInput:
   26|      5|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   27|      5|auto start_target = std::chrono::high_resolution_clock::now();//erase
   28|      5|    FuzzedDataProvider stream(data, size);
   29|       |
   30|       |    // Initialize parameters for GfxState
   31|      5|    int gfx_state_value = stream.ConsumeIntegral<int>();
   32|      5|    std::vector<uint8_t> font_data = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange<size_t>(1, 1024)); // Ensure at least 1 byte
   33|       |
   34|       |    // Create a GfxState object
   35|      5|    GfxState gfx_state(gfx_state_value, font_data);
   36|       |
   37|       |    // Create an instance of SplashOutputDev
   38|      5|    SplashOutputDev splash_output_dev;
   39|       |
   40|       |    // Call the function under test
   41|      5|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   42|      5|    splash_output_dev.doUpdateFont(&gfx_state);
   43|      5|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   44|      5|auto end_target = std::chrono::high_resolution_clock::now();//erase
   45|      5|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   46|       |
   47|      5|    return 0;
   48|      5|}
_ZN8GfxStateC2EiRKNSt3__16vectorIhNS0_9allocatorIhEEEE:
   16|      5|    GfxState(int value, const std::vector<uint8_t>& data) : some_value(value), font_data(data) {}
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   21|      5|    void doUpdateFont(GfxState *gfx_state) {
   22|       |        // Function implementation (not provided)
   23|      5|    }

