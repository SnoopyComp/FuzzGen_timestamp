LLVMFuzzerTestOneInput:
   22|     56|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   23|     56|    FuzzedDataProvider fuzzed_data_provider(data, size);
   24|       |
   25|       |    // Initialize parameters for the function call
   26|     56|    GfxState gfx_state; // Ensure this is a valid object
   27|     56|    double x = fuzzed_data_provider.ConsumeFloatingPoint<double>();
   28|     56|    double y = fuzzed_data_provider.ConsumeFloatingPoint<double>();
   29|     56|    double width = fuzzed_data_provider.ConsumeFloatingPoint<double>();
   30|     56|    double height = fuzzed_data_provider.ConsumeFloatingPoint<double>();
   31|     56|    double ascent = fuzzed_data_provider.ConsumeFloatingPoint<double>();
   32|     56|    double descent = fuzzed_data_provider.ConsumeFloatingPoint<double>();
   33|     56|    CharCode charCode = fuzzed_data_provider.ConsumeIntegral<CharCode>();
   34|     56|    int fontSize = fuzzed_data_provider.ConsumeIntegral<int>();
   35|       |    
   36|       |    // Ensure Unicode array is not NULL and has a reasonable size
   37|     56|    size_t unicodeCount = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 100); // At least 1 Unicode character
   38|     56|    std::vector<Unicode> unicodeArray(unicodeCount);
   39|       |    
   40|       |    // Use ConsumeRandomLengthString to get a valid Unicode buffer
   41|     56|    std::string unicodeString = fuzzed_data_provider.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));
   42|       |    
   43|       |    // Fill the unicodeArray with the appropriate values
   44|     56|    if (unicodeString.size() >= unicodeCount * sizeof(Unicode)) {
  ------------------
  |  Branch (44:9): [True: 2, False: 54]
  ------------------
   45|      2|        std::memcpy(unicodeArray.data(), unicodeString.data(), unicodeCount * sizeof(Unicode));
   46|     54|    } else {
   47|     54|        return 0; // If the size is not valid, don't proceed
   48|     54|    }
   49|       |    
   50|       |    // Ensure boolean flags are initialized
   51|      2|    GBool flag1 = fuzzed_data_provider.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (51:19): [True: 0, False: 2]
  ------------------
   52|      2|    GBool flag2 = fuzzed_data_provider.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (52:19): [True: 0, False: 2]
  ------------------
   53|      2|    GBool flag3 = fuzzed_data_provider.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (53:19): [True: 0, False: 2]
  ------------------
   54|       |
   55|       |    // Call the function under test
   56|      2|    SplashOutputDev splashOutputDev;
   57|      2|    splashOutputDev.drawChar(&gfx_state, x, y, width, height, ascent, descent,
   58|      2|                              charCode, fontSize, unicodeArray.data(), 
   59|      2|                              static_cast<int>(unicodeCount), flag1, flag2, flag3);
   60|       |
   61|      2|    return 0;
   62|     56|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjiiii:
   17|      2|                  Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   18|       |        // Function implementation (not shown)
   19|      2|    }

