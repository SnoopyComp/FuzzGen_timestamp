{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "68.94",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Dummy class definitions for the missing types\\nclass GfxState {};\\nusing CharCode = uint32_t; // Assuming CharCode is a 32-bit integer\\nclass Unicode {}; // Assuming Unicode is a class\\nusing GBool = bool; // Assuming GBool is a boolean type\\n\\n// Assuming SplashOutputDev is defined somewhere\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *gfxState, double x, double y, double width, double height,\\n                  double xOffset, double yOffset, CharCode charCode, int fontSize,\\n                  Unicode *unicode, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation\\n    }\\n};\\n\\n// The function under test\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    GfxState gfxState; // Create a GfxState instance\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double xOffset = stream.ConsumeFloatingPoint<double>();\\n    double yOffset = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n    \\n    // Unicode handling\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure non-zero size\\n    std::string unicodeData = stream.ConsumeRandomLengthString(unicodeSize); // Use ConsumeRandomLengthString\\n    if (unicodeData.size() != unicodeSize) {\\n        return 0; // Validate size\\n    }\\n    Unicode *unicode = reinterpret_cast<Unicode*>(unicodeData.data()); // Cast to Unicode pointer\\n\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, xOffset, yOffset, charCode, fontSize, unicode, unicodeSize, flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstring> // For std::memcpy\\n\\n// Include the necessary project-specific headers\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Moved this above GfxState.h\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\" // Assuming this header contains the declaration for CharCode\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\" // Replacing the non-existent Unicode.h with UnicodeMap.h\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function under test\\n    auto gfxStateBytes = stream.ConsumeBytes<uint8_t>(sizeof(GfxState));\\n    if (gfxStateBytes.size() != sizeof(GfxState)) return 0; // Validate size\\n    GfxState* gfxState = reinterpret_cast<GfxState*>(gfxStateBytes.data());\\n    \\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n    \\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam1 = stream.ConsumeIntegral<int>();\\n    \\n    // Allocate a Unicode array with a size determined by the fuzz input\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character\\n    std::vector<Unicode> unicodeArray(unicodeSize);\\n    auto unicodeData = stream.ConsumeBytes<uint8_t>(unicodeSize * sizeof(Unicode));\\n    if (unicodeData.size() != unicodeSize * sizeof(Unicode)) return 0; // Validate size\\n    std::memcpy(unicodeArray.data(), unicodeData.data(), unicodeSize * sizeof(Unicode));\\n\\n    int intParam2 = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool() ? gTrue : gFalse;\\n    GBool boolParam2 = stream.ConsumeBool() ? gTrue : gFalse;\\n    GBool boolParam3 = stream.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Create an instance of SplashOutputDev with valid parameters\\n    SplashColorMode colorMode = splashModeRGB; // Assuming a valid color mode\\n    int bitmapRowPad = 0; // Assuming no padding\\n    GBool reverseVideo = gFalse; // Assuming default value\\n    SplashColorPtr paperColor = nullptr; // Assuming no specific paper color\\n    GBool bitmapTopDown = gTrue; // Assuming default value\\n    GBool allowAntialias = gTrue; // Assuming default value\\n\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n\\n    // Call the function under test\\n    splashOutputDev.drawChar(gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam1, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}