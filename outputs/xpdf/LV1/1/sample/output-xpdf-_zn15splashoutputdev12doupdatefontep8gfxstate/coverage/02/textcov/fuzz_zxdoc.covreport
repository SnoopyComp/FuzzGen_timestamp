LLVMFuzzerTestOneInput:
   26|     19|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   27|       |    // Create a FuzzedDataProvider object
   28|     19|    FuzzedDataProvider stream(data, size);
   29|       |
   30|       |    // Initialize GfxState object
   31|     19|    GfxState gfxState;
   32|       |
   33|       |    // Use data from the stream to initialize gfxState
   34|       |    // Consume a random length string from the stream
   35|     19|    std::string gfxDataString = stream.ConsumeRandomLengthString();
   36|     19|    size_t gfxDataSize = gfxDataString.size();
   37|       |
   38|       |    // Ensure that we have valid data to initialize gfxState
   39|     19|    if (gfxDataSize > 0) {
  ------------------
  |  Branch (39:9): [True: 19, False: 0]
  ------------------
   40|     19|        gfxState.initialize(reinterpret_cast<const uint8_t*>(gfxDataString.data()), gfxDataSize);
   41|       |
   42|       |        // Create an instance of SplashOutputDev
   43|     19|        SplashOutputDev splashOutputDev;
   44|       |
   45|       |        // Call the function under test
   46|     19|        splashOutputDev.doUpdateFont(&gfxState);
   47|     19|    }
   48|       |
   49|     19|    return 0;
   50|     19|}
_ZN8GfxStateC2Ev:
   10|     19|    GfxState() {}
_ZN8GfxState10initializeEPKhm:
   13|     19|    void initialize(const uint8_t* data, size_t size) {
   14|       |        // Implementation to initialize GfxState with data
   15|     19|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   21|     19|    void doUpdateFont(GfxState *state) {
   22|       |        // Function implementation
   23|     19|    }

