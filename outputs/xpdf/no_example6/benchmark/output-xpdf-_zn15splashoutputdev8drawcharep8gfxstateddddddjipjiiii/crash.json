{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming the following types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t;\\nusing Unicode = uint32_t;\\nusing GBool = bool;\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x1, double y1, double x2, double y2, double x3, double y3, \\n                  CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, \\n                  GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation...\\n    }\\n}; // Added missing semicolon here\\n\\n// This function is required for the fuzzing framework to work correctly\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a GfxState object\\n    GfxState gfxState;\\n\\n    // Consume double values for coordinates\\n    double x1 = stream.ConsumeFloatingPoint<double>();\\n    double y1 = stream.ConsumeFloatingPoint<double>();\\n    double x2 = stream.ConsumeFloatingPoint<double>();\\n    double y2 = stream.ConsumeFloatingPoint<double>();\\n    double x3 = stream.ConsumeFloatingPoint<double>();\\n    double y3 = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume a CharCode\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n\\n    // Consume an integer for font size\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode data\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));\\n    \\n    // Validate the size of the consumed string\\n    if (unicodeString.size() != unicodeCount * sizeof(Unicode)) {\\n        return 0; // Invalid size, exit early\\n    }\\n\\n    // Convert the string to a vector of Unicode\\n    std::vector<Unicode> unicodeData(reinterpret_cast<const Unicode*>(unicodeString.data()), \\n                                      reinterpret_cast<const Unicode*>(unicodeString.data()) + unicodeCount);\\n    Unicode *unicodePtr = unicodeData.data();\\n\\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, fontSize, unicodePtr, \\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n                             static_cast<int>(unicodeCount), flag1, flag2, flag3);\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "61.62",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint> // For uint8_t\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <string> // For std::string\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstring> // For std::memcpy\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined somewhere in the project.\\nclass GfxState {};\\nusing CharCode = int; // Assuming CharCode is an integer type\\nusing Unicode = int; // Assuming Unicode is an integer type\\nusing GBool = bool; // Assuming GBool is a boolean type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height,\\n                  double dx, double dy, CharCode charCode, int fontSize,\\n                  Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n        // Function implementation\\n    }\\n};\\n\\n// The function-under-test\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Consume floating point values for the double parameters\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double width = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double height = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n\\n    // Consume a CharCode (using int for simplicity)\\n    CharCode charCode = fuzzed_data.ConsumeIntegral<CharCode>();\\n\\n    // Consume an integer for font size\\n    int fontSize = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume Unicode array\\n    size_t unicodeCount = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100); // Assuming a max size\\n    std::string unicodeString = fuzzed_data.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    \\n    // Ensure the size of the string matches the expected size\\n    if (unicodeString.size() != unicodeCount * sizeof(Unicode)) {\\n        return 0; // Invalid size, exit early\\n    }\\n\\n    // Copy data from the string to the unicodeArray\\n    std::memcpy(unicodeArray.data(), unicodeString.data(), unicodeCount * sizeof(Unicode));\\n    Unicode *unicodePtr = unicodeArray.data();\\n\\n    // Consume GBool flags\\n    GBool flag1 = fuzzed_data.ConsumeBool();\\n    GBool flag2 = fuzzed_data.ConsumeBool();\\n    GBool flag3 = fuzzed_data.ConsumeBool();\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodePtr, unicodeCount, flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}