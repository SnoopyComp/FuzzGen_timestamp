{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "45.16",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstddef>\\n#include <string> // Include for std::string\\n\\n// Assuming these types are defined elsewhere in your codebase\\nclass OutputDev {};\\nusing GBool = bool;\\nusing DW_TAG_subroutine_typeInfinite_loop = int; // Placeholder type\\n\\n// Declaration of PDFDoc class\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double zoomX, double zoomY, int rotation, GBool print, GBool render, GBool annotations, DW_TAG_subroutine_typeInfinite_loop *loop, void *userData) {\\n        // Function implementation\\n    }\\n};\\n\\n// Function under test\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters for the function\\n    OutputDev outputDev; // Assuming a default constructor is available\\n    int pageStart = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Example range for page numbers\\n    int pageEnd = fuzzed_data.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double zoomX = fuzzed_data.ConsumeFloatingPoint<double>(); // Zoom factor for X\\n    double zoomY = fuzzed_data.ConsumeFloatingPoint<double>(); // Zoom factor for Y\\n    int rotation = fuzzed_data.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees\\n    GBool print = fuzzed_data.ConsumeBool(); // Print flag\\n    GBool render = fuzzed_data.ConsumeBool(); // Render flag\\n    GBool annotations = fuzzed_data.ConsumeBool(); // Annotations flag\\n\\n    // For the loop parameter, we need to allocate a valid pointer\\n    auto loop_bytes = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(DW_TAG_subroutine_typeInfinite_loop));\\n    if (loop_bytes.size() != sizeof(DW_TAG_subroutine_typeInfinite_loop)) {\\n        return 0; // Not enough data, exit early\\n    }\\n    DW_TAG_subroutine_typeInfinite_loop *loop = reinterpret_cast<DW_TAG_subroutine_typeInfinite_loop *>(loop_bytes.data());\\n\\n    // For userData, we can use remaining bytes\\n    auto userData_bytes = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    void *userData = userData_bytes.data();\\n\\n    // Call the function under test\\n    PDFDoc pdfDoc; // Assuming a default constructor is available\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoomX, zoomY, rotation, print, render, annotations, loop, userData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "41.38",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstddef>\\n#include <cstdint>\\n\\n// Assuming the necessary headers for PDFDoc, OutputDev, GBool, and DW_TAG_subroutine_typeInfinite loop are included here\\n// For demonstration purposes, I will define dummy classes and types below.\\n// In a real scenario, these should be replaced with the actual implementations.\\n\\nclass OutputDev {}; // Dummy class for OutputDev\\nusing GBool = bool; // Assuming GBool is a boolean type\\nstruct DW_TAG_subroutine_typeInfiniteLoop {}; // Dummy struct for DW_TAG_subroutine_typeInfinite loop\\n\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev* outputDev, int pageStart, int pageEnd, double scaleX, double scaleY,\\n                      int rotation, GBool useCropBox, GBool useTrimBox, GBool useArtBox,\\n                      DW_TAG_subroutine_typeInfiniteLoop* infiniteLoop, void* userData) {\\n        // Function implementation goes here\\n    }\\n}; // Added missing semicolon here\\n\\n// Ensure the function is declared as extern \"C\" to avoid name mangling issues\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of PDFDoc\\n    PDFDoc pdfDoc;\\n\\n    // Prepare the parameters for the function call\\n    OutputDev* outputDev = new OutputDev(); // Ensure this is not NULL\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming valid page range\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd >= pageStart\\n    double scaleX = stream.ConsumeFloatingPoint<double>(); // Scale can be any double\\n    double scaleY = stream.ConsumeFloatingPoint<double>(); // Scale can be any double\\n    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // Degrees of rotation\\n    GBool useCropBox = stream.ConsumeBool(); // Randomly consume a boolean\\n    GBool useTrimBox = stream.ConsumeBool(); // Randomly consume a boolean\\n    GBool useArtBox = stream.ConsumeBool(); // Randomly consume a boolean\\n    DW_TAG_subroutine_typeInfiniteLoop* infiniteLoop = new DW_TAG_subroutine_typeInfiniteLoop(); // Ensure this is not NULL\\n\\n    // Use remaining bytes as user data, ensuring we consume them as uint8_t\\n    std::vector<uint8_t> userData = stream.ConsumeRemainingBytes<uint8_t>(); \\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdfDoc.displayPages(outputDev, pageStart, pageEnd, scaleX, scaleY, rotation, useCropBox, useTrimBox, useArtBox, infiniteLoop, userData.data());\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n\\n    // Clean up\\n    delete outputDev;\\n    delete infiniteLoop;\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}