{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "33.04",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n#include <string>\\n\\n// Assuming GfxState is defined somewhere in the included headers\\nclass GfxState {\\npublic:\\n    // Example member variables\\n    std::string fontName;\\n    int fontSize;\\n\\n    // Constructor to initialize members\\n    GfxState() : fontSize(0) {\\n        // Initialize members as needed\\n    }\\n\\n    // Method to set font properties based on fuzzed data\\n    void setFontProperties(const std::string& name, int size) {\\n        fontName = name;\\n        fontSize = size;\\n    }\\n};\\n\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Function implementation (not provided)\\n        // Here you would typically use state->fontName and state->fontSize\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    \\n    // Create a GfxState object\\n    GfxState gfx_state;\\n\\n    // Consume fuzzed data to initialize GfxState\\n    std::string fontName = fuzzed_data.ConsumeRandomLengthString(10); // Random string of length up to 10\\n    int fontSize = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100\\n\\n    gfx_state.setFontProperties(fontName, fontSize);\\n\\n    // Call the function under test\\n    SplashOutputDev splash_output_dev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splash_output_dev.doUpdateFont(&gfx_state);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0; // Return 0 to indicate successful execution\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "52.35",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <cstdint>\\n#include <vector>\\n#include <string> // Include string for std::string\\n\\n// Assuming GfxState is a defined class in the project\\nclass GfxState {\\npublic:\\n    // Example member variables\\n    int some_int;\\n    float some_float;\\n    std::vector<uint8_t> data_buffer;\\n\\n    GfxState() : some_int(0), some_float(0.0f) {}\\n};\\n\\n// Assuming SplashOutputDev is a defined class in the project\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Function implementation\\n        // This is where the actual processing would occur\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of GfxState\\n    GfxState gfxState;\\n\\n    // Initialize gfxState with fuzzed data\\n    gfxState.some_int = stream.ConsumeIntegral<int>();\\n    gfxState.some_float = stream.ConsumeFloatingPoint<float>();\\n\\n    // Consume a random length of bytes for the data_buffer\\n    size_t buffer_size = stream.ConsumeIntegralInRange<size_t>(1, 256); // Ensure non-zero size\\n    std::string consumed_string = stream.ConsumeRandomLengthString();\\n    \\n    // Validate the size of the consumed string\\n    if (consumed_string.size() != buffer_size) {\\n        return 0; // Size mismatch, do not proceed\\n    }\\n    \\n    gfxState.data_buffer = std::vector<uint8_t>(consumed_string.begin(), consumed_string.end());\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}