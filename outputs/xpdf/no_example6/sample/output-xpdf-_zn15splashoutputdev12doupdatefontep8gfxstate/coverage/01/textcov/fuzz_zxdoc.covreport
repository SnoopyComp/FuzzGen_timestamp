LLVMFuzzerTestOneInput:
   37|     13|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   38|     13|auto start_target = std::chrono::high_resolution_clock::now();
   39|       |    // Create a FuzzedDataProvider instance
   40|     13|    FuzzedDataProvider fuzzed_data(data, size);
   41|       |    
   42|       |    // Create a GfxState object
   43|     13|    GfxState gfx_state;
   44|       |
   45|       |    // Consume fuzzed data to initialize GfxState
   46|     13|    std::string fontName = fuzzed_data.ConsumeRandomLengthString(10); // Random string of length up to 10
   47|     13|    int fontSize = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   48|       |
   49|     13|    gfx_state.setFontProperties(fontName, fontSize);
   50|       |
   51|       |    // Call the function under test
   52|     13|    SplashOutputDev splash_output_dev;
   53|     13|	auto start_func = std::chrono::high_resolution_clock::now();
   54|     13|    splash_output_dev.doUpdateFont(&gfx_state);
   55|     13|	auto end_func = std::chrono::high_resolution_clock::now();
   56|     13|auto end_target = std::chrono::high_resolution_clock::now();
   57|     13|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   58|       |
   59|     13|    return 0; // Return 0 to indicate successful execution
   60|     13|}
_ZN8GfxStateC2Ev:
   18|     13|    GfxState() : fontSize(0) {
   19|       |        // Initialize members as needed
   20|     13|    }
_ZN8GfxState17setFontPropertiesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi:
   23|     13|    void setFontProperties(const std::string& name, int size) {
   24|     13|        fontName = name;
   25|     13|        fontSize = size;
   26|     13|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   31|     13|    void doUpdateFont(GfxState *state) {
   32|       |        // Function implementation (not provided)
   33|       |        // Here you would typically use state->fontName and state->fontSize
   34|     13|    }

