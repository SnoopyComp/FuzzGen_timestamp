LLVMFuzzerTestOneInput:
   24|     13|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     13|auto start_target = std::chrono::high_resolution_clock::now();
   26|     13|    FuzzedDataProvider fuzzed_data(data, size);
   27|       |
   28|       |    // Initialize parameters for the function
   29|     13|    OutputDev outputDev; // Assuming a default constructor is available
   30|     13|    int pageStart = fuzzed_data.ConsumeIntegralInRange<int>(1, 100); // Example range for page numbers
   31|     13|    int pageEnd = fuzzed_data.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart
   32|     13|    double zoomX = fuzzed_data.ConsumeFloatingPoint<double>(); // Zoom factor for X
   33|     13|    double zoomY = fuzzed_data.ConsumeFloatingPoint<double>(); // Zoom factor for Y
   34|     13|    int rotation = fuzzed_data.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees
   35|     13|    GBool print = fuzzed_data.ConsumeBool(); // Print flag
   36|     13|    GBool render = fuzzed_data.ConsumeBool(); // Render flag
   37|     13|    GBool annotations = fuzzed_data.ConsumeBool(); // Annotations flag
   38|       |
   39|       |    // For the loop parameter, we need to allocate a valid pointer
   40|     13|    auto loop_bytes = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(DW_TAG_subroutine_typeInfinite_loop));
   41|     13|    if (loop_bytes.size() != sizeof(DW_TAG_subroutine_typeInfinite_loop)) {
  ------------------
  |  Branch (41:9): [True: 10, False: 3]
  ------------------
   42|     10|        return 0; // Not enough data, exit early
   43|     10|    }
   44|      3|    DW_TAG_subroutine_typeInfinite_loop *loop = reinterpret_cast<DW_TAG_subroutine_typeInfinite_loop *>(loop_bytes.data());
   45|       |
   46|       |    // For userData, we can use remaining bytes
   47|      3|    auto userData_bytes = fuzzed_data.ConsumeRemainingBytes<uint8_t>();
   48|      3|    void *userData = userData_bytes.data();
   49|       |
   50|       |    // Call the function under test
   51|      3|    PDFDoc pdfDoc; // Assuming a default constructor is available
   52|      3|	auto start_func = std::chrono::high_resolution_clock::now();
   53|      3|    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, zoomX, zoomY, rotation, print, render, annotations, loop, userData);
   54|      3|	auto end_func = std::chrono::high_resolution_clock::now();
   55|      3|auto end_target = std::chrono::high_resolution_clock::now();
   56|      3|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   57|       |
   58|      3|    return 0;
   59|     13|}
_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbPiPv:
   18|      3|    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double zoomX, double zoomY, int rotation, GBool print, GBool render, GBool annotations, DW_TAG_subroutine_typeInfinite_loop *loop, void *userData) {
   19|       |        // Function implementation
   20|      3|    }

