LLVMFuzzerTestOneInput:
   28|     11|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   29|     11|auto start_target = std::chrono::high_resolution_clock::now();
   30|     11|    FuzzedDataProvider stream(data, size);
   31|       |
   32|       |    // Create an instance of PDFDoc
   33|     11|    PDFDoc pdfDoc;
   34|       |
   35|       |    // Prepare the parameters for the function call
   36|     11|    OutputDev* outputDev = new OutputDev(); // Ensure this is not NULL
   37|     11|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Assuming valid page range
   38|     11|    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd >= pageStart
   39|     11|    double scaleX = stream.ConsumeFloatingPoint<double>(); // Scale can be any double
   40|     11|    double scaleY = stream.ConsumeFloatingPoint<double>(); // Scale can be any double
   41|     11|    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // Degrees of rotation
   42|     11|    GBool useCropBox = stream.ConsumeBool(); // Randomly consume a boolean
   43|     11|    GBool useTrimBox = stream.ConsumeBool(); // Randomly consume a boolean
   44|     11|    GBool useArtBox = stream.ConsumeBool(); // Randomly consume a boolean
   45|     11|    DW_TAG_subroutine_typeInfiniteLoop* infiniteLoop = new DW_TAG_subroutine_typeInfiniteLoop(); // Ensure this is not NULL
   46|       |
   47|       |    // Use remaining bytes as user data, ensuring we consume them as uint8_t
   48|     11|    std::vector<uint8_t> userData = stream.ConsumeRemainingBytes<uint8_t>(); 
   49|       |
   50|       |    // Call the function under test
   51|     11|	auto start_func = std::chrono::high_resolution_clock::now();
   52|     11|    pdfDoc.displayPages(outputDev, pageStart, pageEnd, scaleX, scaleY, rotation, useCropBox, useTrimBox, useArtBox, infiniteLoop, userData.data());
   53|     11|	auto end_func = std::chrono::high_resolution_clock::now();
   54|       |
   55|       |    // Clean up
   56|     11|    delete outputDev;
   57|     11|    delete infiniteLoop;
   58|     11|auto end_target = std::chrono::high_resolution_clock::now();
   59|     11|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   60|       |
   61|     11|    return 0;
   62|     11|}
_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbP34DW_TAG_subroutine_typeInfiniteLoopPv:
   22|     11|                      DW_TAG_subroutine_typeInfiniteLoop* infiniteLoop, void* userData) {
   23|       |        // Function implementation goes here
   24|     11|    }

