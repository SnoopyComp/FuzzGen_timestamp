LLVMFuzzerTestOneInput:
   22|     51|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   23|     51|    FuzzedDataProvider stream(data, size);
   24|       |
   25|       |    // Create a GfxState object
   26|     51|    GfxState gfxState;
   27|       |
   28|       |    // Consume double values for coordinates
   29|     51|    double x1 = stream.ConsumeFloatingPoint<double>();
   30|     51|    double y1 = stream.ConsumeFloatingPoint<double>();
   31|     51|    double x2 = stream.ConsumeFloatingPoint<double>();
   32|     51|    double y2 = stream.ConsumeFloatingPoint<double>();
   33|     51|    double x3 = stream.ConsumeFloatingPoint<double>();
   34|     51|    double y3 = stream.ConsumeFloatingPoint<double>();
   35|       |
   36|       |    // Consume a CharCode
   37|     51|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   38|       |
   39|       |    // Consume an integer for font size
   40|     51|    int fontSize = stream.ConsumeIntegral<int>();
   41|       |
   42|       |    // Consume Unicode data
   43|     51|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 Unicode character
   44|     51|    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeCount * sizeof(Unicode));
   45|       |    
   46|       |    // Validate the size of the consumed string
   47|     51|    if (unicodeString.size() != unicodeCount * sizeof(Unicode)) {
  ------------------
  |  Branch (47:9): [True: 48, False: 3]
  ------------------
   48|     48|        return 0; // Invalid size, exit early
   49|     48|    }
   50|       |
   51|       |    // Convert the string to a vector of Unicode
   52|      3|    std::vector<Unicode> unicodeData(reinterpret_cast<const Unicode*>(unicodeString.data()), 
   53|      3|                                      reinterpret_cast<const Unicode*>(unicodeString.data()) + unicodeCount);
   54|      3|    Unicode *unicodePtr = unicodeData.data();
   55|       |
   56|       |    // Consume boolean flags
   57|      3|    GBool flag1 = stream.ConsumeBool();
   58|      3|    GBool flag2 = stream.ConsumeBool();
   59|      3|    GBool flag3 = stream.ConsumeBool();
   60|       |
   61|       |    // Call the function under test
   62|      3|    SplashOutputDev splashOutputDev;
   63|      3|    splashOutputDev.drawChar(&gfxState, x1, y1, x2, y2, x3, y3, charCode, fontSize, unicodePtr, 
   64|      3|                             static_cast<int>(unicodeCount), flag1, flag2, flag3);
   65|       |
   66|      3|    return 0;
   67|     51|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   16|      3|                  GBool flag1, GBool flag2, GBool flag3) {
   17|       |        // Function implementation...
   18|      3|    }

