LLVMFuzzerTestOneInput:
   47|     48|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   48|     48|auto start_target = std::chrono::high_resolution_clock::now();//erase
   49|     48|    FuzzedDataProvider stream(data, size);
   50|       |
   51|       |    // Initialize parameters for the function
   52|     48|    GfxState gfxState; // Create an instance of GfxState
   53|       |
   54|     48|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   55|     48|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   56|     48|    double width = stream.ConsumeFloatingPoint<double>(); // Width of the character
   57|     48|    double height = stream.ConsumeFloatingPoint<double>(); // Height of the character
   58|     48|    double dx = stream.ConsumeFloatingPoint<double>(); // X offset
   59|     48|    double dy = stream.ConsumeFloatingPoint<double>(); // Y offset
   60|     48|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   61|     48|    int fontSize = stream.ConsumeIntegral<int>(); // Font size
   62|     48|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   63|     48|    std::vector<Unicode> unicodeArray(unicodeCount); // Unicode array
   64|    344|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (64:24): [True: 296, False: 48]
  ------------------
   65|    296|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill Unicode array with random values
   66|    296|    }
   67|     48|    GBool flag1 = stream.ConsumeBool(); // First boolean parameter
   68|     48|    GBool flag2 = stream.ConsumeBool(); // Second boolean parameter
   69|     48|    GBool flag3 = stream.ConsumeBool(); // Third boolean parameter
   70|       |
   71|       |    // Call the function under test
   72|     48|    SplashOutputDev splashOutputDev;
   73|     48|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   74|     48|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), flag1, flag2, flag3);
   75|     48|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   76|     48|auto end_target = std::chrono::high_resolution_clock::now();//erase
   77|     48|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   78|       |
   79|     48|    return 0;
   80|     48|}
_ZN8GfxStateC2Ev:
   18|     48|    GfxState() {
   19|       |        // Initialize members
   20|     48|        fontSize = 12; // Default font size
   21|     48|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     48|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     48|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   41|       |        // Function implementation (placeholder)
   42|       |        // For demonstration, we can print the parameters
   43|     48|        printf("Drawing char: %u at (%.2f, %.2f) with width %.2f and height %.2f\n", charCode, x, y, width, height);
   44|     48|    }

