LLVMFuzzerTestOneInput:
   33|     37|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|     37|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|     37|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Create an instance of SplashOutputDev
   38|     37|    SplashOutputDev splashOutputDev;
   39|       |
   40|       |    // Create a GfxState object
   41|     37|    GfxState gfxState;
   42|       |
   43|       |    // Initialize parameters for the function
   44|     37|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   45|     37|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   46|     37|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   47|     37|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   48|     37|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   49|     37|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   50|     37|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code
   51|     37|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100
   52|       |
   53|       |    // Consume a Unicode array
   54|     37|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Size of Unicode array
   55|     37|    std::vector<Unicode> unicodeArray(unicodeSize);
   56|     96|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (56:24): [True: 59, False: 37]
  ------------------
   57|     59|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array
   58|     59|    }
   59|       |
   60|       |    // Consume boolean flags
   61|     37|    GBool flag1 = stream.ConsumeBool(); // First boolean flag
   62|     37|    GBool flag2 = stream.ConsumeBool(); // Second boolean flag
   63|     37|    GBool flag3 = stream.ConsumeBool(); // Third boolean flag
   64|       |
   65|       |    // Call the function under test
   66|     37|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   67|     37|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeArray.size()), flag1, flag2, flag3);
   68|     37|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   69|     37|auto end_target = std::chrono::high_resolution_clock::now();//erase
   70|     37|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   71|       |
   72|     37|    return 0;
   73|     37|}
_ZN8GfxStateC2Ev:
   17|     37|    GfxState() : someStateValue(0) {} // Default constructor
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   26|     37|    void drawChar(GfxState *gfxState, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {
   27|       |        // Implementation of drawChar (placeholder)
   28|     37|        printf("Drawing char: %u at (%f, %f) with size %d\n", charCode, x, y, fontSize);
   29|       |        // Additional logic can be added here
   30|     37|    }

