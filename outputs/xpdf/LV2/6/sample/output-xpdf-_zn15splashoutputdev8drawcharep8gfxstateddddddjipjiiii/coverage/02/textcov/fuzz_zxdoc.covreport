LLVMFuzzerTestOneInput:
   33|     44|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|     44|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|     44|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize parameters for the function
   38|     44|    GfxState gfxState; // Create an instance of GfxState
   39|       |
   40|     44|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   41|     44|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   42|     44|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   43|     44|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   44|     44|    double r = stream.ConsumeFloatingPoint<double>(); // Red color component
   45|     44|    double g = stream.ConsumeFloatingPoint<double>(); // Green color component
   46|     44|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code
   47|     44|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size
   48|     44|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Number of Unicode characters
   49|       |
   50|       |    // Create a Unicode array
   51|     44|    std::vector<Unicode> unicodeArray(unicodeCount);
   52|    141|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (52:24): [True: 97, False: 44]
  ------------------
   53|     97|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill with random Unicode values
   54|     97|    }
   55|       |
   56|       |    // Consume boolean flags
   57|     44|    GBool flag1 = stream.ConsumeBool(); // First boolean flag
   58|     44|    GBool flag2 = stream.ConsumeBool(); // Second boolean flag
   59|     44|    GBool flag3 = stream.ConsumeBool(); // Third boolean flag
   60|       |
   61|       |    // Call the function under test
   62|     44|    SplashOutputDev splashOutputDev;
   63|     44|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   64|     44|    splashOutputDev.drawChar(&gfxState, x, y, width, height, r, g, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeArray.size()), flag1, flag2, flag3);
   65|     44|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   66|     44|auto end_target = std::chrono::high_resolution_clock::now();//erase
   67|     44|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   68|       |
   69|     44|    return 0;
   70|     44|}
_ZN8GfxStateC2Ev:
   17|     44|    GfxState() : someStateVariable(0) {}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   26|     44|    void drawChar(GfxState *state, double x, double y, double width, double height, double r, double g, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   27|       |        // Placeholder implementation for demonstration
   28|       |        // In a real implementation, this would render a character on the output device
   29|     44|        printf("Drawing char: %u at (%.2f, %.2f) with size %d\n", charCode, x, y, fontSize);
   30|     44|    }

