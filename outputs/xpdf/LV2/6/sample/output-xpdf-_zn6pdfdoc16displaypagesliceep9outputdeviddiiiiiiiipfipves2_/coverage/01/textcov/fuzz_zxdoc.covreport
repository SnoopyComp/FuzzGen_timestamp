LLVMFuzzerTestOneInput:
   29|     19|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   30|     19|auto start_target = std::chrono::high_resolution_clock::now();//erase
   31|     19|    FuzzedDataProvider stream(data, size);
   32|       |
   33|       |    // Initialize parameters for the function
   34|     19|    OutputDev outputDev; // Create an instance of OutputDev
   35|     19|    int pageNum = stream.ConsumeIntegralInRange<int>(1, 100); // Page number between 1 and 100
   36|     19|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   37|     19|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   38|     19|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   39|     19|    GBool crop = stream.ConsumeBool(); // Crop flag
   40|     19|    GBool rotate = stream.ConsumeBool(); // Rotate flag
   41|     19|    GBool print = stream.ConsumeBool(); // Print flag
   42|       |
   43|       |    // Additional parameters
   44|     19|    int param1 = stream.ConsumeIntegral<int>(); // Additional parameter 1
   45|     19|    int param2 = stream.ConsumeIntegral<int>(); // Additional parameter 2
   46|     19|    int param3 = stream.ConsumeIntegral<int>(); // Additional parameter 3
   47|     19|    int param4 = stream.ConsumeIntegral<int>(); // Additional parameter 4
   48|       |
   49|       |    // Create a subroutine type pointer (not null)
   50|     19|    DW_TAG_subroutine_typeInfinite_loop subroutineType;
   51|     19|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   52|       |
   53|       |    // Pointer to user data, can be initialized to nullptr or some valid data
   54|     19|    void *userData = nullptr; // Assuming this can be null for the test
   55|       |
   56|       |    // Call the function under test
   57|     19|    PDFDoc pdfDoc;
   58|     19|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   59|     19|    pdfDoc.displayPageSlice(&outputDev, pageNum, x, y, zoom, crop, rotate, print, param1, param2, param3, param4, subroutinePtr, userData);
   60|     19|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   61|     19|auto end_target = std::chrono::high_resolution_clock::now();//erase
   62|     19|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   63|       |
   64|     19|    return 0;
   65|     19|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddibbbiiiiPiPv:
   21|     19|    void displayPageSlice(OutputDev *outputDev, int pageNum, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int param1, int param2, int param3, int param4, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   22|       |        // Function implementation (placeholder)
   23|       |        // For demonstration, we can print the parameters
   24|     19|        printf("Page Number: %d, Coordinates: (%.2f, %.2f), Zoom: %d, Crop: %d, Rotate: %d, Print: %d\n", 
   25|     19|               pageNum, x, y, zoom, crop, rotate, print);
   26|     19|    }

