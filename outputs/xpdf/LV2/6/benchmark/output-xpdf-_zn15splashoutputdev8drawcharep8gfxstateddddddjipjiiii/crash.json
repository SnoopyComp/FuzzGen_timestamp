{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "55.94",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint> // For uint32_t\\n#include <vector>  // For std::vector\\n#include <cstring> // For memset\\n#include <cstdio>  // For printf\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined somewhere in the codebase\\nclass GfxState {\\npublic:\\n    // Example members for GfxState\\n    int someStateValue;\\n\\n    GfxState() : someStateValue(0) {} // Default constructor\\n};\\n\\nusing CharCode = uint32_t; // Example definition for CharCode\\nusing Unicode = uint32_t;   // Example definition for Unicode\\nusing GBool = bool;         // Example definition for GBool\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *gfxState, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeSize, GBool flag1, GBool flag2, GBool flag3) {\\n        // Implementation of drawChar (placeholder)\\n        printf(\"Drawing char: %u at (%f, %f) with size %d\\\n\", charCode, x, y, fontSize);\\n        // Additional logic can be added here\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Create a GfxState object\\n    GfxState gfxState;\\n\\n    // Initialize parameters for the function\\n    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate\\n    double width = stream.ConsumeFloatingPoint<double>(); // Width\\n    double height = stream.ConsumeFloatingPoint<double>(); // Height\\n    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X\\n    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code\\n    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100\\n\\n    // Consume a Unicode array\\n    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Size of Unicode array\\n    std::vector<Unicode> unicodeArray(unicodeSize);\\n    for (size_t i = 0; i < unicodeSize; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array\\n    }\\n\\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool(); // First boolean flag\\n    GBool flag2 = stream.ConsumeBool(); // Second boolean flag\\n    GBool flag3 = stream.ConsumeBool(); // Third boolean flag\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeArray.size()), flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "55.94",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>//erase\\n#ifndef iostream//erase\\n#include <iostream>//erase\\n#endif//erase\\n#include <cstdint> // For uint32_t\\n#include <vector>  // For std::vector\\n#include <string>  // For std::string\\n#include <cstring> // For memset\\n\\n// Assuming GfxState, CharCode, Unicode, and GBool are defined somewhere in the codebase\\nclass GfxState {\\npublic:\\n    // Example members for GfxState\\n    int someStateVariable;\\n\\n    GfxState() : someStateVariable(0) {}\\n};\\n\\nusing CharCode = uint32_t; // Example definition\\nusing Unicode = uint32_t;   // Example definition\\nusing GBool = bool;         // Example definition\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *state, double x, double y, double width, double height, double r, double g, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n        // Placeholder implementation for demonstration\\n        // In a real implementation, this would render a character on the output device\\n        printf(\"Drawing char: %u at (%.2f, %.2f) with size %d\\\n\", charCode, x, y, fontSize);\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();//erase\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function\\n    GfxState gfxState; // Create an instance of GfxState\\n\\n    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate\\n    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate\\n    double width = stream.ConsumeFloatingPoint<double>(); // Width\\n    double height = stream.ConsumeFloatingPoint<double>(); // Height\\n    double r = stream.ConsumeFloatingPoint<double>(); // Red color component\\n    double g = stream.ConsumeFloatingPoint<double>(); // Green color component\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code\\n    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size\\n    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Number of Unicode characters\\n\\n    // Create a Unicode array\\n    std::vector<Unicode> unicodeArray(unicodeCount);\\n    for (size_t i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill with random Unicode values\\n    }\\n\\n    // Consume boolean flags\\n    GBool flag1 = stream.ConsumeBool(); // First boolean flag\\n    GBool flag2 = stream.ConsumeBool(); // Second boolean flag\\n    GBool flag3 = stream.ConsumeBool(); // Third boolean flag\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();//erase\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, r, g, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeArray.size()), flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();//erase\\nauto end_target = std::chrono::high_resolution_clock::now();//erase\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}