LLVMFuzzerTestOneInput:
   32|     43|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   33|     43|auto start_target = std::chrono::high_resolution_clock::now();//erase
   34|     43|    FuzzedDataProvider stream(data, size);
   35|       |
   36|       |    // Initialize parameters for the function
   37|     43|    GfxState gfxState; // Create an instance of GfxState
   38|     43|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   39|     43|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   40|     43|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   41|     43|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   42|     43|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   43|     43|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   44|     43|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code
   45|     43|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100
   46|     43|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Number of Unicode characters
   47|     43|    std::vector<Unicode> unicodeArray(unicodeCount); // Create a Unicode array
   48|    142|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (48:24): [True: 99, False: 43]
  ------------------
   49|     99|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array with fuzzed data
   50|     99|    }
   51|     43|    GBool isStroke = stream.ConsumeBool(); // Stroke flag
   52|     43|    GBool isFill = stream.ConsumeBool(); // Fill flag
   53|     43|    GBool isClip = stream.ConsumeBool(); // Clip flag
   54|       |
   55|       |    // Create an instance of SplashOutputDev
   56|     43|    SplashOutputDev splashOutputDev;
   57|       |
   58|       |    // Call the function under test
   59|     43|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   60|     43|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeArray.size()), isStroke, isFill, isClip);
   61|     43|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   62|     43|auto end_target = std::chrono::high_resolution_clock::now();//erase
   63|     43|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   64|       |
   65|     43|    return 0;
   66|     43|}
_ZN8GfxStateC2Ev:
   17|     43|    GfxState() : someStateValue(0) {} // Default constructor
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   26|     43|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool isStroke, GBool isFill, GBool isClip) {
   27|       |        // Implementation of drawChar (placeholder)
   28|     43|        printf("Drawing char: %u at (%.2f, %.2f) with size %d\n", charCode, x, y, fontSize);
   29|     43|    }

