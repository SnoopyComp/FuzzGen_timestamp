LLVMFuzzerTestOneInput:
   47|     46|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   48|     46|auto start_target = std::chrono::high_resolution_clock::now();//erase
   49|     46|    FuzzedDataProvider stream(data, size);
   50|       |
   51|       |    // Create an instance of SplashOutputDev
   52|     46|    SplashOutputDev splashOutputDev;
   53|       |
   54|       |    // Create a GfxState object
   55|     46|    GfxState gfxState;
   56|       |
   57|       |    // Use the fuzzed data to influence the GfxState
   58|     46|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   59|     46|    gfxState.setFontSize(fontSize);
   60|       |
   61|       |    // Consume parameters for drawChar
   62|     46|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   63|     46|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   64|     46|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   65|     46|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   66|     46|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   67|     46|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   68|     46|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   69|     46|    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Number of Unicode characters
   70|       |
   71|       |    // Create a Unicode array based on the unicodeCount
   72|     46|    std::vector<Unicode> unicodeArray(unicodeCount);
   73|    151|    for (int i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (73:21): [True: 105, False: 46]
  ------------------
   74|    105|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill with random Unicode values
   75|    105|    }
   76|       |
   77|       |    // Consume boolean parameters for drawChar
   78|     46|    GBool isFill = stream.ConsumeBool(); // Fill flag
   79|     46|    GBool isStroke = stream.ConsumeBool(); // Stroke flag
   80|     46|    GBool isClip = stream.ConsumeBool(); // Clip flag
   81|       |
   82|       |    // Call the function under test
   83|     46|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   84|     46|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeCount, isFill, isStroke, isClip);
   85|     46|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   86|     46|auto end_target = std::chrono::high_resolution_clock::now();//erase
   87|     46|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   88|       |
   89|     46|    return 0;
   90|     46|}
_ZN8GfxStateC2Ev:
   18|     46|    GfxState() {
   19|       |        // Initialize members
   20|     46|        fontSize = 12; // Default font size
   21|     46|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     46|    }
_ZN8GfxState11setFontSizeEi:
   24|     46|    void setFontSize(int size) {
   25|     46|        fontSize = size;
   26|     46|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     46|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeCount, GBool isFill, GBool isStroke, GBool isClip) {
   41|       |        // Implementation of drawChar (placeholder)
   42|       |        // For demonstration purposes, we can print the parameters
   43|     46|        printf("Drawing char: %u at (%.2f, %.2f) with size %d\n", charCode, x, y, fontSize);
   44|     46|    }

