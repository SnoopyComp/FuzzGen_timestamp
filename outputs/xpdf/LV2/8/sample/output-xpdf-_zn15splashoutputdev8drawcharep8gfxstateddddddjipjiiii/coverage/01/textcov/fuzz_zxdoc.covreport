LLVMFuzzerTestOneInput:
   47|     43|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   48|     43|auto start_target = std::chrono::high_resolution_clock::now();//erase
   49|     43|    FuzzedDataProvider stream(data, size);
   50|       |
   51|       |    // Initialize parameters for the function
   52|     43|    GfxState gfxState; // Create an instance of GfxState
   53|     43|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   54|     43|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   55|     43|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   56|     43|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   57|     43|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   58|     43|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   59|     43|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   60|     43|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100
   61|     43|    size_t unicodeLength = stream.ConsumeIntegralInRange<size_t>(1, 10); // Length of Unicode array
   62|     43|    std::vector<Unicode> unicodeArray(unicodeLength); // Create Unicode array
   63|    136|    for (size_t i = 0; i < unicodeLength; ++i) {
  ------------------
  |  Branch (63:24): [True: 93, False: 43]
  ------------------
   64|     93|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill Unicode array
   65|     93|    }
   66|     43|    GBool fill = stream.ConsumeBool(); // Fill flag
   67|     43|    GBool stroke = stream.ConsumeBool(); // Stroke flag
   68|     43|    GBool clip = stream.ConsumeBool(); // Clip flag
   69|       |
   70|       |    // Call the function under test
   71|     43|    SplashOutputDev splashOutputDev;
   72|     43|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   73|     43|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeLength), fill, stroke, clip);
   74|     43|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   75|     43|auto end_target = std::chrono::high_resolution_clock::now();//erase
   76|     43|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   77|       |
   78|     43|    return 0;
   79|     43|}
_ZN8GfxStateC2Ev:
   18|     43|    GfxState() {
   19|       |        // Initialize members
   20|     43|        fontSize = 12; // Default font size
   21|     43|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     43|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     43|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicode, int unicodeLength, GBool fill, GBool stroke, GBool clip) {
   41|       |        // Implementation of drawChar (placeholder)
   42|       |        // This is just for demonstration and should be replaced with actual logic.
   43|     43|        printf("Drawing char: %u at (%f, %f) with size %d\n", charCode, x, y, fontSize);
   44|     43|    }

