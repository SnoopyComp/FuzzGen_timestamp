LLVMFuzzerTestOneInput:
   32|     40|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   33|     40|auto start_target = std::chrono::high_resolution_clock::now();//erase
   34|     40|    FuzzedDataProvider stream(data, size);
   35|       |
   36|       |    // Create an instance of SplashOutputDev
   37|     40|    SplashOutputDev splashOutputDev;
   38|       |
   39|       |    // Create a GfxState object
   40|     40|    GfxState gfxState;
   41|       |
   42|       |    // Use the fuzzed data to influence the GfxState
   43|     40|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   44|     40|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   45|     40|    double width = stream.ConsumeFloatingPoint<double>(); // Width of the character
   46|     40|    double height = stream.ConsumeFloatingPoint<double>(); // Height of the character
   47|     40|    double dx = stream.ConsumeFloatingPoint<double>(); // X offset
   48|     40|    double dy = stream.ConsumeFloatingPoint<double>(); // Y offset
   49|     40|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   50|     40|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100
   51|     40|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Count of Unicode characters
   52|     40|    std::vector<Unicode> unicodeArray(unicodeCount); // Create a vector for Unicode characters
   53|       |
   54|       |    // Fill the Unicode array with fuzzed data
   55|    119|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (55:24): [True: 79, False: 40]
  ------------------
   56|     79|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill with random Unicode values
   57|     79|    }
   58|       |
   59|       |    // Consume boolean parameters
   60|     40|    GBool isStroke = stream.ConsumeBool(); // Stroke flag
   61|     40|    GBool isFill = stream.ConsumeBool(); // Fill flag
   62|     40|    GBool isClip = stream.ConsumeBool(); // Clip flag
   63|       |
   64|       |    // Call the function under test
   65|     40|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   66|     40|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), isStroke, isFill, isClip);
   67|     40|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   68|     40|auto end_target = std::chrono::high_resolution_clock::now();//erase
   69|     40|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   70|       |
   71|     40|    return 0;
   72|     40|}
_ZN8GfxStateC2Ev:
   16|     40|    GfxState() : someStateVariable(0) {}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   25|     40|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool isStroke, GBool isFill, GBool isClip) {
   26|       |        // Implementation of drawChar (placeholder)
   27|       |        // For demonstration purposes, we can print the parameters
   28|     40|        printf("Drawing char: %u at (%f, %f) with width %f and height %f\n", charCode, x, y, width, height);
   29|     40|    }

