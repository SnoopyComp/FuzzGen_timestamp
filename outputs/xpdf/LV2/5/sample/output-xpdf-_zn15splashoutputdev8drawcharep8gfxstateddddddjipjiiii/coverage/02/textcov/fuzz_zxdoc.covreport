LLVMFuzzerTestOneInput:
   32|     41|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   33|     41|auto start_target = std::chrono::high_resolution_clock::now();//erase
   34|     41|    FuzzedDataProvider stream(data, size);
   35|       |
   36|       |    // Initialize parameters for the function
   37|     41|    GfxState gfxState; // Create an instance of GfxState
   38|     41|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   39|     41|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   40|     41|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   41|     41|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   42|     41|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   43|     41|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   44|     41|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   45|     41|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100
   46|     41|    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Unicode count between 1 and 10
   47|       |
   48|       |    // Create a Unicode array
   49|     41|    std::vector<Unicode> unicodeArray(unicodeCount);
   50|    132|    for (int i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (50:21): [True: 91, False: 41]
  ------------------
   51|     91|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill with fuzzed Unicode values
   52|     91|    }
   53|       |
   54|       |    // Consume boolean parameters
   55|     41|    GBool isStroke = stream.ConsumeBool(); // Stroke flag
   56|     41|    GBool isFill = stream.ConsumeBool(); // Fill flag
   57|     41|    GBool isClip = stream.ConsumeBool(); // Clip flag
   58|       |
   59|       |    // Call the function under test
   60|     41|    SplashOutputDev splashOutputDev;
   61|     41|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   62|     41|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeCount, isStroke, isFill, isClip);
   63|     41|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   64|     41|auto end_target = std::chrono::high_resolution_clock::now();//erase
   65|     41|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   66|       |
   67|     41|    return 0;
   68|     41|}
_ZN8GfxStateC2Ev:
   17|     41|    GfxState() : someStateVariable(0) {} // Default constructor
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   26|     41|    void drawChar(GfxState *gfxState, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool isStroke, GBool isFill, GBool isClip) {
   27|       |        // Function implementation (placeholder)
   28|     41|        printf("Drawing char: %u at (%f, %f) with width: %f, height: %f, font size: %d\n", charCode, x, y, width, height, fontSize);
   29|     41|    }

