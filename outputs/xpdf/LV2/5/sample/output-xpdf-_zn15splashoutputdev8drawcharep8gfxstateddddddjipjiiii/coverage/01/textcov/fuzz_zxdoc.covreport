LLVMFuzzerTestOneInput:
   31|     51|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   32|     51|auto start_target = std::chrono::high_resolution_clock::now();//erase
   33|     51|    FuzzedDataProvider stream(data, size);
   34|       |
   35|       |    // Create an instance of GfxState
   36|     51|    GfxState gfxState;
   37|       |
   38|       |    // Initialize parameters for the function
   39|     51|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   40|     51|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   41|     51|    double width = stream.ConsumeFloatingPoint<double>(); // Width of the character
   42|     51|    double height = stream.ConsumeFloatingPoint<double>(); // Height of the character
   43|     51|    double dx = stream.ConsumeFloatingPoint<double>(); // X offset
   44|     51|    double dy = stream.ConsumeFloatingPoint<double>(); // Y offset
   45|     51|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code
   46|     51|    int fontSize = stream.ConsumeIntegral<int>(); // Font size
   47|     51|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   48|     51|    std::vector<Unicode> unicodeArray(unicodeCount); // Unicode array
   49|       |
   50|       |    // Fill the Unicode array with random data
   51|    708|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (51:24): [True: 657, False: 51]
  ------------------
   52|    657|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill with random Unicode values
   53|    657|    }
   54|       |
   55|     51|    GBool fill = stream.ConsumeBool(); // Fill flag
   56|     51|    GBool stroke = stream.ConsumeBool(); // Stroke flag
   57|     51|    GBool render = stream.ConsumeBool(); // Render flag
   58|       |
   59|       |    // Create an instance of SplashOutputDev and call the function under test
   60|     51|    SplashOutputDev splashOutputDev;
   61|     51|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   62|     51|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), fill, stroke, render);
   63|     51|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   64|     51|auto end_target = std::chrono::high_resolution_clock::now();//erase
   65|     51|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   66|       |
   67|     51|    return 0;
   68|     51|}
_ZN8GfxStateC2Ev:
   16|     51|    GfxState() : someStateVariable(0) {} // Default constructor
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   25|     51|    void drawChar(GfxState *gfxState, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool fill, GBool stroke, GBool render) {
   26|       |        // Implementation of drawChar (placeholder)
   27|       |        // For demonstration, we can print the parameters
   28|     51|    }

