LLVMFuzzerTestOneInput:
   30|     40|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   31|     40|auto start_target = std::chrono::high_resolution_clock::now();//erase
   32|     40|    FuzzedDataProvider stream(data, size);
   33|       |
   34|       |    // Create an instance of SplashOutputDev
   35|     40|    SplashOutputDev splashOutputDev;
   36|       |
   37|       |    // Create a GfxState object
   38|     40|    GfxState gfxState;
   39|       |
   40|       |    // Initialize parameters for the function
   41|     40|    double x = stream.ConsumeFloatingPoint<double>(); // X position
   42|     40|    double y = stream.ConsumeFloatingPoint<double>(); // Y position
   43|     40|    double width = stream.ConsumeFloatingPoint<double>(); // Width of the character
   44|     40|    double height = stream.ConsumeFloatingPoint<double>(); // Height of the character
   45|     40|    double dx = stream.ConsumeFloatingPoint<double>(); // X offset
   46|     40|    double dy = stream.ConsumeFloatingPoint<double>(); // Y offset
   47|     40|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code
   48|     40|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100
   49|     40|    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Number of Unicode characters
   50|     40|    std::vector<Unicode> unicodeArray(unicodeCount); // Create a Unicode array
   51|       |
   52|    126|    for (int i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (52:21): [True: 86, False: 40]
  ------------------
   53|     86|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array with random values
   54|     86|    }
   55|       |
   56|     40|    GBool isStroke = stream.ConsumeBool(); // Stroke flag
   57|     40|    GBool isFill = stream.ConsumeBool(); // Fill flag
   58|     40|    GBool isClip = stream.ConsumeBool(); // Clip flag
   59|       |
   60|       |    // Call the function under test
   61|     40|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   62|     40|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeCount, isStroke, isFill, isClip);
   63|     40|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   64|     40|auto end_target = std::chrono::high_resolution_clock::now();//erase
   65|     40|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   66|       |
   67|     40|    return 0;
   68|     40|}
_ZN8GfxStateC2Ev:
   14|     40|    GfxState() {
   15|       |        // Initialization if needed
   16|     40|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   25|     40|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool isStroke, GBool isFill, GBool isClip) {
   26|       |        // Placeholder implementation for demonstration
   27|     40|    }

