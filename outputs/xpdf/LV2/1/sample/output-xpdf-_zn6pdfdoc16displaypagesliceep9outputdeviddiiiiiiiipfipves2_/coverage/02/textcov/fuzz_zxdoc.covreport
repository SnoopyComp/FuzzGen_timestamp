LLVMFuzzerTestOneInput:
   31|     19|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   32|     19|auto start_target = std::chrono::high_resolution_clock::now();//erase
   33|     19|    FuzzedDataProvider stream(data, size);
   34|       |
   35|       |    // Initialize parameters for the function
   36|     19|    OutputDev outputDev; // Create an instance of OutputDev
   37|     19|    int pageNum = stream.ConsumeIntegralInRange<int>(1, 100); // Page number between 1 and 100
   38|     19|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   39|     19|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   40|     19|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   41|     19|    GBool crop = stream.ConsumeBool(); // Crop flag
   42|     19|    GBool rotate = stream.ConsumeBool(); // Rotate flag
   43|     19|    GBool print = stream.ConsumeBool(); // Print flag
   44|       |
   45|       |    // Consume additional parameters
   46|     19|    int param1 = stream.ConsumeIntegral<int>(); // Additional parameter 1
   47|     19|    int param2 = stream.ConsumeIntegral<int>(); // Additional parameter 2
   48|     19|    int param3 = stream.ConsumeIntegral<int>(); // Additional parameter 3
   49|     19|    int param4 = stream.ConsumeIntegral<int>(); // Additional parameter 4
   50|       |
   51|       |    // Create a subroutine type pointer (not null)
   52|     19|    DW_TAG_subroutine_typeInfinite_loop subroutineType;
   53|     19|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   54|       |
   55|       |    // Pointer to user data, can be initialized to nullptr or some valid data
   56|     19|    void *userData = nullptr; // Assuming this can be null for the test
   57|       |
   58|       |    // Call the function under test
   59|     19|    PDFDoc pdfDoc;
   60|     19|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   61|     19|    pdfDoc.displayPageSlice(&outputDev, pageNum, x, y, zoom, crop, rotate, print, param1, param2, param3, param4, subroutinePtr, userData);
   62|     19|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   63|     19|auto end_target = std::chrono::high_resolution_clock::now();//erase
   64|     19|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   65|       |
   66|     19|    return 0;
   67|     19|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddibbbiiiiPiPv:
   24|     19|    void displayPageSlice(OutputDev *outputDev, int pageNum, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, int param1, int param2, int param3, int param4, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   25|       |        // Function implementation (placeholder)
   26|       |        // For demonstration, we can print the parameters (optional)
   27|     19|        printf("Page Number: %d, Coordinates: (%.2f, %.2f), Zoom: %d\n", pageNum, x, y, zoom);
   28|     19|    }

