LLVMFuzzerTestOneInput:
   47|     50|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   48|     50|auto start_target = std::chrono::high_resolution_clock::now();//erase
   49|     50|    FuzzedDataProvider stream(data, size);
   50|       |
   51|       |    // Create an instance of SplashOutputDev
   52|     50|    SplashOutputDev splashOutputDev;
   53|       |
   54|       |    // Create a GfxState object
   55|     50|    GfxState gfxState;
   56|       |
   57|       |    // Use the fuzzed data to influence the GfxState
   58|     50|    gfxState.setFontSize(stream.ConsumeIntegralInRange<int>(1, 100)); // Random font size between 1 and 100
   59|       |
   60|       |    // Consume parameters for drawChar
   61|     50|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   62|     50|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   63|     50|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   64|     50|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   65|     50|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   66|     50|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   67|     50|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   68|     50|    int fontSize = stream.ConsumeIntegral<int>(); // Font size
   69|     50|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 100); // Size for Unicode array
   70|     50|    std::vector<Unicode> unicodeArray(unicodeCount); // Create Unicode array
   71|       |
   72|       |    // Fill the Unicode array with random values
   73|    424|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (73:24): [True: 374, False: 50]
  ------------------
   74|    374|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();
   75|    374|    }
   76|       |
   77|     50|    GBool flag1 = stream.ConsumeBool(); // First boolean parameter
   78|     50|    GBool flag2 = stream.ConsumeBool(); // Second boolean parameter
   79|     50|    GBool flag3 = stream.ConsumeBool(); // Third boolean parameter
   80|       |
   81|       |    // Call the function under test
   82|     50|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   83|     50|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), flag1, flag2, flag3);
   84|     50|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   85|     50|auto end_target = std::chrono::high_resolution_clock::now();//erase
   86|     50|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   87|       |
   88|     50|    return 0;
   89|     50|}
_ZN8GfxStateC2Ev:
   18|     50|    GfxState() {
   19|       |        // Initialize members
   20|     50|        fontSize = 12; // Default font size
   21|     50|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     50|    }
_ZN8GfxState11setFontSizeEi:
   24|     50|    void setFontSize(int size) {
   25|     50|        fontSize = size;
   26|     50|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     50|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   41|       |        // Implementation of drawChar (placeholder)
   42|       |        // For demonstration purposes, we can print the parameters
   43|     50|        printf("Drawing char: %u at (%.2f, %.2f) with width %.2f and height %.2f\n", charCode, x, y, width, height);
   44|     50|    }

