LLVMFuzzerTestOneInput:
   33|     44|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|     44|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|     44|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize parameters for the function
   38|     44|    GfxState gfxState; // Create an instance of GfxState
   39|       |
   40|       |    // Consume floating point values for the position and dimensions
   41|     44|    double x = stream.ConsumeFloatingPoint<double>();
   42|     44|    double y = stream.ConsumeFloatingPoint<double>();
   43|     44|    double width = stream.ConsumeFloatingPoint<double>();
   44|     44|    double height = stream.ConsumeFloatingPoint<double>();
   45|     44|    double dx = stream.ConsumeFloatingPoint<double>();
   46|     44|    double dy = stream.ConsumeFloatingPoint<double>();
   47|       |
   48|       |    // Consume a CharCode
   49|     44|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   50|       |
   51|       |    // Consume an integer for font size
   52|     44|    int fontSize = stream.ConsumeIntegral<int>();
   53|       |
   54|       |    // Consume a Unicode array
   55|     44|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Size of Unicode array between 1 and 10
   56|     44|    std::vector<Unicode> unicodeData(unicodeCount);
   57|    156|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (57:24): [True: 112, False: 44]
  ------------------
   58|    112|        unicodeData[i] = stream.ConsumeIntegral<Unicode>(); // Fill with random Unicode values
   59|    112|    }
   60|       |
   61|       |    // Consume boolean flags
   62|     44|    GBool isStroke = stream.ConsumeBool();
   63|     44|    GBool isFill = stream.ConsumeBool();
   64|     44|    GBool isClip = stream.ConsumeBool();
   65|       |
   66|       |    // Create an instance of SplashOutputDev
   67|     44|    SplashOutputDev splashOutputDev;
   68|       |
   69|       |    // Call the function under test
   70|     44|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   71|     44|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeData.data(), static_cast<int>(unicodeCount), isStroke, isFill, isClip);
   72|     44|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   73|     44|auto end_target = std::chrono::high_resolution_clock::now();//erase
   74|     44|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   75|       |
   76|     44|    return 0;
   77|     44|}
_ZN8GfxStateC2Ev:
   17|     44|    GfxState() : someStateValue(0) {}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   26|     44|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeData, int unicodeCount, GBool isStroke, GBool isFill, GBool isClip) {
   27|       |        // Implementation of drawChar (placeholder)
   28|       |        // For demonstration purposes, we can print the parameters
   29|     44|        printf("Drawing char: %u at (%.2f, %.2f) with size %d\n", charCode, x, y, fontSize);
   30|     44|    }

