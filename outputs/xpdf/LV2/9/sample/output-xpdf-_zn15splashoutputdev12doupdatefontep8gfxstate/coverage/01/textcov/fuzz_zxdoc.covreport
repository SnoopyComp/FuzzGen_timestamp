LLVMFuzzerTestOneInput:
   42|     18|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   43|     18|auto start_target = std::chrono::high_resolution_clock::now();//erase
   44|     18|    FuzzedDataProvider stream(data, size);
   45|       |
   46|       |    // Create an instance of SplashOutputDev
   47|     18|    SplashOutputDev splashOutputDev;
   48|       |
   49|       |    // Create a GfxState object
   50|     18|    GfxState gfxState;
   51|       |
   52|       |    // Use the fuzzed data to influence the GfxState
   53|     18|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   54|     18|    gfxState.setFontSize(fontSize);
   55|       |
   56|       |    // Consume a string from the fuzzed data for the font name
   57|     18|    std::string fontName = stream.ConsumeRandomLengthString(49); // Max length 49 to fit in the buffer
   58|     18|    gfxState.setFontName(fontName.c_str());
   59|       |
   60|       |    // Call the function under test
   61|     18|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   62|     18|    splashOutputDev.doUpdateFont(&gfxState);
   63|     18|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   64|     18|auto end_target = std::chrono::high_resolution_clock::now();//erase
   65|     18|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   66|       |
   67|     18|    return 0;
   68|     18|}
_ZN8GfxStateC2Ev:
   17|     18|    GfxState() {
   18|       |        // Initialize members
   19|     18|        fontSize = 12; // Default font size
   20|     18|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   21|     18|    }
_ZN8GfxState11setFontSizeEi:
   23|     18|    void setFontSize(int size) {
   24|     18|        fontSize = size;
   25|     18|    }
_ZN8GfxState11setFontNameEPKc:
   27|     18|    void setFontName(const char* name) {
   28|     18|        strncpy(fontName, name, sizeof(fontName) - 1);
   29|     18|        fontName[sizeof(fontName) - 1] = '\0'; // Ensure null-termination
   30|     18|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   35|     18|    void doUpdateFont(GfxState *state) {
   36|       |        // Function implementation (placeholder)
   37|       |        // This is just for demonstration and should be replaced with actual logic.
   38|     18|        printf("Font Size: %d, Font Name: %s\n", state->fontSize, state->fontName);
   39|     18|    }

