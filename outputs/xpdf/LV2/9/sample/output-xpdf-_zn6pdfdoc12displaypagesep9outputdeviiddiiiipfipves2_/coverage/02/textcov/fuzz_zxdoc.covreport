LLVMFuzzerTestOneInput:
   29|      9|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   30|      9|auto start_target = std::chrono::high_resolution_clock::now();//erase
   31|      9|    FuzzedDataProvider stream(data, size);
   32|       |
   33|       |    // Initialize parameters for the function
   34|      9|    OutputDev outputDev; // Create an instance of OutputDev (not null)
   35|       |    
   36|      9|    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Page start between 1 and 100
   37|      9|    int pageEnd = stream.ConsumeIntegralInRange<int>(1, 100); // Page end between 1 and 100
   38|      9|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   39|      9|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   40|      9|    int zoom = stream.ConsumeIntegralInRange<int>(1, 10); // Zoom level between 1 and 10
   41|      9|    GBool crop = stream.ConsumeBool(); // Crop flag
   42|      9|    GBool rotate = stream.ConsumeBool(); // Rotate flag
   43|      9|    GBool print = stream.ConsumeBool(); // Print flag
   44|       |    
   45|       |    // Create a subroutine type pointer (not null)
   46|      9|    DW_TAG_subroutine_typeInfinite_loop subroutineType;
   47|      9|    DW_TAG_subroutine_typeInfinite_loop *subroutinePtr = &subroutineType;
   48|       |
   49|       |    // Pointer to user data, can be initialized to nullptr or some valid data
   50|      9|    void *userData = nullptr; // Assuming this can be null for the test
   51|       |
   52|       |    // Call the function under test
   53|      9|    PDFDoc pdfDoc;
   54|      9|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   55|      9|    pdfDoc.displayPages(&outputDev, pageStart, pageEnd, x, y, zoom, crop, rotate, print, subroutinePtr, userData);
   56|      9|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   57|      9|auto end_target = std::chrono::high_resolution_clock::now();//erase
   58|      9|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   59|       |
   60|      9|    return 0;
   61|      9|}
_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbPiPv:
   22|      9|    void displayPages(OutputDev *outputDev, int pageStart, int pageEnd, double x, double y, int zoom, GBool crop, GBool rotate, GBool print, DW_TAG_subroutine_typeInfinite_loop *subroutine, void *userData) {
   23|       |        // Function implementation (placeholder)
   24|       |        // For demonstration, we can print the parameters (in a real implementation, this would do something meaningful)
   25|      9|        printf("Pages: %d to %d, Position: (%f, %f), Zoom: %d, Crop: %d, Rotate: %d, Print: %d\n", pageStart, pageEnd, x, y, zoom, crop, rotate, print);
   26|      9|    }

