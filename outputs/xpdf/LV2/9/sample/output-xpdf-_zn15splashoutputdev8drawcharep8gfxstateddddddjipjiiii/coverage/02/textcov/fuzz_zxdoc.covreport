LLVMFuzzerTestOneInput:
   33|     44|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|     44|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|     44|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize parameters for the function
   38|     44|    GfxState gfxState; // Create an instance of GfxState
   39|     44|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   40|     44|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   41|     44|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   42|     44|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   43|     44|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   44|     44|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   45|     44|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // Character code
   46|     44|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100
   47|       |
   48|       |    // Consume Unicode array
   49|     44|    size_t unicodeSize = stream.ConsumeIntegralInRange<size_t>(1, 10); // Size for Unicode array
   50|     44|    std::vector<Unicode> unicodeArray(unicodeSize);
   51|    148|    for (size_t i = 0; i < unicodeSize; ++i) {
  ------------------
  |  Branch (51:24): [True: 104, False: 44]
  ------------------
   52|    104|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill Unicode array with values
   53|    104|    }
   54|       |
   55|     44|    int unicodeCount = static_cast<int>(unicodeSize); // Unicode count
   56|     44|    GBool flag1 = stream.ConsumeBool(); // First boolean parameter
   57|     44|    GBool flag2 = stream.ConsumeBool(); // Second boolean parameter
   58|     44|    GBool flag3 = stream.ConsumeBool(); // Third boolean parameter
   59|       |
   60|       |    // Create an instance of SplashOutputDev
   61|     44|    SplashOutputDev splashOutputDev;
   62|       |
   63|       |    // Call the function under test
   64|     44|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   65|     44|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), unicodeCount, flag1, flag2, flag3);
   66|     44|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   67|     44|auto end_target = std::chrono::high_resolution_clock::now();//erase
   68|     44|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   69|       |
   70|     44|    return 0;
   71|     44|}
_ZN8GfxStateC2Ev:
   18|     44|    GfxState() : someStateValue(0) {}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   27|     44|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   28|       |        // Implementation of drawChar (placeholder)
   29|     44|        printf("Drawing char: %u at (%.2f, %.2f) with size %d\n", charCode, x, y, fontSize);
   30|     44|    }

