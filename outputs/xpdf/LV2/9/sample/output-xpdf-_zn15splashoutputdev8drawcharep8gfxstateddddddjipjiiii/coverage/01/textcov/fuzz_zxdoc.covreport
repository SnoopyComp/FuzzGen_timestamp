LLVMFuzzerTestOneInput:
   46|     44|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   47|     44|auto start_target = std::chrono::high_resolution_clock::now();//erase
   48|     44|    FuzzedDataProvider stream(data, size);
   49|       |
   50|       |    // Create an instance of SplashOutputDev
   51|     44|    SplashOutputDev splashOutputDev;
   52|       |
   53|       |    // Create a GfxState object
   54|     44|    GfxState gfxState;
   55|       |
   56|       |    // Use the fuzzed data to influence the GfxState
   57|     44|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   58|     44|    gfxState.setFontSize(fontSize);
   59|       |
   60|       |    // Consume coordinates and dimensions
   61|     44|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   62|     44|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   63|     44|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   64|     44|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   65|     44|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   66|     44|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   67|       |
   68|       |    // Consume CharCode
   69|     44|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   70|       |
   71|       |    // Consume Unicode array
   72|     44|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Count of Unicode characters
   73|     44|    std::vector<Unicode> unicodeArray(unicodeCount);
   74|    124|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (74:24): [True: 80, False: 44]
  ------------------
   75|     80|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array with fuzzed data
   76|     80|    }
   77|       |
   78|       |    // Consume boolean flags
   79|     44|    GBool flag1 = stream.ConsumeBool();
   80|     44|    GBool flag2 = stream.ConsumeBool();
   81|     44|    GBool flag3 = stream.ConsumeBool();
   82|       |
   83|       |    // Call the function under test
   84|     44|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   85|     44|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), flag1, flag2, flag3);
   86|     44|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   87|     44|auto end_target = std::chrono::high_resolution_clock::now();//erase
   88|     44|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   89|       |
   90|     44|    return 0;
   91|     44|}
_ZN8GfxStateC2Ev:
   18|     44|    GfxState() {
   19|       |        // Initialize members
   20|     44|        fontSize = 12; // Default font size
   21|     44|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     44|    }
_ZN8GfxState11setFontSizeEi:
   24|     44|    void setFontSize(int size) {
   25|     44|        fontSize = size;
   26|     44|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     44|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   41|       |        // Implementation of drawChar (placeholder)
   42|     44|        printf("Drawing char: %u at (%.2f, %.2f) with width %.2f and height %.2f\n", charCode, x, y, width, height);
   43|     44|    }

