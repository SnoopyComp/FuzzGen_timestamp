LLVMFuzzerTestOneInput:
   47|     57|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   48|     57|auto start_target = std::chrono::high_resolution_clock::now();//erase
   49|     57|    FuzzedDataProvider stream(data, size);
   50|       |
   51|       |    // Create an instance of SplashOutputDev
   52|     57|    SplashOutputDev splashOutputDev;
   53|       |
   54|       |    // Create a GfxState object
   55|     57|    GfxState gfxState;
   56|       |
   57|       |    // Use the fuzzed data to influence the GfxState
   58|     57|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Random font size between 1 and 100
   59|     57|    gfxState.setFontSize(fontSize);
   60|       |
   61|       |    // Consume a string from the fuzzed data for the font name
   62|     57|    std::string fontName = stream.ConsumeRandomLengthString(49); // Max length 49 to fit in the buffer
   63|     57|    gfxState.setFontName(fontName.c_str());
   64|       |
   65|       |    // Prepare parameters for drawChar
   66|     57|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   67|     57|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   68|     57|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   69|     57|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   70|     57|    double xOffset = stream.ConsumeFloatingPoint<double>(); // X offset
   71|     57|    double yOffset = stream.ConsumeFloatingPoint<double>(); // Y offset
   72|     57|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   73|     57|    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 10); // Number of Unicode characters
   74|     57|    std::vector<Unicode> unicodeArray(unicodeCount); // Create a Unicode array
   75|    153|    for (int i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (75:21): [True: 96, False: 57]
  ------------------
   76|     96|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the Unicode array with random values
   77|     96|    }
   78|     57|    GBool flag1 = stream.ConsumeBool(); // First boolean parameter
   79|     57|    GBool flag2 = stream.ConsumeBool(); // Second boolean parameter
   80|     57|    GBool flag3 = stream.ConsumeBool(); // Third boolean parameter
   81|       |
   82|       |    // Call the function under test
   83|     57|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   84|     57|    splashOutputDev.drawChar(&gfxState, x, y, width, height, xOffset, yOffset, charCode, fontSize, unicodeArray.data(), unicodeCount, flag1, flag2, flag3);
   85|     57|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   86|     57|auto end_target = std::chrono::high_resolution_clock::now();//erase
   87|     57|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   88|       |
   89|     57|    return 0;
   90|     57|}
_ZN8GfxStateC2Ev:
   18|     57|    GfxState() {
   19|       |        // Initialize members
   20|     57|        fontSize = 12; // Default font size
   21|     57|        memset(fontName, 0, sizeof(fontName)); // Clear font name
   22|     57|    }
_ZN8GfxState11setFontSizeEi:
   24|     57|    void setFontSize(int size) {
   25|     57|        fontSize = size;
   26|     57|    }
_ZN8GfxState11setFontNameEPKc:
   28|     57|    void setFontName(const char* name) {
   29|     57|        strncpy(fontName, name, sizeof(fontName) - 1);
   30|     57|        fontName[sizeof(fontName) - 1] = '\0'; // Ensure null-termination
   31|     57|    }
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   40|     57|    void drawChar(GfxState *state, double x, double y, double width, double height, double xOffset, double yOffset, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   41|       |        // Implementation of drawChar (placeholder)
   42|       |        // For demonstration purposes, we can print the parameters
   43|     57|        printf("Drawing char: %u at (%.2f, %.2f) with width %.2f and height %.2f\n", charCode, x, y, width, height);
   44|     57|    }

