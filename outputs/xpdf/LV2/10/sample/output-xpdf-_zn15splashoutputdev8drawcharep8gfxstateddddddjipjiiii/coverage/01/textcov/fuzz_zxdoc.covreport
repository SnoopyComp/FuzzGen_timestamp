LLVMFuzzerTestOneInput:
   33|     37|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|     37|auto start_target = std::chrono::high_resolution_clock::now();//erase
   35|     37|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize parameters for the function
   38|     37|    GfxState gfxState; // Create an instance of GfxState
   39|       |
   40|     37|    double x = stream.ConsumeFloatingPoint<double>(); // X coordinate
   41|     37|    double y = stream.ConsumeFloatingPoint<double>(); // Y coordinate
   42|     37|    double width = stream.ConsumeFloatingPoint<double>(); // Width
   43|     37|    double height = stream.ConsumeFloatingPoint<double>(); // Height
   44|     37|    double dx = stream.ConsumeFloatingPoint<double>(); // Delta X
   45|     37|    double dy = stream.ConsumeFloatingPoint<double>(); // Delta Y
   46|     37|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode
   47|     37|    int fontSize = stream.ConsumeIntegralInRange<int>(1, 100); // Font size between 1 and 100
   48|       |
   49|       |    // Consume an array of Unicode values
   50|     37|    size_t unicodeCount = stream.ConsumeIntegralInRange<size_t>(1, 10); // Number of Unicode characters
   51|     37|    std::vector<Unicode> unicodeArray(unicodeCount);
   52|     94|    for (size_t i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (52:24): [True: 57, False: 37]
  ------------------
   53|     57|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>(); // Fill the array with fuzzed data
   54|     57|    }
   55|       |
   56|       |    // Consume boolean flags
   57|     37|    GBool flag1 = stream.ConsumeBool(); // First boolean flag
   58|     37|    GBool flag2 = stream.ConsumeBool(); // Second boolean flag
   59|     37|    GBool flag3 = stream.ConsumeBool(); // Third boolean flag
   60|       |
   61|       |    // Call the function under test
   62|     37|    SplashOutputDev splashOutputDev;
   63|     37|	auto start_func = std::chrono::high_resolution_clock::now();//erase
   64|     37|    splashOutputDev.drawChar(&gfxState, x, y, width, height, dx, dy, charCode, fontSize, unicodeArray.data(), static_cast<int>(unicodeCount), flag1, flag2, flag3);
   65|     37|	auto end_func = std::chrono::high_resolution_clock::now();//erase
   66|     37|auto end_target = std::chrono::high_resolution_clock::now();//erase
   67|     37|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;//erase
   68|       |
   69|     37|    return 0;
   70|     37|}
_ZN8GfxStateC2Ev:
   17|     37|    GfxState() : someStateValue(0) {} // Default constructor
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   26|     37|    void drawChar(GfxState *state, double x, double y, double width, double height, double dx, double dy, CharCode charCode, int fontSize, Unicode *unicodeArray, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   27|       |        // Implementation of drawChar (placeholder)
   28|     37|        printf("Drawing char: %u at (%f, %f) with size %d\n", charCode, x, y, fontSize);
   29|       |        // Additional logic would go here
   30|     37|    }

