{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <iostream> // For std::cout (if needed for debugging)\\n#include \"PDFDoc.h\" // Include the header where PDFDoc is defined\\n#include \"OutputDev.h\" // Include the header where OutputDev is defined\\n#include \"../goo/gtypes.h\" // Include the header where GBool is defined\\n#include \"../goo/GString.h\" // Include the header where GString is defined\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    // Implement the pure virtual functions from OutputDev\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\n// Callback function to check for abort condition\\nGBool abortCheckCallback(void *data) {\\n    // You can implement logic here to determine if the operation should abort\\n    return false; // For now, we return false to indicate no abort\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters\\n    MyOutputDev outputDev; // Use the derived class\\n    int pageStart = stream.ConsumeIntegralInRange<int>(1, 100); // Example range for page numbers\\n    int pageEnd = stream.ConsumeIntegralInRange<int>(pageStart, 100); // Ensure pageEnd is >= pageStart\\n    double zoomX = stream.ConsumeFloatingPoint<double>();\\n    double zoomY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegralInRange<int>(0, 360); // Rotation in degrees\\n    GBool useCache = stream.ConsumeBool();\\n    GBool renderAnnotations = stream.ConsumeBool();\\n    GBool useTransparency = stream.ConsumeBool();\\n\\n    // Prepare a placeholder for infinite loop parameter\\n    bool infiniteLoop = false; // Placeholder for infinite loop parameter\\n\\n    std::vector<uint8_t> remainingBytes = stream.ConsumeRemainingBytes<uint8_t>(); // Correct usage of ConsumeRemainingBytes\\n    void *userData = remainingBytes.data(); // Use remaining bytes as user data\\n\\n    // Create a valid PDFDoc object using a valid constructor\\n    GString fileName(\"dummy.pdf\"); // Provide a dummy file name\\n    PDFDoc doc(&fileName); // Use the constructor that requires a GString\\n\\n    // Check if the PDF document is valid before proceeding\\n    if (!doc.isOk()) {\\n        return 0; // If the document is not valid, exit early\\n    }\\n\\n    // Call the function under test\\n    doc.displayPages(&outputDev, pageStart, pageEnd, zoomX, zoomY, rotation, useCache, renderAnnotations, useTransparency, abortCheckCallback, userData);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "41.96",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <iostream> // Include for standard I/O, if needed\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass OutputDev {};\\nusing GBool = bool;\\nusing DW_TAG_subroutine_typeInfinite_loop = int; // Placeholder type\\n\\n// Forward declaration of PDFDoc class\\nclass PDFDoc {\\npublic:\\n    void displayPages(OutputDev *output_dev, int page_start, int page_end, double x, double y, int zoom, GBool is_printing, GBool is_preview, GBool is_high_quality, DW_TAG_subroutine_typeInfinite_loop *loop_tag, void *user_data);\\n};\\n\\nvoid PDFDoc::displayPages(OutputDev *output_dev, int page_start, int page_end, double x, double y, int zoom, GBool is_printing, GBool is_preview, GBool is_high_quality, DW_TAG_subroutine_typeInfinite_loop *loop_tag, void *user_data) {\\n    // Function implementation\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize OutputDev\\n    OutputDev output_dev;\\n\\n    // Consume integer values for page start and end\\n    int page_start = fuzzed_data.ConsumeIntegral<int>();\\n    int page_end = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume double values for x and y coordinates\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n\\n    // Consume integer value for zoom\\n    int zoom = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume boolean values\\n    GBool is_printing = fuzzed_data.ConsumeBool();\\n    GBool is_preview = fuzzed_data.ConsumeBool();\\n    GBool is_high_quality = fuzzed_data.ConsumeBool();\\n\\n    // Initialize loop_tag\\n    DW_TAG_subroutine_typeInfinite_loop loop_tag;\\n\\n    // Initialize user_data pointer\\n    // Correcting to consume bytes as a vector of uint8_t\\n    std::vector<uint8_t> user_data_vector = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    void *user_data = user_data_vector.data();\\n\\n    // Call the function under test\\n    PDFDoc pdf_doc; // Assuming you have an instance of PDFDoc\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdf_doc.displayPages(&output_dev, page_start, page_end, x, y, zoom, is_printing, is_preview, is_high_quality, &loop_tag, user_data);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}