{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "54.68",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <cstdlib> // For std::size_t\\n#include <cstring> // For std::memcpy\\n\\n// Assuming these types are defined somewhere in the project\\nclass GfxState {};\\n\\n// Forward declaration of SplashOutputDev class\\nclass SplashOutputDev {\\npublic:\\n    static void drawChar(GfxState *state, double x, double y, double width, double height,\\n                         double r, double g, uint32_t charCode, int fontSize,\\n                         uint32_t *unicode, int unicodeCount, bool flag1, bool flag2, bool flag3);\\n};\\n\\nusing CharCode = uint32_t; // Example definition, replace with actual type\\nusing Unicode = uint32_t; // Example definition, replace with actual type\\nusing GBool = bool; // Example definition, replace with actual type\\n\\n// Function under test\\nvoid SplashOutputDev::drawChar(GfxState *state, double x, double y, double width, double height,\\n                                double r, double g, CharCode charCode, int fontSize,\\n                                Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {\\n    // Implementation of the function (not provided in the original code)\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer\\n    GfxState gfxState;\\n\\n    // Consume doubles for x, y, width, height, r, g\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double r = stream.ConsumeFloatingPoint<double>();\\n    double g = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and fontSize\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int fontSize = stream.ConsumeIntegral<int>();\\n\\n    // Consume Unicode array\\n    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 100); // Ensure at least 1 Unicode character\\n    std::vector<Unicode> unicodeArray(unicodeCount); // Preallocate the vector\\n\\n    // Fill the unicodeArray with random data\\n    for (int i = 0; i < unicodeCount; ++i) {\\n        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n\\n    // Consume GBool flags\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    SplashOutputDev::drawChar(&gfxState, x, y, width, height, r, g, charCode, fontSize, unicodeArray.data(), unicodeCount, flag1, flag2, flag3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint> // For uint8_t\\n#include <cstdlib> // For size_t\\n#include <string>  // For std::string\\n\\n// Include the necessary headers for xpdf types\\n#include \"GfxState.h\"          // Assuming this header defines GfxState\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"  // Corrected path for SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include the header for PDFDoc\\n#include \"/src/xpdf-4.05/xpdf/SplashTypes.h\" // Include the header for SplashColorMode\\n\\n// Removed the inclusion of CharCode.h as instructed\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize the FuzzedDataProvider with the input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a GfxState pointer with proper initialization\\n    double hDPI = 72.0;\\n    double vDPI = 72.0;\\n    PDFRectangle pageBox = {0, 0, 100, 100}; // Example page box\\n    int rotate = 0;\\n    GBool upsideDown = gFalse;\\n    \\n    GfxState* gfx_state = new GfxState(hDPI, vDPI, &pageBox, rotate, upsideDown); // Ensure this is properly initialized as per your requirements\\n\\n    // Consume double values\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double width = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double height = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double x_offset = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y_offset = fuzzed_data.ConsumeFloatingPoint<double>();\\n\\n    // Use an alternative for CharCode, assuming it's an integer type\\n    // For demonstration, we will use int directly as a substitute\\n    int char_code = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume an integer value\\n    int int_value = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Create a Unicode pointer (not NULL)\\n    size_t unicode_length = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100); // Ensure at least 1 byte for Unicode\\n    Unicode* unicode_data = new Unicode[unicode_length]; // Allocate memory for Unicode data\\n\\n    // Validate the size of the consumed data\\n    if (size < unicode_length * sizeof(Unicode)) {\\n        delete[] unicode_data; // Free the allocated Unicode data\\n        delete gfx_state; // Clean up GfxState\\n        return 0; // Exit early if the data size is insufficient\\n    }\\n\\n    // Consume data for Unicode\\n    fuzzed_data.ConsumeData(unicode_data, unicode_length * sizeof(Unicode)); // Fill the Unicode data\\n\\n    // Validate the size of the consumed data\\n    if (fuzzed_data.remaining_bytes() < unicode_length * sizeof(Unicode)) {\\n        delete[] unicode_data; // Free the allocated Unicode data\\n        delete gfx_state; // Clean up GfxState\\n        return 0; // Exit early if the data size is insufficient\\n    }\\n\\n    // Consume GBool values\\n    GBool bool_value1 = fuzzed_data.ConsumeBool() ? gTrue : gFalse; // Assuming gTrue and gFalse are defined\\n    GBool bool_value2 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n    GBool bool_value3 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n\\n    // Create an instance of SplashOutputDev with proper initialization\\n    SplashColorMode colorMode = splashModeRGB8; // Changed to splashModeRGB8\\n    int bitmapRowPad = 0; // Example padding\\n    GBool reverseVideo = gFalse; // Example reverse video\\n    SplashColorPtr paperColor = nullptr; // Example paper color\\n    GBool bitmapTopDown = gTrue; // Example bitmap direction\\n    GBool allowAntialias = gTrue; // Example antialiasing option\\n\\n    SplashOutputDev splash_output_dev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias); // Create an instance of SplashOutputDev\\n\\n    // Call the function-under-test\\n    splash_output_dev.drawChar(gfx_state, x, y, width, height, x_offset, y_offset, char_code, int_value, unicode_data, unicode_length, bool_value1, bool_value2, bool_value3);\\n\\n    // Clean up\\n    delete[] unicode_data; // Free the allocated Unicode data\\n    delete gfx_state; // Clean up GfxState\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}