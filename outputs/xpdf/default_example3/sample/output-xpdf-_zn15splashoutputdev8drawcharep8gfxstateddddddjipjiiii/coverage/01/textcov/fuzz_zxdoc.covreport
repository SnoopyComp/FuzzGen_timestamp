_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   29|     51|                                Unicode *unicode, int unicodeCount, GBool flag1, GBool flag2, GBool flag3) {
   30|       |    // Implementation of the function (not provided in the original code)
   31|     51|}
LLVMFuzzerTestOneInput:
   33|     51|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   34|     51|auto start_target = std::chrono::high_resolution_clock::now();
   35|     51|    FuzzedDataProvider stream(data, size);
   36|       |
   37|       |    // Initialize GfxState pointer
   38|     51|    GfxState gfxState;
   39|       |
   40|       |    // Consume doubles for x, y, width, height, r, g
   41|     51|    double x = stream.ConsumeFloatingPoint<double>();
   42|     51|    double y = stream.ConsumeFloatingPoint<double>();
   43|     51|    double width = stream.ConsumeFloatingPoint<double>();
   44|     51|    double height = stream.ConsumeFloatingPoint<double>();
   45|     51|    double r = stream.ConsumeFloatingPoint<double>();
   46|     51|    double g = stream.ConsumeFloatingPoint<double>();
   47|       |
   48|       |    // Consume CharCode and fontSize
   49|     51|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   50|     51|    int fontSize = stream.ConsumeIntegral<int>();
   51|       |
   52|       |    // Consume Unicode array
   53|     51|    int unicodeCount = stream.ConsumeIntegralInRange<int>(1, 100); // Ensure at least 1 Unicode character
   54|     51|    std::vector<Unicode> unicodeArray(unicodeCount); // Preallocate the vector
   55|       |
   56|       |    // Fill the unicodeArray with random data
   57|    603|    for (int i = 0; i < unicodeCount; ++i) {
  ------------------
  |  Branch (57:21): [True: 552, False: 51]
  ------------------
   58|    552|        unicodeArray[i] = stream.ConsumeIntegral<Unicode>();
   59|    552|    }
   60|       |
   61|       |    // Consume GBool flags
   62|     51|    GBool flag1 = stream.ConsumeBool();
   63|     51|    GBool flag2 = stream.ConsumeBool();
   64|     51|    GBool flag3 = stream.ConsumeBool();
   65|       |
   66|       |    // Call the function under test
   67|     51|	auto start_func = std::chrono::high_resolution_clock::now();
   68|     51|    SplashOutputDev::drawChar(&gfxState, x, y, width, height, r, g, charCode, fontSize, unicodeArray.data(), unicodeCount, flag1, flag2, flag3);
   69|     51|	auto end_func = std::chrono::high_resolution_clock::now();
   70|     51|auto end_target = std::chrono::high_resolution_clock::now();
   71|     51|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   72|       |
   73|     51|    return 0;
   74|     51|}

