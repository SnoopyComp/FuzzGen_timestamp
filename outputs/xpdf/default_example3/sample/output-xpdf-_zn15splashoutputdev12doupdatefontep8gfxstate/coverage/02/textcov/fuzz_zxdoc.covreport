LLVMFuzzerTestOneInput:
   30|      5|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   31|      5|auto start_target = std::chrono::high_resolution_clock::now();
   32|      5|    FuzzedDataProvider stream(data, size);
   33|       |
   34|       |    // Create a GfxState object
   35|      5|    GfxState gfx_state;
   36|       |
   37|       |    // Initialize the GfxState object with fuzzed data
   38|      5|    gfx_state.some_value = stream.ConsumeIntegral<int>();
   39|       |
   40|       |    // Consume a random length of bytes for the data vector
   41|      5|    size_t data_length = stream.ConsumeIntegralInRange<size_t>(1, 1024); // Ensure at least 1 byte
   42|      5|    gfx_state.data = stream.ConsumeBytes<uint8_t>(data_length);
   43|       |
   44|       |    // Create a SplashOutputDev object and call the function to fuzz
   45|      5|    SplashOutputDev splash_output_dev;
   46|      5|	auto start_func = std::chrono::high_resolution_clock::now();
   47|      5|    splash_output_dev.doUpdateFont(&gfx_state);
   48|      5|	auto end_func = std::chrono::high_resolution_clock::now();
   49|      5|auto end_target = std::chrono::high_resolution_clock::now();
   50|      5|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   51|       |
   52|      5|    return 0;
   53|      5|}
_ZN8GfxStateC2Ev:
   16|      5|    GfxState() : some_value(0) {}
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   22|      5|    void doUpdateFont(GfxState *state) {
   23|       |        // Implementation of the function (mocked)
   24|      5|        if (state != nullptr) {
  ------------------
  |  Branch (24:13): [True: 5, False: 0]
  ------------------
   25|      5|            state->some_value += 1; // Just a simple operation for demonstration
   26|      5|        }
   27|      5|    }

