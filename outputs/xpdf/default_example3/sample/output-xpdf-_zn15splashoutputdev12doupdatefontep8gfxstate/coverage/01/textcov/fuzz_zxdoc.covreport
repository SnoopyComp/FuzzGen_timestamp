LLVMFuzzerTestOneInput:
   27|      3|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   28|      3|auto start_target = std::chrono::high_resolution_clock::now();
   29|      3|    FuzzedDataProvider fuzzed_data(data, size);
   30|       |
   31|       |    // Initialize GfxState structure
   32|      3|    GfxState gfxState;
   33|      3|    gfxState.someField = fuzzed_data.ConsumeIntegral<int>(); // Example integer field
   34|      3|    gfxState.anotherField = fuzzed_data.ConsumeFloatingPoint<float>(); // Example float field
   35|       |
   36|       |    // Create an instance of SplashOutputDev
   37|      3|    SplashOutputDev splashOutputDev;
   38|       |
   39|       |    // Call the function under test
   40|      3|	auto start_func = std::chrono::high_resolution_clock::now();
   41|      3|    splashOutputDev.doUpdateFont(&gfxState);
   42|      3|	auto end_func = std::chrono::high_resolution_clock::now();
   43|      3|auto end_target = std::chrono::high_resolution_clock::now();
   44|      3|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   45|       |
   46|      3|    return 0;
   47|      3|}
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   21|      3|    void doUpdateFont(GfxState *gfxState) {
   22|       |        // Implementation of the function that we want to fuzz.
   23|       |        // This is just a placeholder.
   24|      3|    }

