_ZN6PDFDoc12displayPagesEP9OutputDeviiddibbbPiPv:
   21|     17|void PDFDoc::displayPages(OutputDev *output_dev, int page_start, int page_end, double x, double y, int zoom, GBool is_printing, GBool is_preview, GBool is_high_quality, DW_TAG_subroutine_typeInfinite_loop *loop_tag, void *user_data) {
   22|       |    // Function implementation
   23|     17|}
LLVMFuzzerTestOneInput:
   25|     17|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   26|     17|auto start_target = std::chrono::high_resolution_clock::now();
   27|     17|    FuzzedDataProvider fuzzed_data(data, size);
   28|       |
   29|       |    // Initialize OutputDev
   30|     17|    OutputDev output_dev;
   31|       |
   32|       |    // Consume integer values for page start and end
   33|     17|    int page_start = fuzzed_data.ConsumeIntegral<int>();
   34|     17|    int page_end = fuzzed_data.ConsumeIntegral<int>();
   35|       |
   36|       |    // Consume double values for x and y coordinates
   37|     17|    double x = fuzzed_data.ConsumeFloatingPoint<double>();
   38|     17|    double y = fuzzed_data.ConsumeFloatingPoint<double>();
   39|       |
   40|       |    // Consume integer value for zoom
   41|     17|    int zoom = fuzzed_data.ConsumeIntegral<int>();
   42|       |
   43|       |    // Consume boolean values
   44|     17|    GBool is_printing = fuzzed_data.ConsumeBool();
   45|     17|    GBool is_preview = fuzzed_data.ConsumeBool();
   46|     17|    GBool is_high_quality = fuzzed_data.ConsumeBool();
   47|       |
   48|       |    // Initialize loop_tag
   49|     17|    DW_TAG_subroutine_typeInfinite_loop loop_tag;
   50|       |
   51|       |    // Initialize user_data pointer
   52|       |    // Correcting to consume bytes as a vector of uint8_t
   53|     17|    std::vector<uint8_t> user_data_vector = fuzzed_data.ConsumeRemainingBytes<uint8_t>();
   54|     17|    void *user_data = user_data_vector.data();
   55|       |
   56|       |    // Call the function under test
   57|     17|    PDFDoc pdf_doc; // Assuming you have an instance of PDFDoc
   58|     17|	auto start_func = std::chrono::high_resolution_clock::now();
   59|     17|    pdf_doc.displayPages(&output_dev, page_start, page_end, x, y, zoom, is_printing, is_preview, is_high_quality, &loop_tag, user_data);
   60|     17|	auto end_func = std::chrono::high_resolution_clock::now();
   61|     17|auto end_target = std::chrono::high_resolution_clock::now();
   62|     17|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   63|       |
   64|     17|    return 0;
   65|     17|}

