{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <iostream> // For std::cerr\\n#include \"/src/xpdf-4.05/xpdf/Object.h\" // Include the header for Object type\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\" // Include the header for Dict type\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\" // Include the header for Stream type\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Correct path for SplashOutputDev\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"       // Assuming this header contains the GfxState class\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\" // Include a relevant header for CharCode\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"     // Replaced Unicode.h with an appropriate header\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize GfxState with appropriate parameters (assuming default values for simplicity)\\n    double hDPI = 72.0; // Example DPI\\n    double vDPI = 72.0; // Example DPI\\n    PDFRectangle pageBox = {0, 0, 100, 100}; // Example page box\\n    int rotate = 0; // No rotation\\n    GBool upsideDown = gFalse; // Not upside down\\n    GfxState *gfx_state = new GfxState(hDPI, vDPI, &pageBox, rotate, upsideDown);\\n\\n    // Consume doubles for the coordinates\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double width = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double height = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double x_offset = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y_offset = fuzzed_data.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode (assuming it's an integral type)\\n    uint32_t char_code_value = fuzzed_data.ConsumeIntegral<uint32_t>();\\n    CharCode char_code = static_cast<CharCode>(char_code_value); // Use the correct type\\n\\n    // Consume integer values\\n    int int_value = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Initialize Unicode pointer\\n    size_t unicode_length = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10); // Avoid NULL\\n    Unicode *unicode_array = new Unicode[unicode_length];\\n    for (size_t i = 0; i < unicode_length; ++i) {\\n        unicode_array[i] = static_cast<Unicode>(fuzzed_data.ConsumeIntegral<uint32_t>());\\n    }\\n\\n    // Consume more integers\\n    int some_int = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume GBool values (assuming GBool is a typedef for a boolean type)\\n    GBool bool1 = static_cast<GBool>(fuzzed_data.ConsumeBool());\\n    GBool bool2 = static_cast<GBool>(fuzzed_data.ConsumeBool());\\n    GBool bool3 = static_cast<GBool>(fuzzed_data.ConsumeBool());\\n\\n    // Initialize SplashOutputDev with appropriate parameters (assuming default parameters)\\n    SplashOutputDev splash_output_dev; // Ensure proper constructor is called if parameters are needed\\n\\n    // Call the function under test\\n    splash_output_dev.drawChar(gfx_state, x, y, width, height, x_offset, y_offset, char_code, int_value, unicode_array, some_int, bool1, bool2, bool3);\\n\\n    // Clean up\\n    delete[] unicode_array;\\n    delete gfx_state;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "51.52",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include <cstddef> // Include for size_t\\n\\n// Assuming these types are defined somewhere in the project\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, replace with actual type\\nusing Unicode = uint32_t;   // Example definition, replace with actual type\\nusing GBool = bool;         // Example definition, replace with actual type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation\\n    }\\n};\\n\\n// Definition of the LLVMFuzzerTestOneInput function\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of GfxState\\n    GfxState gfxState;\\n\\n    // Consume double values\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double width = stream.ConsumeFloatingPoint<double>();\\n    double height = stream.ConsumeFloatingPoint<double>();\\n    double xOffset = stream.ConsumeFloatingPoint<double>();\\n    double yOffset = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume CharCode and other integer values\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int intParam = stream.ConsumeIntegral<int>();\\n    \\n    // Consume a random length string to create Unicode data\\n    std::string unicodeString = stream.ConsumeRandomLengthString(10); // Consume a string of length up to 10\\n    std::vector<Unicode> unicodeData(unicodeString.begin(), unicodeString.end()); // Convert string to vector of Unicode\\n    Unicode *unicodePtr = unicodeData.empty() ? nullptr : unicodeData.data(); // Ensure it's not NULL\\n\\n    // Consume additional integer and boolean parameters\\n    int additionalInt = stream.ConsumeIntegral<int>();\\n    GBool boolParam1 = stream.ConsumeBool();\\n    GBool boolParam2 = stream.ConsumeBool();\\n    GBool boolParam3 = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, x, y, width, height, xOffset, yOffset, charCode, intParam, unicodePtr, additionalInt, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}