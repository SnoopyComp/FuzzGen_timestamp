LLVMFuzzerTestOneInput:
   35|     20|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   36|     20|    FuzzedDataProvider stream(data, size);
   37|       |
   38|       |    // Create an instance of SplashOutputDev
   39|     20|    SplashOutputDev splashOutputDev;
   40|       |
   41|       |    // Initialize GfxState
   42|     20|    GfxState gfxState;
   43|       |
   44|       |    // Use fuzz input to set the font data in GfxState
   45|     20|    std::string fontData = stream.ConsumeRandomLengthString();
   46|     20|    size_t fontDataSize = fontData.size();
   47|       |    
   48|       |    // Only proceed if we have valid font data
   49|     20|    if (fontDataSize > 0) {
  ------------------
  |  Branch (49:9): [True: 19, False: 1]
  ------------------
   50|     19|        gfxState.setFontData(reinterpret_cast<const uint8_t*>(fontData.data()), fontDataSize);
   51|       |        // Call the function under test with the initialized gfxState.
   52|     19|        splashOutputDev.doUpdateFont(&gfxState);
   53|     19|    }
   54|       |
   55|     20|    return 0;
   56|     20|}
_ZN8GfxStateC2Ev:
   13|     20|    GfxState() {
   14|       |        // Initialize GfxState with default values.
   15|     20|        memset(fontData, 0, sizeof(fontData)); // Initialize with zeros
   16|     20|    }
_ZN8GfxState11setFontDataEPKhm:
   19|     19|    void setFontData(const uint8_t* data, size_t size) {
   20|       |        // Ensure we don't exceed the bounds of fontData
   21|     19|        memcpy(fontData, data, std::min(size, sizeof(fontData)));
   22|     19|    }
_ZN15SplashOutputDev12doUpdateFontEP8GfxState:
   27|     19|    void doUpdateFont(GfxState *gfxState) {
   28|       |        // Implementation of the function to be tested.
   29|       |        // For demonstration, we might print the first byte of fontData.
   30|       |        // In a real scenario, this would involve more complex operations.
   31|       |        // Example: std::cout << "Updating font with data: " << gfxState->fontData[0] << std::endl;
   32|     19|    }

