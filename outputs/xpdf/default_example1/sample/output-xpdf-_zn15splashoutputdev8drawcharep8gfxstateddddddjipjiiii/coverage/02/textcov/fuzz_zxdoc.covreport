LLVMFuzzerTestOneInput:
   25|     48|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   26|     48|auto start_target = std::chrono::high_resolution_clock::now();
   27|     48|    FuzzedDataProvider stream(data, size);
   28|       |
   29|       |    // Create an instance of GfxState
   30|     48|    GfxState gfxState;
   31|       |
   32|       |    // Consume double values
   33|     48|    double x = stream.ConsumeFloatingPoint<double>();
   34|     48|    double y = stream.ConsumeFloatingPoint<double>();
   35|     48|    double width = stream.ConsumeFloatingPoint<double>();
   36|     48|    double height = stream.ConsumeFloatingPoint<double>();
   37|     48|    double xOffset = stream.ConsumeFloatingPoint<double>();
   38|     48|    double yOffset = stream.ConsumeFloatingPoint<double>();
   39|       |
   40|       |    // Consume CharCode and other integer values
   41|     48|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   42|     48|    int intParam = stream.ConsumeIntegral<int>();
   43|       |    
   44|       |    // Consume a random length string to create Unicode data
   45|     48|    std::string unicodeString = stream.ConsumeRandomLengthString(10); // Consume a string of length up to 10
   46|     48|    std::vector<Unicode> unicodeData(unicodeString.begin(), unicodeString.end()); // Convert string to vector of Unicode
   47|     48|    Unicode *unicodePtr = unicodeData.empty() ? nullptr : unicodeData.data(); // Ensure it's not NULL
  ------------------
  |  Branch (47:27): [True: 31, False: 17]
  ------------------
   48|       |
   49|       |    // Consume additional integer and boolean parameters
   50|     48|    int additionalInt = stream.ConsumeIntegral<int>();
   51|     48|    GBool boolParam1 = stream.ConsumeBool();
   52|     48|    GBool boolParam2 = stream.ConsumeBool();
   53|     48|    GBool boolParam3 = stream.ConsumeBool();
   54|       |
   55|       |    // Call the function-under-test
   56|     48|    SplashOutputDev splashOutputDev;
   57|     48|	auto start_func = std::chrono::high_resolution_clock::now();
   58|     48|    splashOutputDev.drawChar(&gfxState, x, y, width, height, xOffset, yOffset, charCode, intParam, unicodePtr, additionalInt, boolParam1, boolParam2, boolParam3);
   59|     48|	auto end_func = std::chrono::high_resolution_clock::now();
   60|     48|auto end_target = std::chrono::high_resolution_clock::now();
   61|     48|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   62|       |
   63|     48|    return 0;
   64|     48|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   19|     48|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   20|       |        // Function implementation
   21|     48|    }

