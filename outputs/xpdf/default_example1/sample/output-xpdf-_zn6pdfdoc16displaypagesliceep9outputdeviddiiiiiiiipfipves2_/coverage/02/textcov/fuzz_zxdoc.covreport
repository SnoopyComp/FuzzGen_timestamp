LLVMFuzzerTestOneInput:
   30|     27|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) { // Ensure proper linkage
   31|     27|    FuzzedDataProvider fuzzed_data(data, size);
   32|       |
   33|       |    // Initialize parameters
   34|     27|    OutputDev outputDevice; // Non-null pointer
   35|     27|    int pageNumber = fuzzed_data.ConsumeIntegral<int>(); // Random int
   36|     27|    double x1 = fuzzed_data.ConsumeFloatingPoint<double>(); // Random double
   37|     27|    double y1 = fuzzed_data.ConsumeFloatingPoint<double>(); // Random double
   38|     27|    int width = fuzzed_data.ConsumeIntegral<int>(); // Random int
   39|     27|    GBool isPrint = fuzzed_data.ConsumeBool(); // Random bool
   40|     27|    GBool isRender = fuzzed_data.ConsumeBool(); // Random bool
   41|     27|    GBool isThumbnail = fuzzed_data.ConsumeBool(); // Random bool
   42|     27|    int rotation = fuzzed_data.ConsumeIntegral<int>(); // Random int
   43|     27|    int pageCount = fuzzed_data.ConsumeIntegral<int>(); // Random int
   44|     27|    int x2 = fuzzed_data.ConsumeIntegral<int>(); // Random int
   45|     27|    int y2 = fuzzed_data.ConsumeIntegral<int>(); // Random int
   46|       |
   47|       |    // Create a subroutine type pointer, ensuring it's non-null
   48|     27|    DW_TAG_subroutine_type subroutine; // Non-null structure
   49|       |
   50|       |    // Allocate userData from the remaining bytes
   51|     27|    size_t remaining_bytes = fuzzed_data.remaining_bytes();
   52|     27|    void *userData = nullptr;
   53|     27|    if (remaining_bytes > 0) {
  ------------------
  |  Branch (53:9): [True: 1, False: 26]
  ------------------
   54|      1|        userData = malloc(remaining_bytes); // Allocate memory for userData
   55|      1|        if (userData != nullptr) {
  ------------------
  |  Branch (55:13): [True: 1, False: 0]
  ------------------
   56|      1|            std::vector<uint8_t> remainingData = fuzzed_data.ConsumeRemainingBytes<uint8_t>(); // Correctly consume remaining bytes
   57|      1|            memcpy(userData, remainingData.data(), remaining_bytes); // Copy data
   58|      1|        }
   59|      1|    }
   60|       |
   61|       |    // Call the function under test
   62|     27|    PDFDoc pdfDoc; // Create an instance of PDFDoc
   63|     27|    pdfDoc.displayPageSlice(&outputDevice, pageNumber, x1, y1, width, 
   64|     27|                            isPrint, isRender, isThumbnail, 
   65|     27|                            rotation, pageCount, x2, y2, 
   66|     27|                            &subroutine, userData);
   67|       |
   68|       |    // Free the allocated userData memory
   69|     27|    free(userData);
   70|       |
   71|     27|    return 0;
   72|     27|}
_ZN6PDFDoc16displayPageSliceEP9OutputDeviddibbbiiiiP22DW_TAG_subroutine_typePv:
   23|     27|                          DW_TAG_subroutine_type *subroutine, void *userData) {
   24|       |        // Function implementation
   25|     27|        std::cout << "Function called with pageNumber: " << pageNumber << std::endl; // Just for illustration
   26|     27|    }

